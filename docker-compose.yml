version: "3.8"

services:
  # PostgreSQL Database
  gb-postgres:
    image: postgres:15-alpine
    container_name: gb-postgres
    environment:
      POSTGRES_DB: gb_sistema
      POSTGRES_USER: gb_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-gb_secure_pass123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=pt_BR.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - gb-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gb_user -d gb_sistema"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  gb-redis:
    image: redis:7-alpine
    container_name: gb-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gb-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_pass}

  # Backend API (Node.js)
  gb-backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: gb-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      DB_HOST: gb-postgres
      DB_PORT: 5432
      DB_NAME: gb_sistema
      DB_USER: gb_user
      DB_PASSWORD: ${DB_PASSWORD:-gb_secure_pass123}
      REDIS_HOST: gb-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_pass}
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_here}
      JWT_EXPIRES_IN: 24h
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET:-your_refresh_token_secret}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
    ports:
      - "3000:3000"
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    depends_on:
      gb-postgres:
        condition: service_healthy
      gb-redis:
        condition: service_started
    networks:
      - gb-network
    restart: unless-stopped
    profiles:
      - backend

  # Frontend React App
  gb-frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      target: development
    container_name: gb-frontend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
      VITE_APP_NAME: "Gracie Barra Sistema"
    ports:
      - "5173:5173"
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    networks:
      - gb-network
    restart: unless-stopped
    profiles:
      - frontend

  # Website Institucional (Nginx)
  gb-website:
    build:
      context: ./apps/website
      dockerfile: Dockerfile
    container_name: gb-website
    ports:
      - "8080:80"
    volumes:
      - ./apps/website:/usr/share/nginx/html
      - ./nginx/website.conf:/etc/nginx/conf.d/default.conf
    networks:
      - gb-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  gb-proxy:
    image: nginx:alpine
    container_name: gb-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - gb-backend
      - gb-frontend
      - gb-website
    networks:
      - gb-network
    restart: unless-stopped
    profiles:
      - production

  # pgAdmin (Desenvolvimento)
  gb-pgadmin:
    image: dpage/pgadmin4:latest
    container_name: gb-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@graciebarra.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "8081:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - gb-postgres
    networks:
      - gb-network
    profiles:
      - development

  # Monitoring (Prometheus)
  gb-prometheus:
    image: prom/prometheus:latest
    container_name: gb-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - gb-network
    profiles:
      - monitoring

  # Grafana Dashboard
  gb-grafana:
    image: grafana/grafana:latest
    container_name: gb-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - gb-prometheus
    networks:
      - gb-network
    profiles:
      - monitoring

networks:
  gb-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
# Scripts úteis:
# Desenvolvimento completo: docker-compose --profile development --profile backend --profile frontend up -d
# Só backend: docker-compose --profile backend up -d
# Produção: docker-compose --profile production up -d
# Com monitoramento: docker-compose --profile monitoring up -d
