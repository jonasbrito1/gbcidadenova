
===============================================
ANÁLISE COMPLETA DO PROJETO
===============================================
Gerado em: 14/07/2025 15:03:15
Diretório: C:\Users\Home\Desktop\Projects\gbcidadenova

INFORMAÇÕES GERAIS DO PROJETO
=================================
Caminho do projeto: C:\Users\Home\Desktop\Projects\gbcidadenova
Tipo(s) de projeto detectado(s): Node.js/JavaScript

ESTRUTURA DE PASTAS
======================
├── [PASTA] database
│   └── init.sql
├── [PASTA] public
│   ├── [PASTA] admin
│   │   ├── [PASTA] css
│   │   │   └── admin.css (18.5KB)
│   │   ├── [PASTA] js
│   │   │   ├── admin.js (33.3KB)
│   │   │   ├── auth.js (14.1KB)
│   │   │   ├── content.js (18.8KB)
│   │   │   └── file.js (25.7KB)
│   │   └── index.html (13.3KB)
│   ├── [PASTA] api
│   │   ├── [PASTA] classes
│   │   │   ├── Auth.php (19.9KB)
│   │   │   ├── ContentManager.php (22.1KB)
│   │   │   └── FileManager.php (27KB)
│   │   ├── [PASTA] config
│   │   │   └── database.php (15.4KB)
│   │   └── index.php (27.8KB)
│   ├── [PASTA] assets
│   │   ├── [PASTA] css
│   │   ├── [PASTA] images
│   │   │   ├── carlos_gracie.png (208.7KB)
│   │   │   ├── contact_gb.png (7.8KB)
│   │   │   ├── gb1.jpg (735KB)
│   │   │   ├── gb10.jpg (770.4KB)
│   │   │   ├── gb3.png (409.3KB)
│   │   │   ├── gb4.png (903.8KB)
│   │   │   ├── gb6.jpg (622.3KB)
│   │   │   ├── gb8.jpg (182.5KB)
│   │   │   ├── gb9.jpg (861.7KB)
│   │   │   ├── gb_logo.png (222.5KB)
│   │   │   ├── professor_ricardo.png (187.6KB)
│   │   │   ├── professor_victor.jpg (95.4KB)
│   │   │   └── victor.jpg (892.6KB)
│   │   └── [PASTA] js
│   ├── agendamento.html (37.2KB)
│   ├── index.html (94.5KB)
│   └── package.json (0.5KB)
├── [PASTA] src
│   ├── [PASTA] assets
│   ├── index.html (62KB)
│   └── package.json
├── .dockerignore (0.1KB)
├── docker-compose.yml (1.7KB)
├── Dockerfile (0.4KB)
├── Makefile
├── nginx.conf (1.1KB)
├── package.json (0.9KB)
├── projeto_analise_2025-07-14_15-03-15.txt (0.4KB)
└── README.md

ARQUIVOS DE CONFIGURAÇÃO
============================
Encontrado: package.json
Encontrado: public\package.json
Encontrado: src\package.json
Encontrado: public\package-lock.json
Encontrado: src\package-lock.json
Encontrado: Dockerfile
Encontrado: docker-compose.yml
Encontrado: README.md
Encontrado: Makefile
Encontrado: Makefile

CONTEÚDO DOS ARQUIVOS
========================

═══════════════════════════════════════════════════════════════
ARQUIVO: .dockerignore
Tamanho: 0.12KB
Modificado: 06/19/2025 17:11:06
═══════════════════════════════════════════════════════════════
   1 │ node_modules/
   2 │ npm-debug.log
   3 │ .git
   4 │ .gitignore
   5 │ README.md
   6 │ .env
   7 │ .nyc_output
   8 │ coverage
   9 │ .docker
  10 │ Dockerfile*
  11 │ docker-compose*

═══════════════════════════════════════════════════════════════
ARQUIVO: docker-compose.yml
Tamanho: 1.67KB
Modificado: 06/19/2025 17:12:21
═══════════════════════════════════════════════════════════════
   1 │ services:
   2 │   gb-website:
   3 │     build: .
   4 │     container_name: gb-cidade-nova-website
   5 │     ports:
   6 │       - "8800:80"
   7 │     volumes:
   8 │       - ./src:/usr/share/nginx/html
   9 │       - ./nginx.conf:/etc/nginx/conf.d/default.conf
  10 │     restart: unless-stopped
  11 │     networks:
  12 │       - gb-network
  13 │ 
  14 │   gb-dev-server:
  15 │     image: node:18-alpine
  16 │     container_name: gb-cidade-nova-dev
  17 │     working_dir: /app
  18 │     volumes:
  19 │       - ./src:/app
  20 │       - ./package.json:/app/package.json
  21 │       - ./package-lock.json:/app/package-lock.json
  22 │     ports:
  23 │       - "8801:3001"
  24 │     command: >
  25 │       sh -c "
  26 │         if [ ! -d node_modules ]; then
  27 │           npm install
  28 │         fi &&
  29 │         npm run dev
  30 │       "
  31 │     networks:
  32 │       - gb-network
  33 │     profiles:
  34 │       - dev
  35 │ 
  36 │   gb-database:
  37 │     image: mysql:8.0
  38 │     container_name: gb-cidade-nova-db
  39 │     environment:
  40 │       MYSQL_ROOT_PASSWORD: graciebarra123
  41 │       MYSQL_DATABASE: gb_cidade_nova
  42 │       MYSQL_USER: gb_user
  43 │       MYSQL_PASSWORD: gb_password
  44 │     ports:
  45 │       - "8802:3306"
  46 │     volumes:
  47 │       - gb_mysql_data:/var/lib/mysql
  48 │       - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
  49 │     restart: unless-stopped
  50 │     networks:
  51 │       - gb-network
  52 │     profiles:
  53 │       - database
  54 │ 
  55 │   gb-phpmyadmin:
  56 │     image: phpmyadmin/phpmyadmin
  57 │     container_name: gb-cidade-nova-phpmyadmin
  58 │     environment:
  59 │       PMA_HOST: gb-database
  60 │       PMA_USER: gb_user
  61 │       PMA_PASSWORD: gb_password
  62 │       MYSQL_ROOT_PASSWORD: graciebarra123
  63 │     ports:
  64 │       - "8803:80"
  65 │     depends_on:
  66 │       - gb-database
  67 │     networks:
  68 │       - gb-network
  69 │     profiles:
  70 │       - database
  71 │ 
  72 │ networks:
  73 │   gb-network:
  74 │     driver: bridge
  75 │ 
  76 │ volumes:
  77 │   gb_mysql_data:

═══════════════════════════════════════════════════════════════
ARQUIVO: Dockerfile
Tamanho: 0.41KB
Modificado: 06/19/2025 16:09:12
═══════════════════════════════════════════════════════════════
   1 │ # Use nginx como servidor web
   2 │ FROM nginx:alpine
   3 │ 
   4 │ # Criar diretÃ³rio para o projeto
   5 │ WORKDIR /usr/share/nginx/html
   6 │ 
   7 │ # Remover arquivos padrÃ£o do nginx
   8 │ RUN rm -rf ./*
   9 │ 
  10 │ # Copiar arquivos do projeto
  11 │ COPY ./src/ .
  12 │ 
  13 │ # Copiar configuraÃ§Ã£o customizada do nginx
  14 │ COPY nginx.conf /etc/nginx/conf.d/default.conf
  15 │ 
  16 │ # Expor porta 80
  17 │ EXPOSE 80
  18 │ 
  19 │ # Comando para iniciar o nginx
  20 │ CMD ["nginx", "-g", "daemon off;"]

═══════════════════════════════════════════════════════════════
ARQUIVO: Makefile
Tamanho: 0KB
Modificado: 06/19/2025 16:14:02
═══════════════════════════════════════════════════════════════

═══════════════════════════════════════════════════════════════
ARQUIVO: nginx.conf
Tamanho: 1.11KB
Modificado: 07/09/2025 10:47:01
═══════════════════════════════════════════════════════════════
   1 │ server {
   2 │     listen 80;
   3 │     server_name localhost;
   4 │     root /usr/share/nginx/html;
   5 │     index index.html;
   6 │ 
   7 │     # ConfiguraÃ§Ãµes de cache
   8 │     location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
   9 │         expires 1y;
  10 │         add_header Cache-Control "public, immutable";
  11 │     }
  12 │ 
  13 │     # PÃ¡gina principal
  14 │     location / {
  15 │         try_files $uri $uri/ /index.html;
  16 │     }
  17 │ 
  18 │     # PÃ¡gina de agendamento
  19 │     location /agendamento {
  20 │         try_files /agendamento.html =404;
  21 │     }
  22 │ 
  23 │     # Headers de seguranÃ§a
  24 │     add_header X-Frame-Options "SAMEORIGIN" always;
  25 │     add_header X-Content-Type-Options "nosniff" always;
  26 │     add_header X-XSS-Protection "1; mode=block" always;
  27 │     add_header Referrer-Policy "no-referrer-when-downgrade" always;
  28 │ 
  29 │     # CompressÃ£o gzip
  30 │     gzip on;
  31 │     gzip_vary on;
  32 │     gzip_min_length 1024;
  33 │     gzip_types
  34 │         text/plain
  35 │         text/css
  36 │         text/xml
  37 │         text/javascript
  38 │         application/javascript
  39 │         application/xml+rss
  40 │         application/json;
  41 │ 
  42 │     # Log de erros
  43 │     error_log /var/log/nginx/error.log;
  44 │     access_log /var/log/nginx/access.log;
  45 │ }

═══════════════════════════════════════════════════════════════
ARQUIVO: package.json
Tamanho: 0.88KB
Modificado: 06/19/2025 16:09:56
═══════════════════════════════════════════════════════════════
   1 │ {
   2 │   "name": "gracie-barra-cidade-nova",
   3 │   "version": "1.0.0",
   4 │   "description": "Site oficial da Gracie Barra Cidade Nova - Manaus",
   5 │   "main": "index.html",
   6 │   "scripts": {
   7 │     "dev": "live-server --host=0.0.0.0 --port=3001 --entry-file=index.html",
   8 │     "build": "echo 'Build completed'",
   9 │     "start": "docker-compose up -d",
  10 │     "stop": "docker-compose down",
  11 │     "restart": "docker-compose restart",
  12 │     "logs": "docker-compose logs -f",
  13 │     "clean": "docker-compose down -v --remove-orphans"
  14 │   },
  15 │   "keywords": [
  16 │     "gracie-barra",
  17 │     "jiu-jitsu",
  18 │     "manaus",
  19 │     "cidade-nova",
  20 │     "martial-arts"
  21 │   ],
  22 │   "author": "Gracie Barra Cidade Nova",
  23 │   "license": "MIT",
  24 │   "devDependencies": {
  25 │     "live-server": "^1.2.2"
  26 │   },
  27 │   "repository": {
  28 │     "type": "git",
  29 │     "url": "https://github.com/graciebarra/cidade-nova-website"
  30 │   },
  31 │   "engines": {
  32 │     "node": ">=16.0.0"
  33 │   }
  34 │ }

═══════════════════════════════════════════════════════════════
ARQUIVO: projeto_analise_2025-07-14_15-03-15.txt
Tamanho: 2.9KB
Modificado: 07/14/2025 15:03:19
═══════════════════════════════════════════════════════════════
   1 │ 
   2 │ ===============================================
   3 │ ANÁLISE COMPLETA DO PROJETO
   4 │ ===============================================
   5 │ Gerado em: 14/07/2025 15:03:15
   6 │ Diretório: C:\Users\Home\Desktop\Projects\gbcidadenova
   7 │ 
   8 │ INFORMAÇÕES GERAIS DO PROJETO
   9 │ =================================
  10 │ Caminho do projeto: C:\Users\Home\Desktop\Projects\gbcidadenova
  11 │ Tipo(s) de projeto detectado(s): Node.js/JavaScript
  12 │ 
  13 │ ESTRUTURA DE PASTAS
  14 │ ======================
  15 │ ├── [PASTA] database
  16 │ │   └── init.sql
  17 │ ├── [PASTA] public
  18 │ │   ├── [PASTA] admin
  19 │ │   │   ├── [PASTA] css
  20 │ │   │   │   └── admin.css (18.5KB)
  21 │ │   │   ├── [PASTA] js
  22 │ │   │   │   ├── admin.js (33.3KB)
  23 │ │   │   │   ├── auth.js (14.1KB)
  24 │ │   │   │   ├── content.js (18.8KB)
  25 │ │   │   │   └── file.js (25.7KB)
  26 │ │   │   └── index.html (13.3KB)
  27 │ │   ├── [PASTA] api
  28 │ │   │   ├── [PASTA] classes
  29 │ │   │   │   ├── Auth.php (19.9KB)
  30 │ │   │   │   ├── ContentManager.php (22.1KB)
  31 │ │   │   │   └── FileManager.php (27KB)
  32 │ │   │   ├── [PASTA] config
  33 │ │   │   │   └── database.php (15.4KB)
  34 │ │   │   └── index.php (27.8KB)
  35 │ │   ├── [PASTA] assets
  36 │ │   │   ├── [PASTA] css
  37 │ │   │   ├── [PASTA] images
  38 │ │   │   │   ├── carlos_gracie.png (208.7KB)
  39 │ │   │   │   ├── contact_gb.png (7.8KB)
  40 │ │   │   │   ├── gb1.jpg (735KB)
  41 │ │   │   │   ├── gb10.jpg (770.4KB)
  42 │ │   │   │   ├── gb3.png (409.3KB)
  43 │ │   │   │   ├── gb4.png (903.8KB)
  44 │ │   │   │   ├── gb6.jpg (622.3KB)
  45 │ │   │   │   ├── gb8.jpg (182.5KB)
  46 │ │   │   │   ├── gb9.jpg (861.7KB)
  47 │ │   │   │   ├── gb_logo.png (222.5KB)
  48 │ │   │   │   ├── professor_ricardo.png (187.6KB)
  49 │ │   │   │   ├── professor_victor.jpg (95.4KB)
  50 │ │   │   │   └── victor.jpg (892.6KB)
  51 │ │   │   └── [PASTA] js
  52 │ │   ├── agendamento.html (37.2KB)
  53 │ │   ├── index.html (94.5KB)
  54 │ │   └── package.json (0.5KB)
  55 │ ├── [PASTA] src
  56 │ │   ├── [PASTA] assets
  57 │ │   ├── index.html (62KB)
  58 │ │   └── package.json
  59 │ ├── .dockerignore (0.1KB)
  60 │ ├── docker-compose.yml (1.7KB)
  61 │ ├── Dockerfile (0.4KB)
  62 │ ├── Makefile
  63 │ ├── nginx.conf (1.1KB)
  64 │ ├── package.json (0.9KB)
  65 │ ├── projeto_analise_2025-07-14_15-03-15.txt (0.4KB)
  66 │ └── README.md
  67 │ 
  68 │ ARQUIVOS DE CONFIGURAÇÃO
  69 │ ============================
  70 │ Encontrado: package.json
  71 │ Encontrado: public\package.json
  72 │ Encontrado: src\package.json
  73 │ Encontrado: public\package-lock.json
  74 │ Encontrado: src\package-lock.json
  75 │ Encontrado: Dockerfile
  76 │ Encontrado: docker-compose.yml
  77 │ Encontrado: README.md
  78 │ Encontrado: Makefile
  79 │ Encontrado: Makefile
  80 │ 
  81 │ CONTEÚDO DOS ARQUIVOS
  82 │ ========================
  83 │ 
  84 │ ═══════════════════════════════════════════════════════════════
  85 │ ARQUIVO: .dockerignore
  86 │ Tamanho: 0.12KB
  87 │ Modificado: 06/19/2025 17:11:06
  88 │ ═══════════════════════════════════════════════════════════════
  89 │    1 │ node_modules/
  90 │    2 │ npm-debug.log
  91 │    3 │ .git
  92 │    4 │ .gitignore
  93 │    5 │ README.md
  94 │    6 │ .env
  95 │    7 │ .nyc_output
  96 │    8 │ coverage
  97 │    9 │ .docker
  98 │   10 │ Dockerfile*
  99 │   11 │ docker-compose*
 100 │ 
 101 │ ═══════════════════════════════════════════════════════════════
 102 │ ARQUIVO: docker-compose.yml
 103 │ Tamanho: 1.67KB
 104 │ Modificado: 06/19/2025 17:12:21
 105 │ ═══════════════════════════════════════════════════════════════
 106 │    1 │ services:
 107 │    2 │   gb-website:
 108 │    3 │     build: .
 109 │    4 │     container_name: gb-cidade-nova-website
 110 │    5 │     ports:
 111 │    6 │       - "8800:80"
 112 │    7 │     volumes:
 113 │    8 │       - ./src:/usr/share/nginx/html
 114 │    9 │       - ./nginx.conf:/etc/nginx/conf.d/default.conf
 115 │   10 │     restart: unless-stopped
 116 │   11 │     networks:
 117 │   12 │       - gb-network
 118 │   13 │ 
 119 │   14 │   gb-dev-server:
 120 │   15 │     image: node:18-alpine
 121 │   16 │     container_name: gb-cidade-nova-dev
 122 │   17 │     working_dir: /app
 123 │   18 │     volumes:
 124 │   19 │       - ./src:/app
 125 │   20 │       - ./package.json:/app/package.json
 126 │   21 │       - ./package-lock.json:/app/package-lock.json
 127 │   22 │     ports:
 128 │   23 │       - "8801:3001"
 129 │   24 │     command: >
 130 │   25 │       sh -c "
 131 │   26 │         if [ ! -d node_modules ]; then
 132 │   27 │           npm install
 133 │   28 │         fi &&
 134 │   29 │         npm run dev
 135 │   30 │       "
 136 │   31 │     networks:
 137 │   32 │       - gb-network
 138 │   33 │     profiles:
 139 │   34 │       - dev
 140 │   35 │ 
 141 │   36 │   gb-database:
 142 │   37 │     image: mysql:8.0
 143 │   38 │     container_name: gb-cidade-nova-db
 144 │   39 │     environment:
 145 │   40 │       MYSQL_ROOT_PASSWORD: graciebarra123
 146 │   41 │       MYSQL_DATABASE: gb_cidade_nova
 147 │   42 │       MYSQL_USER: gb_user
 148 │   43 │       MYSQL_PASSWORD: gb_password
 149 │   44 │     ports:
 150 │   45 │       - "8802:3306"
 151 │   46 │     volumes:
 152 │   47 │       - gb_mysql_data:/var/lib/mysql
 153 │   48 │       - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
 154 │   49 │     restart: unless-stopped
 155 │   50 │     networks:
 156 │   51 │       - gb-network
 157 │   52 │     profiles:
 158 │   53 │       - database
 159 │   54 │ 
 160 │   55 │   gb-phpmyadmin:
 161 │   56 │     image: phpmyadmin/phpmyadmin
 162 │   57 │     container_name: gb-cidade-nova-phpmyadmin
 163 │   58 │     environment:
 164 │   59 │       PMA_HOST: gb-database
 165 │   60 │       PMA_USER: gb_user
 166 │   61 │       PMA_PASSWORD: gb_password
 167 │   62 │       MYSQL_ROOT_PASSWORD: graciebarra123
 168 │   63 │     ports:
 169 │   64 │       - "8803:80"
 170 │   65 │     depends_on:
 171 │   66 │       - gb-database
 172 │   67 │     networks:
 173 │   68 │       - gb-network
 174 │   69 │     profiles:
 175 │   70 │       - database
 176 │   71 │ 
 177 │   72 │ networks:
 178 │   73 │   gb-network:
 179 │   74 │     driver: bridge
 180 │   75 │ 
 181 │   76 │ volumes:
 182 │   77 │   gb_mysql_data:
 183 │ 
 184 │ ═══════════════════════════════════════════════════════════════
 185 │ ARQUIVO: Dockerfile
 186 │ Tamanho: 0.41KB
 187 │ Modificado: 06/19/2025 16:09:12
 188 │ ═══════════════════════════════════════════════════════════════
 189 │    1 │ # Use nginx como servidor web
 190 │    2 │ FROM nginx:alpine
 191 │    3 │ 
 192 │    4 │ # Criar diretÃ³rio para o projeto
 193 │    5 │ WORKDIR /usr/share/nginx/html
 194 │    6 │ 
 195 │    7 │ # Remover arquivos padrÃ£o do nginx
 196 │    8 │ RUN rm -rf ./*
 197 │    9 │ 
 198 │   10 │ # Copiar arquivos do projeto
 199 │   11 │ COPY ./src/ .
 200 │   12 │ 
 201 │   13 │ # Copiar configuraÃ§Ã£o customizada do nginx
 202 │   14 │ COPY nginx.conf /etc/nginx/conf.d/default.conf
 203 │   15 │ 
 204 │   16 │ # Expor porta 80
 205 │   17 │ EXPOSE 80
 206 │   18 │ 
 207 │   19 │ # Comando para iniciar o nginx
 208 │   20 │ CMD ["nginx", "-g", "daemon off;"]
 209 │ 
 210 │ ═══════════════════════════════════════════════════════════════
 211 │ ARQUIVO: Makefile
 212 │ Tamanho: 0KB
 213 │ Modificado: 06/19/2025 16:14:02
 214 │ ═══════════════════════════════════════════════════════════════
 215 │ 
 216 │ ═══════════════════════════════════════════════════════════════
 217 │ ARQUIVO: nginx.conf
 218 │ Tamanho: 1.11KB
 219 │ Modificado: 07/09/2025 10:47:01
 220 │ ═══════════════════════════════════════════════════════════════
 221 │    1 │ server {
 222 │    2 │     listen 80;
 223 │    3 │     server_name localhost;
 224 │    4 │     root /usr/share/nginx/html;
 225 │    5 │     index index.html;
 226 │    6 │ 
 227 │    7 │     # ConfiguraÃ§Ãµes de cache
 228 │    8 │     location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
 229 │    9 │         expires 1y;
 230 │   10 │         add_header Cache-Control "public, immutable";
 231 │   11 │     }
 232 │   12 │ 
 233 │   13 │     # PÃ¡gina principal
 234 │   14 │     location / {
 235 │   15 │         try_files $uri $uri/ /index.html;
 236 │   16 │     }
 237 │   17 │ 
 238 │   18 │     # PÃ¡gina de agendamento
 239 │   19 │     location /agendamento {
 240 │   20 │         try_files /agendamento.html =404;
 241 │   21 │     }
 242 │   22 │ 
 243 │   23 │     # Headers de seguranÃ§a
 244 │   24 │     add_header X-Frame-Options "SAMEORIGIN" always;
 245 │   25 │     add_header X-Content-Type-Options "nosniff" always;
 246 │   26 │     add_header X-XSS-Protection "1; mode=block" always;
 247 │   27 │     add_header Referrer-Policy "no-referrer-when-downgrade" always;
 248 │   28 │ 
 249 │   29 │     # CompressÃ£o gzip
 250 │   30 │     gzip on;
 251 │   31 │     gzip_vary on;
 252 │   32 │     gzip_min_length 1024;
 253 │   33 │     gzip_types
 254 │   34 │         text/plain
 255 │   35 │         text/css
 256 │   36 │         text/xml
 257 │   37 │         text/javascript
 258 │   38 │         application/javascript
 259 │   39 │         application/xml+rss
 260 │   40 │         application/json;
 261 │   41 │ 
 262 │   42 │     # Log de erros
 263 │   43 │     error_log /var/log/nginx/error.log;
 264 │   44 │     access_log /var/log/nginx/access.log;
 265 │   45 │ }
 266 │ 
 267 │ ═══════════════════════════════════════════════════════════════
 268 │ ARQUIVO: package.json
 269 │ Tamanho: 0.88KB
 270 │ Modificado: 06/19/2025 16:09:56
 271 │ ═══════════════════════════════════════════════════════════════
 272 │    1 │ {
 273 │    2 │   "name": "gracie-barra-cidade-nova",
 274 │    3 │   "version": "1.0.0",
 275 │    4 │   "description": "Site oficial da Gracie Barra Cidade Nova - Manaus",
 276 │    5 │   "main": "index.html",
 277 │    6 │   "scripts": {
 278 │    7 │     "dev": "live-server --host=0.0.0.0 --port=3001 --entry-file=index.html",
 279 │    8 │     "build": "echo 'Build completed'",
 280 │    9 │     "start": "docker-compose up -d",
 281 │   10 │     "stop": "docker-compose down",
 282 │   11 │     "restart": "docker-compose restart",
 283 │   12 │     "logs": "docker-compose logs -f",
 284 │   13 │     "clean": "docker-compose down -v --remove-orphans"
 285 │   14 │   },
 286 │   15 │   "keywords": [
 287 │   16 │     "gracie-barra",
 288 │   17 │     "jiu-jitsu",
 289 │   18 │     "manaus",
 290 │   19 │     "cidade-nova",
 291 │   20 │     "martial-arts"
 292 │   21 │   ],
 293 │   22 │   "author": "Gracie Barra Cidade Nova",
 294 │   23 │   "license": "MIT",
 295 │   24 │   "devDependencies": {
 296 │   25 │     "live-server": "^1.2.2"
 297 │   26 │   },
 298 │   27 │   "repository": {
 299 │   28 │     "type": "git",
 300 │   29 │     "url": "https://github.com/graciebarra/cidade-nova-website"
 301 │   30 │   },
 302 │   31 │   "engines": {
 303 │   32 │     "node": ">=16.0.0"
 304 │   33 │   }
 305 │   34 │ }
 306 │ 
 307 │ ═══════════════════════════════════════════════════════════════
 308 │ ARQUIVO: projeto_analise_2025-07-14_15-03-15.txt
 309 │ Tamanho: 2.9KB
 310 │ Modificado: 07/14/2025 15:03:19
 311 │ ═══════════════════════════════════════════════════════════════
 312 │ 

═══════════════════════════════════════════════════════════════
ARQUIVO: README.md
Tamanho: 0KB
Modificado: 06/19/2025 16:14:10
═══════════════════════════════════════════════════════════════

═══════════════════════════════════════════════════════════════
ARQUIVO: database\init.sql
Tamanho: 0KB
Modificado: 06/19/2025 16:13:49
═══════════════════════════════════════════════════════════════

═══════════════════════════════════════════════════════════════
ARQUIVO: public\agendamento.html
Tamanho: 37.18KB
Modificado: 06/19/2025 16:00:03
═══════════════════════════════════════════════════════════════
   1 │ <!DOCTYPE html>
   2 │ <html lang="pt-BR">
   3 │ <head>
   4 │     <meta charset="UTF-8">
   5 │     <meta name="viewport" content="width=device-width, initial-scale=1.0">
   6 │     <title>Agendar Aula Experimental - Gracie Barra Cidade Nova</title>
   7 │     <style>
   8 │         * {
   9 │             margin: 0;
  10 │             padding: 0;
  11 │             box-sizing: border-box;
  12 │         }
  13 │ 
  14 │         body {
  15 │             font-family: 'Helvetica Neue', Arial, sans-serif;
  16 │             line-height: 1.6;
  17 │             color: #333;
  18 │             background: #f8f9fa;
  19 │         }
  20 │ 
  21 │         /* Header */
  22 │         .header {
  23 │             background: #dc143c;
  24 │             color: white;
  25 │             padding: 1rem 0;
  26 │             box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  27 │         }
  28 │ 
  29 │         .nav-container {
  30 │             max-width: 1200px;
  31 │             margin: 0 auto;
  32 │             display: flex;
  33 │             justify-content: space-between;
  34 │             align-items: center;
  35 │             padding: 0 2rem;
  36 │         }
  37 │ 
  38 │         .logo {
  39 │             display: flex;
  40 │             align-items: center;
  41 │             font-size: 1.5rem;
  42 │             font-weight: bold;
  43 │         }
  44 │ 
  45 │         .logo-img {
  46 │             width: 50px;
  47 │             height: 50px;
  48 │             margin-right: 1rem;
  49 │             background: url('gb_logo.jpg') center/cover;
  50 │             border-radius: 4px;
  51 │         }
  52 │ 
  53 │         .back-link {
  54 │             color: white;
  55 │             text-decoration: none;
  56 │             transition: opacity 0.3s;
  57 │             font-weight: 500;
  58 │         }
  59 │ 
  60 │         .back-link:hover {
  61 │             opacity: 0.8;
  62 │         }
  63 │ 
  64 │         /* Main Content */
  65 │         .main-content {
  66 │             max-width: 800px;
  67 │             margin: 2rem auto;
  68 │             padding: 0 2rem;
  69 │         }
  70 │ 
  71 │         .page-header {
  72 │             text-align: center;
  73 │             margin-bottom: 2rem;
  74 │         }
  75 │ 
  76 │         .page-title {
  77 │             font-size: 2.5rem;
  78 │             color: #333;
  79 │             margin-bottom: 1rem;
  80 │             font-weight: 300;
  81 │         }
  82 │ 
  83 │         .page-subtitle {
  84 │             font-size: 1.1rem;
  85 │             color: #666;
  86 │             max-width: 600px;
  87 │             margin: 0 auto;
  88 │         }
  89 │ 
  90 │         /* Form Container */
  91 │         .form-container {
  92 │             background: white;
  93 │             border-radius: 8px;
  94 │             padding: 3rem;
  95 │             box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  96 │             margin-bottom: 2rem;
  97 │         }
  98 │ 
  99 │         .form-step {
 100 │             display: none;
 101 │         }
 102 │ 
 103 │         .form-step.active {
 104 │             display: block;
 105 │         }
 106 │ 
 107 │         .step-header {
 108 │             text-align: center;
 109 │             margin-bottom: 2rem;
 110 │         }
 111 │ 
 112 │         .step-title {
 113 │             font-size: 1.5rem;
 114 │             color: #dc143c;
 115 │             margin-bottom: 0.5rem;
 116 │             font-weight: 500;
 117 │         }
 118 │ 
 119 │         .step-subtitle {
 120 │             color: #666;
 121 │         }
 122 │ 
 123 │         /* Progress Bar */
 124 │         .progress-bar {
 125 │             display: flex;
 126 │             justify-content: center;
 127 │             margin-bottom: 3rem;
 128 │         }
 129 │ 
 130 │         .progress-step {
 131 │             display: flex;
 132 │             align-items: center;
 133 │             margin: 0 1rem;
 134 │         }
 135 │ 
 136 │         .progress-circle {
 137 │             width: 40px;
 138 │             height: 40px;
 139 │             border-radius: 50%;
 140 │             background: #e0e0e0;
 141 │             display: flex;
 142 │             align-items: center;
 143 │             justify-content: center;
 144 │             color: white;
 145 │             font-weight: bold;
 146 │             margin-right: 0.5rem;
 147 │         }
 148 │ 
 149 │         .progress-circle.active {
 150 │             background: #dc143c;
 151 │         }
 152 │ 
 153 │         .progress-circle.completed {
 154 │             background: #2c5aa0;
 155 │         }
 156 │ 
 157 │         .progress-label {
 158 │             font-size: 0.9rem;
 159 │             color: #666;
 160 │         }
 161 │ 
 162 │         /* Form Fields */
 163 │         .form-group {
 164 │             margin-bottom: 1.5rem;
 165 │         }
 166 │ 
 167 │         .form-row {
 168 │             display: grid;
 169 │             grid-template-columns: 1fr 1fr;
 170 │             gap: 1rem;
 171 │         }
 172 │ 
 173 │         label {
 174 │             display: block;
 175 │             margin-bottom: 0.5rem;
 176 │             font-weight: 500;
 177 │             color: #333;
 178 │         }
 179 │ 
 180 │         .required {
 181 │             color: #dc143c;
 182 │         }
 183 │ 
 184 │         input[type="text"],
 185 │         input[type="email"],
 186 │         input[type="tel"],
 187 │         input[type="date"],
 188 │         select,
 189 │         textarea {
 190 │             width: 100%;
 191 │             padding: 12px;
 192 │             border: 2px solid #e0e0e0;
 193 │             border-radius: 4px;
 194 │             font-size: 1rem;
 195 │             transition: border-color 0.3s;
 196 │         }
 197 │ 
 198 │         input:focus,
 199 │         select:focus,
 200 │         textarea:focus {
 201 │             outline: none;
 202 │             border-color: #dc143c;
 203 │         }
 204 │ 
 205 │         textarea {
 206 │             resize: vertical;
 207 │             min-height: 100px;
 208 │         }
 209 │ 
 210 │         /* Radio and Checkbox Groups */
 211 │         .radio-group,
 212 │         .checkbox-group {
 213 │             display: grid;
 214 │             grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
 215 │             gap: 1rem;
 216 │             margin-top: 0.5rem;
 217 │         }
 218 │ 
 219 │         .radio-item,
 220 │         .checkbox-item {
 221 │             display: flex;
 222 │             align-items: center;
 223 │             padding: 1rem;
 224 │             border: 2px solid #e0e0e0;
 225 │             border-radius: 4px;
 226 │             cursor: pointer;
 227 │             transition: all 0.3s;
 228 │         }
 229 │ 
 230 │         .radio-item:hover,
 231 │         .checkbox-item:hover {
 232 │             border-color: #dc143c;
 233 │             background: #fff5f5;
 234 │         }
 235 │ 
 236 │         .radio-item.selected,
 237 │         .checkbox-item.selected {
 238 │             border-color: #dc143c;
 239 │             background: #fff5f5;
 240 │         }
 241 │ 
 242 │         .radio-item input,
 243 │         .checkbox-item input {
 244 │             margin-right: 0.5rem;
 245 │         }
 246 │ 
 247 │         /* Schedule Grid */
 248 │         .schedule-grid {
 249 │             display: grid;
 250 │             grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
 251 │             gap: 1rem;
 252 │             margin-top: 1rem;
 253 │         }
 254 │ 
 255 │         .time-slot {
 256 │             padding: 1rem;
 257 │             border: 2px solid #e0e0e0;
 258 │             border-radius: 4px;
 259 │             text-align: center;
 260 │             cursor: pointer;
 261 │             transition: all 0.3s;
 262 │         }
 263 │ 
 264 │         .time-slot:hover {
 265 │             border-color: #dc143c;
 266 │             background: #fff5f5;
 267 │         }
 268 │ 
 269 │         .time-slot.selected {
 270 │             border-color: #dc143c;
 271 │             background: #dc143c;
 272 │             color: white;
 273 │         }
 274 │ 
 275 │         .time-slot.unavailable {
 276 │             background: #f5f5f5;
 277 │             color: #999;
 278 │             cursor: not-allowed;
 279 │         }
 280 │ 
 281 │         /* Buttons */
 282 │         .button-group {
 283 │             display: flex;
 284 │             justify-content: space-between;
 285 │             margin-top: 2rem;
 286 │         }
 287 │ 
 288 │         .btn {
 289 │             padding: 12px 30px;
 290 │             border: none;
 291 │             border-radius: 4px;
 292 │             font-size: 1rem;
 293 │             font-weight: 500;
 294 │             cursor: pointer;
 295 │             transition: all 0.3s;
 296 │             text-transform: uppercase;
 297 │             letter-spacing: 1px;
 298 │         }
 299 │ 
 300 │         .btn-primary {
 301 │             background: #dc143c;
 302 │             color: white;
 303 │         }
 304 │ 
 305 │         .btn-primary:hover {
 306 │             background: #b91c3c;
 307 │         }
 308 │ 
 309 │         .btn-secondary {
 310 │             background: #6c757d;
 311 │             color: white;
 312 │         }
 313 │ 
 314 │         .btn-secondary:hover {
 315 │             background: #5a6268;
 316 │         }
 317 │ 
 318 │         .btn:disabled {
 319 │             background: #e0e0e0;
 320 │             color: #999;
 321 │             cursor: not-allowed;
 322 │         }
 323 │ 
 324 │         /* Summary Section */
 325 │         .booking-summary {
 326 │             background: #f8f9fa;
 327 │             padding: 2rem;
 328 │             border-radius: 8px;
 329 │             margin-bottom: 2rem;
 330 │         }
 331 │ 
 332 │         .summary-item {
 333 │             display: flex;
 334 │             justify-content: space-between;
 335 │             margin-bottom: 1rem;
 336 │             padding-bottom: 1rem;
 337 │             border-bottom: 1px solid #e0e0e0;
 338 │         }
 339 │ 
 340 │         .summary-item:last-child {
 341 │             border-bottom: none;
 342 │             margin-bottom: 0;
 343 │         }
 344 │ 
 345 │         .summary-label {
 346 │             font-weight: 500;
 347 │             color: #333;
 348 │         }
 349 │ 
 350 │         .summary-value {
 351 │             color: #666;
 352 │         }
 353 │ 
 354 │         /* Success Message */
 355 │         .success-message {
 356 │             text-align: center;
 357 │             padding: 3rem;
 358 │         }
 359 │ 
 360 │         .success-icon {
 361 │             font-size: 4rem;
 362 │             color: #28a745;
 363 │             margin-bottom: 1rem;
 364 │         }
 365 │ 
 366 │         .success-title {
 367 │             font-size: 2rem;
 368 │             color: #333;
 369 │             margin-bottom: 1rem;
 370 │             font-weight: 500;
 371 │         }
 372 │ 
 373 │         .success-text {
 374 │             color: #666;
 375 │             margin-bottom: 2rem;
 376 │         }
 377 │ 
 378 │         /* Info Boxes */
 379 │         .info-box {
 380 │             background: #e7f3ff;
 381 │             border: 1px solid #bee5eb;
 382 │             border-radius: 4px;
 383 │             padding: 1rem;
 384 │             margin-bottom: 1.5rem;
 385 │         }
 386 │ 
 387 │         .info-box h4 {
 388 │             color: #2c5aa0;
 389 │             margin-bottom: 0.5rem;
 390 │         }
 391 │ 
 392 │         .info-box ul {
 393 │             margin-left: 1rem;
 394 │         }
 395 │ 
 396 │         .info-box li {
 397 │             margin-bottom: 0.25rem;
 398 │         }
 399 │ 
 400 │         /* Mobile Responsiveness */
 401 │         @media (max-width: 768px) {
 402 │             .main-content {
 403 │                 padding: 0 1rem;
 404 │             }
 405 │ 
 406 │             .form-container {
 407 │                 padding: 2rem;
 408 │             }
 409 │ 
 410 │             .page-title {
 411 │                 font-size: 2rem;
 412 │             }
 413 │ 
 414 │             .form-row {
 415 │                 grid-template-columns: 1fr;
 416 │             }
 417 │ 
 418 │             .progress-bar {
 419 │                 flex-wrap: wrap;
 420 │             }
 421 │ 
 422 │             .progress-step {
 423 │                 margin: 0.5rem;
 424 │             }
 425 │ 
 426 │             .radio-group,
 427 │             .checkbox-group {
 428 │                 grid-template-columns: 1fr;
 429 │             }
 430 │ 
 431 │             .schedule-grid {
 432 │                 grid-template-columns: repeat(2, 1fr);
 433 │             }
 434 │ 
 435 │             .button-group {
 436 │                 flex-direction: column;
 437 │                 gap: 1rem;
 438 │             }
 439 │         }
 440 │     </style>
 441 │ </head>
 442 │ <body>
 443 │     <header class="header">
 444 │         <div class="nav-container">
 445 │             <div class="logo">
 446 │                 <div class="logo-img"></div>
 447 │                 <div>
 448 │                     <div>Gracie Barra</div>
 449 │                     <div style="font-size: 0.8rem; font-weight: normal;">Cidade Nova</div>
 450 │                 </div>
 451 │             </div>
 452 │             <a href="#" class="back-link">â† Voltar ao Site</a>
 453 │         </div>
 454 │     </header>
 455 │ 
 456 │     <main class="main-content">
 457 │         <div class="page-header">
 458 │             <h1 class="page-title">Agendar Aula Experimental</h1>
 459 │             <p class="page-subtitle">DÃª o primeiro passo em sua jornada no Jiu-Jitsu. Agende sua aula experimental gratuita e descubra todos os benefÃ­cios que esta arte marcial pode proporcionar.</p>
 460 │         </div>
 461 │ 
 462 │         <div class="progress-bar">
 463 │             <div class="progress-step">
 464 │                 <div class="progress-circle active" id="step1-circle">1</div>
 465 │                 <span class="progress-label">Dados Pessoais</span>
 466 │             </div>
 467 │             <div class="progress-step">
 468 │                 <div class="progress-circle" id="step2-circle">2</div>
 469 │                 <span class="progress-label">Programa</span>
 470 │             </div>
 471 │             <div class="progress-step">
 472 │                 <div class="progress-circle" id="step3-circle">3</div>
 473 │                 <span class="progress-label">Agendamento</span>
 474 │             </div>
 475 │             <div class="progress-step">
 476 │                 <div class="progress-circle" id="step4-circle">4</div>
 477 │                 <span class="progress-label">ConfirmaÃ§Ã£o</span>
 478 │             </div>
 479 │         </div>
 480 │ 
 481 │         <form id="bookingForm" class="form-container">
 482 │             <!-- Etapa 1: Dados Pessoais -->
 483 │             <div class="form-step active" id="step1">
 484 │                 <div class="step-header">
 485 │                     <h2 class="step-title">Dados Pessoais</h2>
 486 │                     <p class="step-subtitle">Precisamos de algumas informaÃ§Ãµes bÃ¡sicas para seu agendamento</p>
 487 │                 </div>
 488 │ 
 489 │                 <div class="form-row">
 490 │                     <div class="form-group">
 491 │                         <label for="firstName">Nome <span class="required">*</span></label>
 492 │                         <input type="text" id="firstName" name="firstName" required>
 493 │                     </div>
 494 │                     <div class="form-group">
 495 │                         <label for="lastName">Sobrenome <span class="required">*</span></label>
 496 │                         <input type="text" id="lastName" name="lastName" required>
 497 │                     </div>
 498 │                 </div>
 499 │ 
 500 │                 <div class="form-row">
 501 │                     <div class="form-group">
 502 │                         <label for="email">Email <span class="required">*</span></label>
 503 │                         <input type="email" id="email" name="email" required>
 504 │                     </div>
 505 │                     <div class="form-group">
 506 │                         <label for="phone">Telefone <span class="required">*</span></label>
 507 │                         <input type="tel" id="phone" name="phone" required>
 508 │                     </div>
 509 │                 </div>
 510 │ 
 511 │                 <div class="form-row">
 512 │                     <div class="form-group">
 513 │                         <label for="birthDate">Data de Nascimento</label>
 514 │                         <input type="date" id="birthDate" name="birthDate">
 515 │                     </div>
 516 │                     <div class="form-group">
 517 │                         <label for="gender">GÃªnero</label>
 518 │                         <select id="gender" name="gender">
 519 │                             <option value="">Selecione</option>
 520 │                             <option value="masculino">Masculino</option>
 521 │                             <option value="feminino">Feminino</option>
 522 │                             <option value="outro">Outro</option>
 523 │                         </select>
 524 │                     </div>
 525 │                 </div>
 526 │ 
 527 │                 <div class="form-group">
 528 │                     <label for="experience">ExperiÃªncia anterior com artes marciais?</label>
 529 │                     <div class="radio-group">
 530 │                         <div class="radio-item" onclick="selectRadio('experience', 'nenhuma')">
 531 │                             <input type="radio" id="exp-none" name="experience" value="nenhuma">
 532 │                             <label for="exp-none">Nenhuma experiÃªncia</label>
 533 │                         </div>
 534 │                         <div class="radio-item" onclick="selectRadio('experience', 'pouca')">
 535 │                             <input type="radio" id="exp-little" name="experience" value="pouca">
 536 │                             <label for="exp-little">Pouca experiÃªncia</label>
 537 │                         </div>
 538 │                         <div class="radio-item" onclick="selectRadio('experience', 'moderada')">
 539 │                             <input type="radio" id="exp-moderate" name="experience" value="moderada">
 540 │                             <label for="exp-moderate">ExperiÃªncia moderada</label>
 541 │                         </div>
 542 │                     </div>
 543 │                 </div>
 544 │ 
 545 │                 <div class="button-group">
 546 │                     <div></div>
 547 │                     <button type="button" class="btn btn-primary" onclick="nextStep(1)">PrÃ³ximo</button>
 548 │                 </div>
 549 │             </div>
 550 │ 
 551 │             <!-- Etapa 2: Escolha do Programa -->
 552 │             <div class="form-step" id="step2">
 553 │                 <div class="step-header">
 554 │                     <h2 class="step-title">Escolha seu Programa</h2>
 555 │                     <p class="step-subtitle">Selecione o programa mais adequado para vocÃª</p>
 556 │                 </div>
 557 │ 
 558 │                 <div class="form-group">
 559 │                     <label>Programa de Interesse <span class="required">*</span></label>
 560 │                     <div class="radio-group">
 561 │                         <div class="radio-item" onclick="selectRadio('program', 'gb1')">
 562 │                             <input type="radio" id="program-gb1" name="program" value="gb1">
 563 │                             <div>
 564 │                                 <strong>GB1 - Fundamentals</strong><br>
 565 │                                 <small>Iniciantes - Fundamentos bÃ¡sicos</small>
 566 │                             </div>
 567 │                         </div>
 568 │                         <div class="radio-item" onclick="selectRadio('program', 'gb2')">
 569 │                             <input type="radio" id="program-gb2" name="program" value="gb2">
 570 │                             <div>
 571 │                                 <strong>GB2 - Advanced</strong><br>
 572 │                                 <small>IntermediÃ¡rio - TÃ©cnicas avanÃ§adas</small>
 573 │                             </div>
 574 │                         </div>
 575 │                         <div class="radio-item" onclick="selectRadio('program', 'kids')">
 576 │                             <input type="radio" id="program-kids" name="program" value="kids">
 577 │                             <div>
 578 │                                 <strong>Little/Junior Champions</strong><br>
 579 │                                 <small>CrianÃ§as e adolescentes</small>
 580 │                             </div>
 581 │                         </div>
 582 │                         <div class="radio-item" onclick="selectRadio('program', 'women')">
 583 │                             <input type="radio" id="program-women" name="program" value="women">
 584 │                             <div>
 585 │                                 <strong>Women's Program</strong><br>
 586 │                                 <small>Programa feminino</small>
 587 │                             </div>
 588 │                         </div>
 589 │                     </div>
 590 │                 </div>
 591 │ 
 592 │                 <div class="info-box">
 593 │                     <h4>O que esperar na sua aula experimental:</h4>
 594 │                     <ul>
 595 │                         <li>ApresentaÃ§Ã£o da metodologia Gracie Barra</li>
 596 │                         <li>Aula prÃ¡tica adaptada ao seu nÃ­vel</li>
 597 │                         <li>Conversa com instrutores qualificados</li>
 598 │                         <li>Tour pelas instalaÃ§Ãµes</li>
 599 │                         <li>InformaÃ§Ãµes sobre planos e modalidades</li>
 600 │                     </ul>
 601 │                 </div>
 602 │ 
 603 │                 <div class="form-group">
 604 │                     <label for="goals">Objetivos com o Jiu-Jitsu (opcional)</label>
 605 │                     <div class="checkbox-group">
 606 │                         <div class="checkbox-item" onclick="toggleCheckbox('goal-fitness')">
 607 │                             <input type="checkbox" id="goal-fitness" name="goals" value="fitness">
 608 │                             <label for="goal-fitness">Condicionamento fÃ­sico</label>
 609 │                         </div>
 610 │                         <div class="checkbox-item" onclick="toggleCheckbox('goal-defense')">
 611 │                             <input type="checkbox" id="goal-defense" name="goals" value="defense">
 612 │                             <label for="goal-defense">Defesa pessoal</label>
 613 │                         </div>
 614 │                         <div class="checkbox-item" onclick="toggleCheckbox('goal-competition')">
 615 │                             <input type="checkbox" id="goal-competition" name="goals" value="competition">
 616 │                             <label for="goal-competition">CompetiÃ§Ã£o</label>
 617 │                         </div>
 618 │                         <div class="checkbox-item" onclick="toggleCheckbox('goal-discipline')">
 619 │                             <input type="checkbox" id="goal-discipline" name="goals" value="discipline">
 620 │                             <label for="goal-discipline">Disciplina mental</label>
 621 │                         </div>
 622 │                     </div>
 623 │                 </div>
 624 │ 
 625 │                 <div class="button-group">
 626 │                     <button type="button" class="btn btn-secondary" onclick="prevStep(2)">Anterior</button>
 627 │                     <button type="button" class="btn btn-primary" onclick="nextStep(2)">PrÃ³ximo</button>
 628 │                 </div>
 629 │             </div>
 630 │ 
 631 │             <!-- Etapa 3: Agendamento -->
 632 │             <div class="form-step" id="step3">
 633 │                 <div class="step-header">
 634 │                     <h2 class="step-title">Escolha Data e HorÃ¡rio</h2>
 635 │                     <p class="step-subtitle">Selecione o melhor horÃ¡rio para sua aula experimental</p>
 636 │                 </div>
 637 │ 
 638 │                 <div class="form-group">
 639 │                     <label for="preferredDate">Data Preferida <span class="required">*</span></label>
 640 │                     <input type="date" id="preferredDate" name="preferredDate" required onchange="loadAvailableSlots()">
 641 │                 </div>
 642 │ 
 643 │                 <div class="form-group">
 644 │                     <label>HorÃ¡rios DisponÃ­veis <span class="required">*</span></label>
 645 │                     <div class="schedule-grid" id="timeSlots">
 646 │                         <!-- HorÃ¡rios serÃ£o carregados dinamicamente -->
 647 │                         <div class="time-slot" onclick="selectTimeSlot(this)" data-time="06:00">06:00</div>
 648 │                         <div class="time-slot" onclick="selectTimeSlot(this)" data-time="07:00">07:00</div>
 649 │                         <div class="time-slot" onclick="selectTimeSlot(this)" data-time="08:00">08:00</div>
 650 │                         <div class="time-slot" onclick="selectTimeSlot(this)" data-time="18:00">18:00</div>
 651 │                         <div class="time-slot" onclick="selectTimeSlot(this)" data-time="19:00">19:00</div>
 652 │                         <div class="time-slot unavailable" data-time="20:00">20:00 (Ocupado)</div>
 653 │                     </div>
 654 │                 </div>
 655 │ 
 656 │                 <div class="form-group">
 657 │                     <label for="comments">ComentÃ¡rios ou observaÃ§Ãµes (opcional)</label>
 658 │                     <textarea id="comments" name="comments" placeholder="Alguma informaÃ§Ã£o adicional que gostaria de compartilhar..."></textarea>
 659 │                 </div>
 660 │ 
 661 │                 <div class="button-group">
 662 │                     <button type="button" class="btn btn-secondary" onclick="prevStep(3)">Anterior</button>
 663 │                     <button type="button" class="btn btn-primary" onclick="nextStep(3)">Revisar Agendamento</button>
 664 │                 </div>
 665 │             </div>
 666 │ 
 667 │             <!-- Etapa 4: ConfirmaÃ§Ã£o -->
 668 │             <div class="form-step" id="step4">
 669 │                 <div class="step-header">
 670 │                     <h2 class="step-title">Confirmar Agendamento</h2>
 671 │                     <p class="step-subtitle">Revise as informaÃ§Ãµes antes de confirmar</p>
 672 │                 </div>
 673 │ 
 674 │                 <div class="booking-summary" id="bookingSummary">
 675 │                     <!-- Resumo serÃ¡ preenchido dinamicamente -->
 676 │                 </div>
 677 │ 
 678 │                 <div class="info-box">
 679 │                     <h4>InformaÃ§Ãµes Importantes:</h4>
 680 │                     <ul>
 681 │                         <li>A aula experimental Ã© totalmente gratuita</li>
 682 │                         <li>Traga roupas confortÃ¡veis para exercÃ­cios</li>
 683 │                         <li>Chegue 15 minutos antes do horÃ¡rio agendado</li>
 684 │                         <li>Em caso de cancelamento, avise com pelo menos 2 horas de antecedÃªncia</li>
 685 │                     </ul>
 686 │                 </div>
 687 │ 
 688 │                 <div class="button-group">
 689 │                     <button type="button" class="btn btn-secondary" onclick="prevStep(4)">Anterior</button>
 690 │                     <button type="button" class="btn btn-primary" onclick="submitForm()">Confirmar Agendamento</button>
 691 │                 </div>
 692 │             </div>
 693 │ 
 694 │             <!-- Etapa 5: Sucesso -->
 695 │             <div class="form-step" id="step5">
 696 │                 <div class="success-message">
 697 │                     <div class="success-icon">âœ…</div>
 698 │                     <h2 class="success-title">Agendamento Confirmado!</h2>
 699 │                     <p class="success-text">
 700 │                         Seu agendamento foi realizado com sucesso. VocÃª receberÃ¡ um email de confirmaÃ§Ã£o em breve com todos os detalhes.<br><br>
 701 │                         Estamos ansiosos para recebÃª-lo na Gracie Barra Cidade Nova!
 702 │                     </p>
 703 │                     <button type="button" class="btn btn-primary" onclick="window.history.back()">Voltar ao Site</button>
 704 │                 </div>
 705 │             </div>
 706 │         </form>
 707 │     </main>
 708 │ 
 709 │     <script>
 710 │         let currentStep = 1;
 711 │         const totalSteps = 4;
 712 │ 
 713 │         function nextStep(step) {
 714 │             if (validateStep(step)) {
 715 │                 document.getElementById(`step${step}`).classList.remove('active');
 716 │                 document.getElementById(`step${step + 1}`).classList.add('active');
 717 │                 
 718 │                 // Atualizar cÃ­rculos de progresso
 719 │                 document.getElementById(`step${step}-circle`).classList.remove('active');
 720 │                 document.getElementById(`step${step}-circle`).classList.add('completed');
 721 │                 document.getElementById(`step${step + 1}-circle`).classList.add('active');
 722 │                 
 723 │                 currentStep = step + 1;
 724 │ 
 725 │                 // Se chegou na etapa de confirmaÃ§Ã£o, carregar resumo
 726 │                 if (currentStep === 4) {
 727 │                     loadBookingSummary();
 728 │                 }
 729 │             }
 730 │         }
 731 │ 
 732 │         function prevStep(step) {
 733 │             document.getElementById(`step${step}`).classList.remove('active');
 734 │             document.getElementById(`step${step - 1}`).classList.add('active');
 735 │             
 736 │             // Atualizar cÃ­rculos de progresso
 737 │             document.getElementById(`step${step}-circle`).classList.remove('active');
 738 │             document.getElementById(`step${step - 1}-circle`).classList.remove('completed');
 739 │             document.getElementById(`step${step - 1}-circle`).classList.add('active');
 740 │             
 741 │             currentStep = step - 1;
 742 │         }
 743 │ 
 744 │         function validateStep(step) {
 745 │             const form = document.getElementById('bookingForm');
 746 │             let isValid = true;
 747 │ 
 748 │             switch(step) {
 749 │                 case 1:
 750 │                     const requiredFields = ['firstName', 'lastName', 'email', 'phone'];
 751 │                     requiredFields.forEach(field => {
 752 │                         const input = form.querySelector(`[name="${field}"]`);
 753 │                         if (!input.value.trim()) {
 754 │                             input.style.borderColor = '#dc143c';
 755 │                             isValid = false;
 756 │                         } else {
 757 │                             input.style.borderColor = '#e0e0e0';
 758 │                         }
 759 │                     });
 760 │                     break;
 761 │                     
 762 │                 case 2:
 763 │                     const program = form.querySelector('input[name="program"]:checked');
 764 │                     if (!program) {
 765 │                         alert('Por favor, selecione um programa.');
 766 │                         isValid = false;
 767 │                     }
 768 │                     break;
 769 │                     
 770 │                 case 3:
 771 │                     const date = form.querySelector('[name="preferredDate"]').value;
 772 │                     const timeSlot = document.querySelector('.time-slot.selected');
 773 │                     if (!date) {
 774 │                         alert('Por favor, selecione uma data.');
 775 │                         isValid = false;
 776 │                     } else if (!timeSlot) {
 777 │                         alert('Por favor, selecione um horÃ¡rio.');
 778 │                         isValid = false;
 779 │                     }
 780 │                     break;
 781 │             }
 782 │ 
 783 │             return isValid;
 784 │         }
 785 │ 
 786 │         function selectRadio(name, value) {
 787 │             // Remover seleÃ§Ã£o anterior
 788 │             document.querySelectorAll(`input[name="${name}"]`).forEach(input => {
 789 │                 input.closest('.radio-item').classList.remove('selected');
 790 │             });
 791 │             
 792 │             // Selecionar novo item
 793 │             const radio = document.querySelector(`input[name="${name}"][value="${value}"]`);
 794 │             radio.checked = true;
 795 │             radio.closest('.radio-item').classList.add('selected');
 796 │         }
 797 │ 
 798 │         function toggleCheckbox(id) {
 799 │             const checkbox = document.getElementById(id);
 800 │             const item = checkbox.closest('.checkbox-item');
 801 │             
 802 │             checkbox.checked = !checkbox.checked;
 803 │             
 804 │             if (checkbox.checked) {
 805 │                 item.classList.add('selected');
 806 │             } else {
 807 │                 item.classList.remove('selected');
 808 │             }
 809 │         }
 810 │ 
 811 │         function selectTimeSlot(slot) {
 812 │             if (slot.classList.contains('unavailable')) return;
 813 │             
 814 │             // Remover seleÃ§Ã£o anterior
 815 │             document.querySelectorAll('.time-slot').forEach(s => s.classList.remove('selected'));
 816 │             
 817 │             // Selecionar novo horÃ¡rio
 818 │             slot.classList.add('selected');
 819 │         }
 820 │ 
 821 │         function loadAvailableSlots() {
 822 │             // Simular carregamento de horÃ¡rios disponÃ­veis
 823 │             const slotsContainer = document.getElementById('timeSlots');
 824 │             slotsContainer.innerHTML = `
 825 │                 <div class="time-slot" onclick="selectTimeSlot(this)" data-time="06:00">06:00</div>
 826 │                 <div class="time-slot" onclick="selectTimeSlot(this)" data-time="07:00">07:00</div>
 827 │                 <div class="time-slot" onclick="selectTimeSlot(this)" data-time="08:00">08:00</div>
 828 │                 <div class="time-slot" onclick="selectTimeSlot(this)" data-time="18:00">18:00</div>
 829 │                 <div class="time-slot" onclick="selectTimeSlot(this)" data-time="19:00">19:00</div>
 830 │                 <div class="time-slot unavailable" data-time="20:00">20:00 (Ocupado)</div>
 831 │             `;
 832 │         }
 833 │ 
 834 │         function loadBookingSummary() {
 835 │             const form = document.getElementById('bookingForm');
 836 │             const formData = new FormData(form);
 837 │             
 838 │             const firstName = formData.get('firstName');
 839 │             const lastName = formData.get('lastName');
 840 │             const email = formData.get('email');
 841 │             const phone = formData.get('phone');
 842 │             const program = formData.get('program');
 843 │             const date = formData.get('preferredDate');
 844 │             const timeSlot = document.querySelector('.time-slot.selected')?.getAttribute('data-time');
 845 │             
 846 │             const programNames = {
 847 │                 'gb1': 'GB1 - Fundamentals',
 848 │                 'gb2': 'GB2 - Advanced',
 849 │                 'kids': 'Little/Junior Champions',
 850 │                 'women': "Women's Program"
 851 │             };
 852 │ 
 853 │             const summaryHTML = `
 854 │                 <div class="summary-item">
 855 │                     <span class="summary-label">Nome:</span>
 856 │                     <span class="summary-value">${firstName} ${lastName}</span>
 857 │                 </div>
 858 │                 <div class="summary-item">
 859 │                     <span class="summary-label">Email:</span>
 860 │                     <span class="summary-value">${email}</span>
 861 │                 </div>
 862 │                 <div class="summary-item">
 863 │                     <span class="summary-label">Telefone:</span>
 864 │                     <span class="summary-value">${phone}</span>
 865 │                 </div>
 866 │                 <div class="summary-item">
 867 │                     <span class="summary-label">Programa:</span>
 868 │                     <span class="summary-value">${programNames[program] || program}</span>
 869 │                 </div>
 870 │                 <div class="summary-item">
 871 │                     <span class="summary-label">Data:</span>
 872 │                     <span class="summary-value">${formatDate(date)}</span>
 873 │                 </div>
 874 │                 <div class="summary-item">
 875 │                     <span class="summary-label">HorÃ¡rio:</span>
 876 │                     <span class="summary-value">${timeSlot}</span>
 877 │                 </div>
 878 │             `;
 879 │             
 880 │             document.getElementById('bookingSummary').innerHTML = summaryHTML;
 881 │         }
 882 │ 
 883 │         function formatDate(dateString) {
 884 │             if (!dateString) return '';
 885 │             const date = new Date(dateString);
 886 │             return date.toLocaleDateString('pt-BR', {
 887 │                 weekday: 'long',
 888 │                 year: 'numeric',
 889 │                 month: 'long',
 890 │                 day: 'numeric'
 891 │             });
 892 │         }
 893 │ 
 894 │         function submitForm() {
 895 │             // Simular envio do formulÃ¡rio
 896 │             document.getElementById('step4').classList.remove('active');
 897 │             document.getElementById('step5').classList.add('active');
 898 │             
 899 │             // Atualizar progresso
 900 │             document.getElementById('step4-circle').classList.remove('active');
 901 │             document.getElementById('step4-circle').classList.add('completed');
 902 │             
 903 │             // Aqui vocÃª enviaria os dados para o servidor
 904 │             console.log('FormulÃ¡rio enviado com sucesso!');
 905 │             
 906 │             // Simular envio de email de confirmaÃ§Ã£o
 907 │             setTimeout(() => {
 908 │                 console.log('Email de confirmaÃ§Ã£o enviado!');
 909 │             }, 1000);
 910 │         }
 911 │ 
 912 │         // Definir data mÃ­nima como hoje
 913 │         document.addEventListener('DOMContentLoaded', function() {
 914 │             const today = new Date().toISOString().split('T')[0];
 915 │             document.getElementById('preferredDate').setAttribute('min', today);
 916 │             
 917 │             // Definir data mÃ¡xima como 30 dias a partir de hoje
 918 │             const maxDate = new Date();
 919 │             maxDate.setDate(maxDate.getDate() + 30);
 920 │             document.getElementById('preferredDate').setAttribute('max', maxDate.toISOString().split('T')[0]);
 921 │         });
 922 │ 
 923 │         // ValidaÃ§Ã£o de email em tempo real
 924 │         document.getElementById('email').addEventListener('blur', function() {
 925 │             const email = this.value;
 926 │             const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
 927 │             
 928 │             if (email && !emailRegex.test(email)) {
 929 │                 this.style.borderColor = '#dc143c';
 930 │                 if (!document.querySelector('.email-error')) {
 931 │                     const errorMsg = document.createElement('small');
 932 │                     errorMsg.className = 'email-error';
 933 │                     errorMsg.style.color = '#dc143c';
 934 │                     errorMsg.textContent = 'Por favor, insira um email vÃ¡lido';
 935 │                     this.parentNode.appendChild(errorMsg);
 936 │                 }
 937 │             } else {
 938 │                 this.style.borderColor = '#e0e0e0';
 939 │                 const errorMsg = document.querySelector('.email-error');
 940 │                 if (errorMsg) {
 941 │                     errorMsg.remove();
 942 │                 }
 943 │             }
 944 │         });
 945 │ 
 946 │         // MÃ¡scara para telefone
 947 │         document.getElementById('phone').addEventListener('input', function() {
 948 │             let value = this.value.replace(/\D/g, '');
 949 │             
 950 │             if (value.length <= 11) {
 951 │                 value = value.replace(/(\d{2})(\d{5})(\d{4})/, '($1) $2-$3');
 952 │                 if (value.length < 14) {
 953 │                     value = value.replace(/(\d{2})(\d{4})(\d{4})/, '($1) $2-$3');
 954 │                 }
 955 │             }
 956 │             
 957 │             this.value = value;
 958 │         });
 959 │ 
 960 │         // NavegaÃ§Ã£o com teclado
 961 │         document.addEventListener('keydown', function(e) {
 962 │             if (e.key === 'Enter' && e.target.tagName !== 'TEXTAREA') {
 963 │                 e.preventDefault();
 964 │                 const nextButton = document.querySelector('.form-step.active .btn-primary');
 965 │                 if (nextButton && nextButton.textContent !== 'Confirmar Agendamento') {
 966 │                     nextButton.click();
 967 │                 }
 968 │             }
 969 │         });
 970 │ 
 971 │         // Salvar dados no localStorage para recuperaÃ§Ã£o
 972 │         function saveFormData() {
 973 │             const form = document.getElementById('bookingForm');
 974 │             const formData = new FormData(form);
 975 │             const data = {};
 976 │             
 977 │             for (let [key, value] of formData.entries()) {
 978 │                 data[key] = value;
 979 │             }
 980 │             
 981 │             localStorage.setItem('gbBookingForm', JSON.stringify(data));
 982 │         }
 983 │ 
 984 │         // Recuperar dados salvos
 985 │         function loadFormData() {
 986 │             const savedData = localStorage.getItem('gbBookingForm');
 987 │             if (savedData) {
 988 │                 const data = JSON.parse(savedData);
 989 │                 const form = document.getElementById('bookingForm');
 990 │                 
 991 │                 Object.keys(data).forEach(key => {
 992 │                     const input = form.querySelector(`[name="${key}"]`);
 993 │                     if (input) {
 994 │                         input.value = data[key];
 995 │                         if (input.type === 'radio' && input.value === data[key]) {
 996 │                             input.checked = true;
 997 │                             input.closest('.radio-item').classList.add('selected');
 998 │                         }
 999 │                     }
1000 │                 });
1001 │             }
1002 │         }
1003 │ 
1004 │         // Salvar dados a cada mudanÃ§a
1005 │         document.getElementById('bookingForm').addEventListener('input', saveFormData);
1006 │         document.getElementById('bookingForm').addEventListener('change', saveFormData);
1007 │ 
1008 │         // Carregar dados salvos ao inicializar
1009 │         document.addEventListener('DOMContentLoaded', loadFormData);
1010 │ 
1011 │         // Limpar dados salvos apÃ³s envio bem-sucedido
1012 │         function clearSavedData() {
1013 │             localStorage.removeItem('gbBookingForm');
1014 │         }
1015 │ 
1016 │         // Atualizar funÃ§Ã£o submitForm para limpar dados
1017 │         const originalSubmitForm = submitForm;
1018 │         submitForm = function() {
1019 │             originalSubmitForm();
1020 │             clearSavedData();
1021 │         };
1022 │     </script>
1023 │ </body>
1024 │ </html>

═══════════════════════════════════════════════════════════════
ARQUIVO: public\index.html
Tamanho: 94.46KB
Modificado: 07/09/2025 21:33:03
═══════════════════════════════════════════════════════════════
   1 │ <!DOCTYPE html>
   2 │ <html lang="pt-BR">
   3 │ <head>
   4 │     <meta charset="UTF-8">
   5 │     <meta name="viewport" content="width=device-width, initial-scale=1.0">
   6 │     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
   7 │     <title>Gracie Barra Cidade Nova - Jiu-Jitsu para Todos</title>
   8 │     
   9 │     <!-- Favicon -->
  10 │     <link rel="icon" type="image/png" sizes="32x32" href="public/assets/images/gb_logo.png">
  11 │     <link rel="icon" type="image/png" sizes="16x16" href="public/assets/images/gb_logo.png">
  12 │     <link rel="apple-touch-icon" sizes="180x180" href="public/assets/images/gb_logo.png">
  13 │     <link rel="shortcut icon" href="public/assets/images/gb_logo.png">
  14 │     
  15 │     <!-- Meta tags para SEO -->
  16 │     <meta name="description" content="Gracie Barra Cidade Nova - Academia de Jiu-Jitsu em Manaus. Aulas para todas as idades e nÃ­veis. Venha fazer parte da maior rede de Jiu-Jitsu do mundo.">
  17 │     <meta name="keywords" content="Jiu-Jitsu, Gracie Barra, Manaus, Cidade Nova, Artes Marciais, Academia, BJJ">
  18 │     <meta name="author" content="Gracie Barra Cidade Nova">
  19 │     
  20 │     <!-- Open Graph para redes sociais -->
  21 │     <meta property="og:title" content="Gracie Barra Cidade Nova - Jiu-Jitsu para Todos">
  22 │     <meta property="og:description" content="Academia de Jiu-Jitsu em Manaus. Aulas para todas as idades e nÃ­veis. Venha fazer parte da maior rede de Jiu-Jitsu do mundo.">
  23 │     <meta property="og:image" content="assets/images/gb_logo.png">
  24 │     <meta property="og:type" content="website">
  25 │     
  26 │     <style>
  27 │         :root {
  28 │             --primary-red: #dc143c;
  29 │             --primary-blue: #2c5aa0;
  30 │             --dark-red: #b91c3c;
  31 │             
  32 │             /* Light Mode Colors */
  33 │             --text-primary: #1a1a1a;
  34 │             --text-secondary: #4a4a4a;
  35 │             --text-light: #666;
  36 │             --background-primary: #ffffff;
  37 │             --background-secondary: #f8f9fa;
  38 │             --background-tertiary: #e9ecef;
  39 │             --card-background: #ffffff;
  40 │             --border-color: rgba(0,0,0,0.1);
  41 │             --shadow-light: 0 4px 15px rgba(0,0,0,0.08);
  42 │             --shadow-medium: 0 8px 25px rgba(0,0,0,0.15);
  43 │             --shadow-strong: 0 12px 30px rgba(0,0,0,0.2);
  44 │             
  45 │             --border-radius: 12px;
  46 │             --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  47 │         }
  48 │ 
  49 │         /* Dark Mode Colors */
  50 │         [data-theme="dark"] {
  51 │             --text-primary: #e0e0e0;
  52 │             --text-secondary: #b0b0b0;
  53 │             --text-light: #888;
  54 │             --background-primary: #1a1a1a;
  55 │             --background-secondary: #2d2d2d;
  56 │             --background-tertiary: #404040;
  57 │             --card-background: #2d2d2d;
  58 │             --border-color: rgba(255,255,255,0.1);
  59 │             --shadow-light: 0 4px 15px rgba(0,0,0,0.3);
  60 │             --shadow-medium: 0 8px 25px rgba(0,0,0,0.4);
  61 │             --shadow-strong: 0 12px 30px rgba(0,0,0,0.5);
  62 │         }
  63 │ 
  64 │         * {
  65 │             margin: 0;
  66 │             padding: 0;
  67 │             box-sizing: border-box;
  68 │         }
  69 │ 
  70 │         body {
  71 │             font-family: 'Inter', 'Segoe UI', -apple-system, BlinkMacSystemFont, sans-serif;
  72 │             line-height: 1.6;
  73 │             color: var(--text-primary);
  74 │             background-color: var(--background-primary);
  75 │             overflow-x: hidden;
  76 │             transition: var(--transition);
  77 │         }
  78 │ 
  79 │         /* Textos justificados */
  80 │         p {
  81 │             text-align: justify;
  82 │             color: var(--text-secondary);
  83 │             margin-bottom: 1rem;
  84 │             line-height: 1.7;
  85 │         }
  86 │ 
  87 │         /* Header - NÃƒO FIXO */
  88 │         .header {
  89 │             background: var(--background-primary);
  90 │             color: var(--text-primary);
  91 │             padding: 1rem 0;
  92 │             position: relative;
  93 │             width: 100%;
  94 │             z-index: 1000;
  95 │             box-shadow: var(--shadow-light);
  96 │             transition: var(--transition);
  97 │             border-bottom: 1px solid var(--border-color);
  98 │         }
  99 │ 
 100 │         .nav-container {
 101 │             max-width: 1400px;
 102 │             margin: 0 auto;
 103 │             display: flex;
 104 │             justify-content: space-between;
 105 │             align-items: center;
 106 │             padding: 0 clamp(1rem, 5vw, 3rem);
 107 │             flex-wrap: wrap;
 108 │             gap: 1rem;
 109 │         }
 110 │ 
 111 │         .logo {
 112 │             display: flex;
 113 │             align-items: center;
 114 │             font-size: clamp(1.2rem, 2.5vw, 1.8rem);
 115 │             font-weight: 700;
 116 │             transition: var(--transition);
 117 │         }
 118 │ 
 119 │         .logo-img {
 120 │             width: clamp(60px, 8vw, 80px);
 121 │             height: clamp(60px, 8vw, 80px);
 122 │             margin-right: clamp(0.8rem, 2vw, 1.5rem);
 123 │             background: url('assets/images/gb_logo.png') center/cover;
 124 │             border-radius: 8px;
 125 │             border: 3px solid var(--background-primary);
 126 │             box-shadow: var(--shadow-light);
 127 │             transition: var(--transition);
 128 │             background-size: cover;
 129 │             background-position: center;
 130 │             background-repeat: no-repeat;
 131 │         }
 132 │ 
 133 │         .logo:hover .logo-img {
 134 │             transform: scale(1.05);
 135 │             box-shadow: var(--shadow-medium);
 136 │         }
 137 │ 
 138 │         .logo-text {
 139 │             display: flex;
 140 │             flex-direction: column;
 141 │         }
 142 │ 
 143 │         .logo-main {
 144 │             color: var(--primary-red);
 145 │             font-weight: 800;
 146 │             letter-spacing: -0.5px;
 147 │         }
 148 │ 
 149 │         .logo-sub {
 150 │             font-size: clamp(0.7rem, 1.8vw, 1rem);
 151 │             font-weight: 400;
 152 │             color: var(--text-light);
 153 │             margin-top: -2px;
 154 │         }
 155 │ 
 156 │         /* Container para navegaÃ§Ã£o e tema */
 157 │         .nav-wrapper {
 158 │             display: flex;
 159 │             align-items: center;
 160 │             gap: clamp(1rem, 2vw, 2rem);
 161 │         }
 162 │ 
 163 │         .nav-menu {
 164 │             display: flex;
 165 │             list-style: none;
 166 │             gap: clamp(1rem, 2vw, 2rem);
 167 │             align-items: center;
 168 │         }
 169 │ 
 170 │         .nav-menu a {
 171 │             color: var(--text-primary);
 172 │             text-decoration: none;
 173 │             transition: var(--transition);
 174 │             font-weight: 500;
 175 │             font-size: clamp(0.9rem, 1.5vw, 1rem);
 176 │             position: relative;
 177 │             padding: 0.5rem 0;
 178 │             white-space: nowrap;
 179 │         }
 180 │ 
 181 │         .nav-menu a::after {
 182 │             content: '';
 183 │             position: absolute;
 184 │             bottom: 0;
 185 │             left: 0;
 186 │             width: 0;
 187 │             height: 2px;
 188 │             background: linear-gradient(45deg, var(--primary-red), var(--primary-blue));
 189 │             transition: width 0.3s ease;
 190 │         }
 191 │ 
 192 │         .nav-menu a:hover::after,
 193 │         .nav-menu a.active::after {
 194 │             width: 100%;
 195 │         }
 196 │ 
 197 │         .nav-menu a:hover,
 198 │         .nav-menu a.active {
 199 │             color: var(--primary-red);
 200 │         }
 201 │ 
 202 │         /* Theme Toggle Button */
 203 │         .theme-toggle {
 204 │             background: var(--card-background);
 205 │             border: 2px solid var(--border-color);
 206 │             border-radius: 25px;
 207 │             padding: clamp(0.4rem, 1vw, 0.6rem) clamp(0.8rem, 2vw, 1.2rem);
 208 │             cursor: pointer;
 209 │             transition: var(--transition);
 210 │             font-size: clamp(0.85rem, 1.5vw, 1rem);
 211 │             color: var(--text-primary);
 212 │             display: flex;
 213 │             align-items: center;
 214 │             gap: 0.5rem;
 215 │             white-space: nowrap;
 216 │             min-width: fit-content;
 217 │         }
 218 │ 
 219 │         .theme-toggle:hover {
 220 │             background: var(--background-secondary);
 221 │             border-color: var(--primary-red);
 222 │         }
 223 │ 
 224 │         /* Mobile Menu */
 225 │         .mobile-menu {
 226 │             display: none;
 227 │             background: none;
 228 │             border: none;
 229 │             font-size: 2.2rem;
 230 │             cursor: pointer;
 231 │             color: var(--primary-red);
 232 │             transition: var(--transition);
 233 │             z-index: 1201;
 234 │             position: fixed;
 235 │             top: 1.2rem;
 236 │             right: 1.2rem;
 237 │         }
 238 │ 
 239 │         .mobile-menu:hover {
 240 │             color: var(--primary-red);
 241 │             transform: scale(1.1);
 242 │         }
 243 │ 
 244 │         .mobile-nav {
 245 │             display: none;
 246 │             position: fixed;
 247 │             top: 0;
 248 │             left: 0;
 249 │             width: 100vw;
 250 │             height: 100vh;
 251 │             background: var(--background-primary);
 252 │             box-shadow: 0 10px 40px rgba(0,0,0,0.3);
 253 │             z-index: 1200;
 254 │             padding: 5rem 2rem 2rem 2rem;
 255 │             transition: var(--transition);
 256 │             flex-direction: column;
 257 │             justify-content: flex-start;
 258 │             align-items: center;
 259 │             overflow-y: auto;
 260 │         }
 261 │ 
 262 │         .mobile-nav.active {
 263 │             display: flex;
 264 │         }
 265 │ 
 266 │         .mobile-nav ul {
 267 │             list-style: none;
 268 │             display: flex;
 269 │             flex-direction: column;
 270 │             gap: 2rem;
 271 │             width: 100%;
 272 │             align-items: center;
 273 │             margin-bottom: 2rem;
 274 │             padding: 0;
 275 │         }
 276 │ 
 277 │         .mobile-nav a {
 278 │             color: var(--primary-red);
 279 │             text-decoration: none;
 280 │             font-size: 1.3rem;
 281 │             font-weight: 600;
 282 │             padding: 0.7rem 0;
 283 │             border-radius: 8px;
 284 │             transition: var(--transition);
 285 │             display: block;
 286 │             width: 100%;
 287 │             text-align: center;
 288 │         }
 289 │ 
 290 │         .mobile-nav a:hover, .mobile-nav a.active {
 291 │             background: var(--background-secondary);
 292 │             color: var(--primary-blue);
 293 │         }
 294 │ 
 295 │         .mobile-nav .theme-toggle {
 296 │             display: flex !important;
 297 │             width: 100%;
 298 │             justify-content: center;
 299 │             margin-top: 1rem;
 300 │             padding: 1rem;
 301 │             background: var(--background-secondary);
 302 │             border: 2px solid var(--border-color);
 303 │             border-radius: 12px;
 304 │             color: var(--text-primary);
 305 │             font-size: 1.1rem;
 306 │             cursor: pointer;
 307 │         }
 308 │ 
 309 │         /* Hero Section com imagem de fundo */
 310 │         .hero {
 311 │     background: 
 312 │         linear-gradient(135deg, rgba(220, 20, 60, 0.8), rgba(44, 90, 160, 0.6)), 
 313 │         url('assets/images/gb1.jpg'),
 314 │         linear-gradient(45deg, #1a1a1a, #333);
 315 │     background-size: cover;
 316 │     background-position: center;
 317 │     background-repeat: no-repeat;
 318 │     min-height: 100vh;
 319 │     display: flex;
 320 │     align-items: flex-start;
 321 │     justify-content: center;
 322 │     text-align: center;
 323 │     color: white;
 324 │     position: relative;
 325 │     overflow: hidden;
 326 │     padding-top: 21vh;
 327 │ }
 328 │ 
 329 │         .hero::before {
 330 │             content: '';
 331 │             position: absolute;
 332 │             top: 0;
 333 │             left: 0;
 334 │             right: 0;
 335 │             bottom: 0;
 336 │             background: linear-gradient(45deg, rgba(220, 20, 60, 0.1), rgba(44, 90, 160, 0.1));
 337 │             z-index: 1;
 338 │         }
 339 │ 
 340 │         .hero-content {
 341 │             position: relative;
 342 │             z-index: 2;
 343 │             text-shadow: 2px 2px 8px rgba(0,0,0,0.5);
 344 │             max-width: 900px;
 345 │             padding: 0 1rem;
 346 │         }
 347 │ 
 348 │         .hero-content h1 {
 349 │             font-size: clamp(2.5rem, 8vw, 5rem);
 350 │             margin-bottom: 1rem;
 351 │             font-weight: 800;
 352 │             letter-spacing: -1px;
 353 │             color: #ffffff;
 354 │             white-space: nowrap;
 355 │             text-align: center;
 356 │         }
 357 │ 
 358 │         .hero-content .subtitle {
 359 │             font-size: clamp(1.2rem, 4vw, 2rem);
 360 │             margin-bottom: 2rem;
 361 │             font-weight: 300;
 362 │             opacity: 0.95;
 363 │             color: #ffffff;
 364 │         }
 365 │ 
 366 │         .cta-button {
 367 │             background: linear-gradient(135deg, var(--primary-red), var(--dark-red));
 368 │             color: white;
 369 │             padding: clamp(12px, 3vw, 18px) clamp(24px, 6vw, 40px);
 370 │             border: none;
 371 │             border-radius: var(--border-radius);
 372 │             font-size: clamp(1rem, 2.5vw, 1.2rem);
 373 │             font-weight: 600;
 374 │             cursor: pointer;
 375 │             transition: var(--transition);
 376 │             text-decoration: none;
 377 │             display: inline-block;
 378 │             text-transform: uppercase;
 379 │             letter-spacing: 1px;
 380 │             box-shadow: 0 8px 30px rgba(220, 20, 60, 0.4);
 381 │             position: relative;
 382 │             overflow: hidden;
 383 │         }
 384 │ 
 385 │         .cta-button::before {
 386 │             content: '';
 387 │             position: absolute;
 388 │             top: 0;
 389 │             left: -100%;
 390 │             width: 100%;
 391 │             height: 100%;
 392 │             background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
 393 │             transition: left 0.5s ease;
 394 │         }
 395 │ 
 396 │         .cta-button:hover::before {
 397 │             left: 100%;
 398 │         }
 399 │ 
 400 │         .cta-button:hover {
 401 │             transform: translateY(-3px);
 402 │             box-shadow: 0 15px 40px rgba(220, 20, 60, 0.5);
 403 │         }
 404 │ 
 405 │         /* Content Sections */
 406 │         .section {
 407 │             padding: clamp(3rem, 8vw, 6rem) clamp(1rem, 5vw, 3rem);
 408 │             max-width: 1400px;
 409 │             margin: 0 auto;
 410 │         }
 411 │ 
 412 │         .section-title {
 413 │             text-align: center;
 414 │             font-size: clamp(2rem, 6vw, 3.5rem);
 415 │             color: var(--text-primary);
 416 │             margin-bottom: 1rem;
 417 │             font-weight: 700;
 418 │             letter-spacing: -1px;
 419 │         }
 420 │ 
 421 │         .section-subtitle {
 422 │             text-align: center;
 423 │             font-size: clamp(1rem, 2.5vw, 1.3rem);
 424 │             color: var(--text-secondary);
 425 │             margin-bottom: 3rem;
 426 │             max-width: 700px;
 427 │             margin-left: auto;
 428 │             margin-right: auto;
 429 │         }
 430 │ 
 431 │         .two-column {
 432 │             display: grid;
 433 │             grid-template-columns: repeat(auto-fit, minmax(min(100%, 400px), 1fr));
 434 │             gap: clamp(2rem, 6vw, 4rem);
 435 │             align-items: center;
 436 │             margin-top: 3rem;
 437 │         }
 438 │ 
 439 │         .content-block h3 {
 440 │             color: var(--primary-red);
 441 │             font-size: clamp(1.3rem, 3vw, 1.8rem);
 442 │             margin-bottom: 1rem;
 443 │             font-weight: 600;
 444 │         }
 445 │ 
 446 │         .content-block p {
 447 │             margin-bottom: 1rem;
 448 │             line-height: 1.8;
 449 │             font-size: clamp(0.95rem, 2vw, 1.1rem);
 450 │             color: var(--text-secondary);
 451 │             text-align: justify;
 452 │         }
 453 │ 
 454 │         .image-placeholder {
 455 │             width: 100%;
 456 │             height: clamp(250px, 40vw, 350px);
 457 │             background-size: cover;
 458 │             background-position: center;
 459 │             background-repeat: no-repeat;
 460 │             border-radius: var(--border-radius);
 461 │             box-shadow: var(--shadow-medium);
 462 │             transition: var(--transition);
 463 │         }
 464 │ 
 465 │         .image-placeholder:hover {
 466 │             transform: scale(1.02);
 467 │             box-shadow: var(--shadow-strong);
 468 │         }
 469 │ 
 470 │         /* Imagens especÃ­ficas com URLs locais */
 471 │         .academia-img {
 472 │             background: url('assets/images/gb8.jpg') center/cover;
 473 │         }
 474 │ 
 475 │         .metodo-img {
 476 │             background: url('assets/images/gb9.jpg') center/cover;
 477 │         }
 478 │ 
 479 │         .comunidade-img {
 480 │             background: url('assets/images/gb4.png') center/cover;
 481 │         }
 482 │ 
 483 │         /* Programs Grid */
 484 │         .programs-grid {
 485 │             display: grid;
 486 │             grid-template-columns: repeat(auto-fit, minmax(min(100%, 300px), 1fr));
 487 │             gap: clamp(1.5rem, 4vw, 2.5rem);
 488 │             margin-top: 3rem;
 489 │         }
 490 │ 
 491 │         .program-card {
 492 │             background: var(--card-background);
 493 │             border: 1px solid var(--border-color);
 494 │             border-radius: var(--border-radius);
 495 │             padding: clamp(1.5rem, 4vw, 2.5rem);
 496 │             text-align: center;
 497 │             transition: var(--transition);
 498 │             position: relative;
 499 │             overflow: hidden;
 500 │         }
 501 │ 
 502 │         .program-card::before {
 503 │             content: '';
 504 │             position: absolute;
 505 │             top: 0;
 506 │             left: 0;
 507 │             right: 0;
 508 │             height: 4px;
 509 │             background: linear-gradient(45deg, var(--primary-red), var(--primary-blue));
 510 │         }
 511 │ 
 512 │         .program-card:hover {
 513 │             box-shadow: var(--shadow-strong);
 514 │             transform: translateY(-8px);
 515 │         }
 516 │ 
 517 │         .program-card h3 {
 518 │             color: var(--primary-red);
 519 │             font-size: clamp(1.1rem, 2.5vw, 1.4rem);
 520 │             margin-bottom: 1rem;
 521 │             font-weight: 600;
 522 │         }
 523 │ 
 524 │         .program-card p {
 525 │             color: var(--text-secondary);
 526 │             text-align: justify;
 527 │         }
 528 │ 
 529 │         .program-icon {
 530 │             width: clamp(50px, 10vw, 70px);
 531 │             height: clamp(50px, 10vw, 70px);
 532 │             background: linear-gradient(135deg, var(--primary-red), var(--dark-red));
 533 │             border-radius: 50%;
 534 │             margin: 0 auto 1rem;
 535 │             display: flex;
 536 │             align-items: center;
 537 │             justify-content: center;
 538 │             color: white;
 539 │             font-size: clamp(1.2rem, 3vw, 1.8rem);
 540 │             font-weight: bold;
 541 │             box-shadow: var(--shadow-light);
 542 │         }
 543 │ 
 544 │         /* Benefits Section */
 545 │         .benefits-section {
 546 │             background: var(--background-secondary);
 547 │         }
 548 │ 
 549 │         .benefits-grid {
 550 │             display: grid;
 551 │             grid-template-columns: repeat(auto-fit, minmax(min(100%, 280px), 1fr));
 552 │             gap: clamp(1.5rem, 4vw, 2.5rem);
 553 │             margin-top: 3rem;
 554 │         }
 555 │ 
 556 │         .benefit-item {
 557 │             text-align: center;
 558 │             padding: clamp(1.5rem, 4vw, 2.5rem);
 559 │             background: var(--card-background);
 560 │             border-radius: var(--border-radius);
 561 │             box-shadow: var(--shadow-light);
 562 │             transition: var(--transition);
 563 │         }
 564 │ 
 565 │         .benefit-item:hover {
 566 │             transform: translateY(-8px);
 567 │             box-shadow: var(--shadow-medium);
 568 │         }
 569 │ 
 570 │         .benefit-icon {
 571 │             width: clamp(60px, 12vw, 90px);
 572 │             height: clamp(60px, 12vw, 90px);
 573 │             background: linear-gradient(135deg, var(--primary-red), var(--primary-blue));
 574 │             border-radius: 50%;
 575 │             margin: 0 auto 1rem;
 576 │             display: flex;
 577 │             align-items: center;
 578 │             justify-content: center;
 579 │             color: white;
 580 │             font-size: clamp(1.5rem, 4vw, 2.5rem);
 581 │         }
 582 │ 
 583 │         .benefit-item h3 {
 584 │             color: var(--text-primary);
 585 │             margin-bottom: 0.5rem;
 586 │             font-weight: 600;
 587 │             font-size: clamp(1rem, 2.5vw, 1.3rem);
 588 │         }
 589 │ 
 590 │         .benefit-item p {
 591 │             color: var(--text-secondary);
 592 │             text-align: justify;
 593 │         }
 594 │ 
 595 │         /* Quote Section */
 596 │         .quote-section {
 597 │             background: 
 598 │                 linear-gradient(135deg, rgba(44, 90, 160, 0.9), rgba(44, 90, 160, 0.7)),
 599 │                 url('assets/images/carlos_gracie.png');
 600 │             background-size: cover;
 601 │             background-position: center;
 602 │             background-repeat: no-repeat;
 603 │             color: white;
 604 │             text-align: center;
 605 │             padding: clamp(3rem, 8vw, 6rem) clamp(1rem, 5vw, 3rem);
 606 │             position: relative;
 607 │         }
 608 │ 
 609 │         .quote {
 610 │             font-size: clamp(1.2rem, 3vw, 1.8rem);
 611 │             font-style: italic;
 612 │             margin-bottom: 1rem;
 613 │             max-width: 900px;
 614 │             margin-left: auto;
 615 │             margin-right: auto;
 616 │             font-weight: 300;
 617 │             text-shadow: 1px 1px 3px rgba(0,0,0,0.5);
 618 │             line-height: 1.6;
 619 │             color: #ffffff;
 620 │             text-align: center;
 621 │         }
 622 │ 
 623 │         .quote-author {
 624 │             font-size: clamp(1rem, 2.5vw, 1.3rem);
 625 │             font-weight: 500;
 626 │             color: #ffffff;
 627 │         }
 628 │ 
 629 │         /* Values Section */
 630 │         .values-grid {
 631 │             display: grid;
 632 │             grid-template-columns: repeat(auto-fit, minmax(min(100%, 350px), 1fr));
 633 │             gap: clamp(1.5rem, 4vw, 2.5rem);
 634 │             margin-top: 3rem;
 635 │         }
 636 │ 
 637 │         .value-card {
 638 │             background: var(--card-background);
 639 │             border-left: 4px solid var(--primary-red);
 640 │             padding: clamp(1.5rem, 4vw, 2.5rem);
 641 │             box-shadow: var(--shadow-light);
 642 │             border-radius: 0 var(--border-radius) var(--border-radius) 0;
 643 │             transition: var(--transition);
 644 │             border: 1px solid var(--border-color);
 645 │             border-left: 4px solid var(--primary-red);
 646 │         }
 647 │ 
 648 │         .value-card p {
 649 │             color: var(--text-secondary);
 650 │             line-height: 1.7;
 651 │             text-align: justify;
 652 │         }
 653 │ 
 654 │         .value-card:hover {
 655 │             border-left-width: 8px;
 656 │             transform: translateX(10px);
 657 │             box-shadow: var(--shadow-medium);
 658 │         }
 659 │ 
 660 │         .value-card h3 {
 661 │             color: var(--primary-blue);
 662 │             font-size: clamp(1.2rem, 3vw, 1.6rem);
 663 │             margin-bottom: 1rem;
 664 │             font-weight: 600;
 665 │         }
 666 │ 
 667 │         /* Instructors Section */
 668 │         .instructors-grid {
 669 │             display: grid;
 670 │             grid-template-columns: repeat(auto-fit, minmax(min(100%, 320px), 1fr));
 671 │             gap: clamp(1.5rem, 4vw, 2.5rem);
 672 │             margin-top: 3rem;
 673 │         }
 674 │ 
 675 │         .instructor-card {
 676 │             background: var(--card-background);
 677 │             border-radius: var(--border-radius);
 678 │             overflow: hidden;
 679 │             box-shadow: var(--shadow-light);
 680 │             transition: var(--transition);
 681 │             border: 1px solid var(--border-color);
 682 │         }
 683 │ 
 684 │         .instructor-info p {
 685 │             color: var(--text-secondary);
 686 │             line-height: 1.6;
 687 │             text-align: justify;
 688 │         }
 689 │ 
 690 │         .instructor-card:hover {
 691 │             transform: translateY(-10px);
 692 │             box-shadow: var(--shadow-strong);
 693 │         }
 694 │ 
 695 │         .instructor-img {
 696 │             width: 100%;
 697 │             height: clamp(200px, 30vw, 280px);
 698 │             background-size: cover;
 699 │             background-position: center;
 700 │             background-repeat: no-repeat;
 701 │             position: relative;
 702 │         }
 703 │ 
 704 │         /* Imagens especÃ­ficas dos instrutores */
 705 │         .instructor-1 {
 706 │             background: url('assets/images/victor.jpg') center/cover;
 707 │         }
 708 │ 
 709 │         .instructor-2 {
 710 │             background: url('assets/images/professor_ricardo.png') center/cover;
 711 │         }
 712 │ 
 713 │         .instructor-3 {
 714 │             background: url('assets/images/instructor3.png') center/cover;
 715 │         }
 716 │ 
 717 │         .instructor-img::before {
 718 │             content: '';
 719 │             position: absolute;
 720 │             top: 0;
 721 │             left: 0;
 722 │             right: 0;
 723 │             bottom: 0;
 724 │             background: linear-gradient(to bottom, transparent 60%, rgba(0,0,0,0.7));
 725 │         }
 726 │ 
 727 │         .instructor-info {
 728 │             padding: clamp(1rem, 3vw, 2rem);
 729 │         }
 730 │ 
 731 │         .instructor-info h3 {
 732 │             color: var(--primary-red);
 733 │             margin-bottom: 0.5rem;
 734 │             font-weight: 600;
 735 │             font-size: clamp(1.1rem, 2.5vw, 1.3rem);
 736 │         }
 737 │ 
 738 │         .instructor-info .rank {
 739 │             color: var(--primary-blue);
 740 │             font-weight: 500;
 741 │             margin-bottom: 0.5rem;
 742 │         }
 743 │ 
 744 │         /* BotÃ£o Ler mais */
 745 │         .read-more-btn {
 746 │             background: linear-gradient(135deg, var(--primary-blue), #1e3a8a);
 747 │             color: white;
 748 │             border: none;
 749 │             padding: 0.5rem 1rem;
 750 │             border-radius: 6px;
 751 │             font-size: 0.9rem;
 752 │             font-weight: 500;
 753 │             cursor: pointer;
 754 │             transition: var(--transition);
 755 │             margin-top: 0.5rem;
 756 │         }
 757 │ 
 758 │         .read-more-btn:hover {
 759 │             background: linear-gradient(135deg, #1e3a8a, var(--primary-blue));
 760 │             transform: translateY(-2px);
 761 │         }
 762 │ 
 763 │         /* Modal Styles */
 764 │         .modal {
 765 │             display: none;
 766 │             position: fixed;
 767 │             z-index: 2000;
 768 │             left: 0;
 769 │             top: 0;
 770 │             width: 100%;
 771 │             height: 100%;
 772 │             background-color: rgba(0,0,0,0.5);
 773 │             backdrop-filter: blur(5px);
 774 │         }
 775 │ 
 776 │         .modal-content {
 777 │             background-color: var(--card-background);
 778 │             margin: 5% auto;
 779 │             padding: 2rem;
 780 │             border-radius: var(--border-radius);
 781 │             width: 90%;
 782 │             max-width: 600px;
 783 │             position: relative;
 784 │             box-shadow: var(--shadow-strong);
 785 │             border: 1px solid var(--border-color);
 786 │             max-height: 80vh;
 787 │             overflow-y: auto;
 788 │         }
 789 │ 
 790 │         .close {
 791 │             color: var(--text-light);
 792 │             float: right;
 793 │             font-size: 2rem;
 794 │             font-weight: bold;
 795 │             position: absolute;
 796 │             right: 1rem;
 797 │             top: 1rem;
 798 │             cursor: pointer;
 799 │             transition: var(--transition);
 800 │         }
 801 │ 
 802 │         .close:hover {
 803 │             color: var(--primary-red);
 804 │         }
 805 │ 
 806 │         .modal h3 {
 807 │             color: var(--primary-red);
 808 │             margin-bottom: 0.5rem;
 809 │             font-size: 1.5rem;
 810 │         }
 811 │ 
 812 │         .modal .rank {
 813 │             color: var(--primary-blue);
 814 │             font-weight: 600;
 815 │             margin-bottom: 1rem;
 816 │             font-size: 1.1rem;
 817 │         }
 818 │ 
 819 │         .modal p {
 820 │             color: var(--text-secondary);
 821 │             line-height: 1.7;
 822 │             margin-bottom: 1rem;
 823 │             text-align: justify;
 824 │         }
 825 │ 
 826 │         .modal ul {
 827 │             color: var(--text-secondary);
 828 │             margin-left: 1.5rem;
 829 │             margin-bottom: 1rem;
 830 │         }
 831 │ 
 832 │         .modal ul li {
 833 │             margin-bottom: 0.3rem;
 834 │         }
 835 │ 
 836 │         /* News Section */
 837 │         .news-grid {
 838 │             display: grid;
 839 │             grid-template-columns: repeat(auto-fit, minmax(min(100%, 350px), 1fr));
 840 │             gap: clamp(1.5rem, 4vw, 2.5rem);
 841 │             margin-top: 3rem;
 842 │         }
 843 │ 
 844 │         .news-card {
 845 │             background: var(--card-background);
 846 │             border-radius: var(--border-radius);
 847 │             overflow: hidden;
 848 │             box-shadow: var(--shadow-light);
 849 │             transition: var(--transition);
 850 │             border: 1px solid var(--border-color);
 851 │         }
 852 │ 
 853 │         .news-card:hover {
 854 │             transform: translateY(-8px);
 855 │             box-shadow: var(--shadow-medium);
 856 │         }
 857 │ 
 858 │         .news-img {
 859 │             width: 100%;
 860 │             height: clamp(150px, 25vw, 220px);
 861 │             background-size: cover;
 862 │             background-position: center;
 863 │             background-repeat: no-repeat;
 864 │         }
 865 │ 
 866 │         /* Imagens especÃ­ficas das notÃ­cias */
 867 │         .news-1 {
 868 │             background: url('assets/images/news1.jpg') center/cover;
 869 │         }
 870 │ 
 871 │         .news-2 {
 872 │             background: url('assets/images/news2.jpg') center/cover;
 873 │         }
 874 │ 
 875 │         .news-3 {
 876 │             background: url('assets/images/news3.jpg') center/cover;
 877 │         }
 878 │ 
 879 │         .news-content {
 880 │             padding: clamp(1rem, 3vw, 2rem);
 881 │         }
 882 │ 
 883 │         .news-date {
 884 │             color: var(--text-light);
 885 │             font-size: clamp(0.8rem, 2vw, 0.95rem);
 886 │             margin-bottom: 0.5rem;
 887 │         }
 888 │ 
 889 │         .news-title {
 890 │             color: var(--text-primary);
 891 │             font-size: clamp(1rem, 2.5vw, 1.2rem);
 892 │             font-weight: 600;
 893 │             margin-bottom: 1rem;
 894 │         }
 895 │ 
 896 │         .news-content p {
 897 │             color: var(--text-secondary);
 898 │             text-align: justify;
 899 │         }
 900 │ 
 901 │         /* Schedule Section */
 902 │         .schedule-container {
 903 │             margin-top: 3rem;
 904 │             overflow-x: auto;
 905 │             background: var(--card-background);
 906 │             border-radius: var(--border-radius);
 907 │             box-shadow: var(--shadow-medium);
 908 │             border: 1px solid var(--border-color);
 909 │         }
 910 │ 
 911 │         .schedule-wrapper {
 912 │             min-width: 800px;
 913 │             overflow-x: auto;
 914 │         }
 915 │ 
 916 │         .schedule-table {
 917 │             width: 100%;
 918 │             border-collapse: collapse;
 919 │             font-size: clamp(0.8rem, 2vw, 0.95rem);
 920 │         }
 921 │ 
 922 │         .schedule-table th {
 923 │             background: linear-gradient(135deg, #1565c0, #0d47a1);
 924 │             color: white;
 925 │             padding: clamp(0.8rem, 2vw, 1.2rem);
 926 │             text-align: center;
 927 │             font-weight: 600;
 928 │             border: 1px solid rgba(255,255,255,0.2);
 929 │             font-size: clamp(0.85rem, 2vw, 1rem);
 930 │         }
 931 │ 
 932 │         .time-column {
 933 │             width: 80px;
 934 │             min-width: 80px;
 935 │         }
 936 │ 
 937 │         .schedule-table td {
 938 │             padding: clamp(0.6rem, 1.5vw, 1rem);
 939 │             text-align: center;
 940 │             border: 1px solid var(--border-color);
 941 │             vertical-align: middle;
 942 │             transition: var(--transition);
 943 │         }
 944 │ 
 945 │         .time-cell {
 946 │             background: var(--background-secondary);
 947 │             color: var(--text-primary);
 948 │             font-weight: 600;
 949 │             width: 80px;
 950 │             min-width: 80px;
 951 │         }
 952 │ 
 953 │         .class-cell {
 954 │             font-weight: 600;
 955 │             color: white;
 956 │             position: relative;
 957 │             cursor: pointer;
 958 │             min-height: 60px;
 959 │             line-height: 1.2;
 960 │         }
 961 │ 
 962 │         .class-cell:hover {
 963 │             transform: scale(1.02);
 964 │             box-shadow: inset 0 0 10px rgba(0,0,0,0.2);
 965 │         }
 966 │ 
 967 │         .class-cell .instructor {
 968 │             font-size: clamp(0.7rem, 1.5vw, 0.8rem);
 969 │             font-weight: 400;
 970 │             opacity: 0.9;
 971 │             display: block;
 972 │             margin-top: 2px;
 973 │         }
 974 │ 
 975 │         /* Class Colors - Atualizadas */
 976 │         .gb1 {
 977 │             background: linear-gradient(135deg, var(--primary-red), #c41e3a);
 978 │         }
 979 │ 
 980 │         .gb2 {
 981 │             background: linear-gradient(135deg, #7c2d12, #a16207);
 982 │         }
 983 │ 
 984 │         .gb3 {
 985 │             background: linear-gradient(135deg, #7c2d12, #a16207);
 986 │         }
 987 │ 
 988 │         .gb-kids {
 989 │             background: linear-gradient(135deg, #eab308, #ca8a04);
 990 │         }
 991 │ 
 992 │         .gb-little {
 993 │             background: linear-gradient(135deg, #ca8a04, #eab308);
 994 │         }
 995 │ 
 996 │         .women {
 997 │             background: linear-gradient(135deg, #a855f7, #9333ea);
 998 │         }
 999 │ 
1000 │         .competition {
1001 │             background: linear-gradient(135deg, #dc2626, #b91c1c);
1002 │         }
1003 │ 
1004 │         .open-mat {
1005 │             background: linear-gradient(135deg, #6b7280, #4b5563);
1006 │         }
1007 │ 
1008 │         .closed {
1009 │             background: linear-gradient(135deg, #374151, #1f2937);
1010 │             color: #9ca3af;
1011 │         }
1012 │ 
1013 │         /* Schedule Legend */
1014 │         .schedule-legend {
1015 │             margin-top: 2rem;
1016 │             padding: clamp(1.5rem, 4vw, 2rem);
1017 │             background: var(--background-secondary);
1018 │             border-radius: var(--border-radius);
1019 │             border: 1px solid var(--border-color);
1020 │         }
1021 │ 
1022 │         .schedule-legend h3 {
1023 │             color: var(--text-primary);
1024 │             margin-bottom: 1rem;
1025 │             font-size: clamp(1.1rem, 2.5vw, 1.3rem);
1026 │             text-align: center;
1027 │         }
1028 │ 
1029 │         .legend-grid {
1030 │             display: grid;
1031 │             grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
1032 │             gap: clamp(0.8rem, 2vw, 1.2rem);
1033 │         }
1034 │ 
1035 │         .legend-item {
1036 │             display: flex;
1037 │             align-items: center;
1038 │             gap: 0.8rem;
1039 │             padding: 0.5rem;
1040 │             background: var(--card-background);
1041 │             border-radius: 8px;
1042 │             border: 1px solid var(--border-color);
1043 │             transition: var(--transition);
1044 │         }
1045 │ 
1046 │         .legend-item:hover {
1047 │             transform: translateY(-2px);
1048 │             box-shadow: var(--shadow-light);
1049 │         }
1050 │ 
1051 │         .legend-color {
1052 │             width: 20px;
1053 │             height: 20px;
1054 │             border-radius: 4px;
1055 │             min-width: 20px;
1056 │         }
1057 │ 
1058 │         .legend-item span:last-child {
1059 │             color: var(--text-secondary);
1060 │             font-size: clamp(0.85rem, 2vw, 0.95rem);
1061 │             font-weight: 500;
1062 │         }
1063 │ 
1064 │         /* Contact Section - OCUPAÃ‡ÃƒO TOTAL E RESPONSIVA */
1065 │         .contact-section {
1066 │             background: 
1067 │                 linear-gradient(135deg, rgba(51, 51, 51, 0.9), rgba(51, 51, 51, 0.7)),
1068 │                 url('assets/images/gb6.jpg');
1069 │             background-size: cover;
1070 │             background-position: center;
1071 │             background-repeat: no-repeat;
1072 │             color: white;
1073 │             position: relative;
1074 │             width: 100vw;
1075 │             margin-left: calc(-50vw + 50%);
1076 │             padding: clamp(3rem, 8vw, 6rem) 0;
1077 │         }
1078 │ 
1079 │         .contact-section .section-title {
1080 │             color: #ffffff;
1081 │         }
1082 │ 
1083 │         .contact-section .section-subtitle {
1084 │             color: #ffffff;
1085 │         }
1086 │ 
1087 │         .contact-content {
1088 │             max-width: 1400px;
1089 │             margin: 0 auto;
1090 │             padding: 0 clamp(1rem, 5vw, 3rem);
1091 │         }
1092 │ 
1093 │         .contact-grid {
1094 │             display: grid;
1095 │             grid-template-columns: repeat(auto-fit, minmax(min(100%, 350px), 1fr));
1096 │             gap: clamp(2rem, 6vw, 4rem);
1097 │             margin-top: 3rem;
1098 │         }
1099 │ 
1100 │         .contact-info h3 {
1101 │             margin-bottom: 1rem;
1102 │             color: var(--primary-red);
1103 │             font-size: clamp(1.2rem, 3vw, 1.5rem);
1104 │         }
1105 │ 
1106 │         .contact-info p {
1107 │             margin-bottom: 0.5rem;
1108 │             font-size: clamp(0.95rem, 2vw, 1.1rem);
1109 │             color: #ffffff;
1110 │             text-align: left;
1111 │         }
1112 │ 
1113 │         .social-links {
1114 │             display: flex;
1115 │             gap: 1rem;
1116 │             margin-top: 1rem;
1117 │         }
1118 │ 
1119 │         .social-links a {
1120 │             color: white;
1121 │             font-size: clamp(1.3rem, 3vw, 1.8rem);
1122 │             transition: var(--transition);
1123 │             padding: 0.5rem;
1124 │             border-radius: 8px;
1125 │             text-decoration: none;
1126 │         }
1127 │ 
1128 │         .social-links a:hover {
1129 │             color: var(--primary-red);
1130 │             background: rgba(220, 20, 60, 0.1);
1131 │             transform: scale(1.1);
1132 │         }
1133 │ 
1134 │         /* Footer */
1135 │         .footer {
1136 │             background: #1a1a1a;
1137 │             color: white;
1138 │             text-align: center;
1139 │             padding: clamp(2rem, 4vw, 3rem);
1140 │         }
1141 │ 
1142 │         .footer p {
1143 │             margin-bottom: 0.5rem;
1144 │             font-size: clamp(0.9rem, 2vw, 1rem);
1145 │             color: #ffffff;
1146 │             text-align: center;
1147 │         }
1148 │ 
1149 │         /* Scroll to top button */
1150 │         .scroll-to-top {
1151 │             position: fixed;
1152 │             bottom: clamp(20px, 4vw, 30px);
1153 │             right: clamp(20px, 4vw, 30px);
1154 │             background: linear-gradient(135deg, var(--primary-red), var(--dark-red));
1155 │             color: white;
1156 │             border: none;
1157 │             border-radius: 50%;
1158 │             width: clamp(45px, 8vw, 60px);
1159 │             height: clamp(45px, 8vw, 60px);
1160 │             cursor: pointer;
1161 │             display: none;
1162 │             transition: var(--transition);
1163 │             font-size: clamp(1rem, 2.5vw, 1.5rem);
1164 │             box-shadow: var(--shadow-medium);
1165 │             z-index: 999;
1166 │         }
1167 │ 
1168 │         .scroll-to-top:hover {
1169 │             background: linear-gradient(135deg, var(--dark-red), var(--primary-red));
1170 │             transform: scale(1.1);
1171 │             box-shadow: var(--shadow-strong);
1172 │         }
1173 │ 
1174 │         /* Responsive Design */
1175 │         @media (max-width: 1024px) {
1176 │             .nav-container {
1177 │                 flex-wrap: wrap;
1178 │             }
1179 │             
1180 │             .nav-wrapper {
1181 │                 width: 100%;
1182 │                 justify-content: space-between;
1183 │                 margin-top: 1rem;
1184 │             }
1185 │             
1186 │             .nav-menu {
1187 │                 gap: 1rem;
1188 │             }
1189 │         }
1190 │ 
1191 │         @media (max-width: 768px) {
1192 │             .nav-menu {
1193 │                 display: none;
1194 │             }
1195 │             
1196 │             .theme-toggle {
1197 │                 display: none;
1198 │             }
1199 │             
1200 │             .mobile-menu {
1201 │                 display: block;
1202 │             }
1203 │ 
1204 │             .nav-wrapper {
1205 │                 width: auto;
1206 │                 margin-top: 0;
1207 │             }
1208 │ 
1209 │             .hero {
1210 │                 min-height: 80vh;
1211 │             }
1212 │ 
1213 │             .two-column {
1214 │                 grid-template-columns: 1fr;
1215 │             }
1216 │ 
1217 │             .programs-grid,
1218 │             .benefits-grid,
1219 │             .instructors-grid,
1220 │             .news-grid,
1221 │             .contact-grid,
1222 │             .values-grid {
1223 │                 grid-template-columns: 1fr;
1224 │             }
1225 │ 
1226 │             .mobile-nav .theme-toggle {
1227 │                 display: flex;
1228 │                 width: 100%;
1229 │                 justify-content: center;
1230 │                 margin-top: 1rem;
1231 │                 padding: 1rem;
1232 │                 background: var(--background-secondary);
1233 │                 border: 2px solid var(--border-color);
1234 │                 border-radius: 12px;
1235 │                 color: var(--text-primary);
1236 │                 font-size: 1rem;
1237 │                 cursor: pointer;
1238 │             }
1239 │ 
1240 │             .contact-section {
1241 │                 padding: clamp(3rem, 8vw, 6rem) 0;
1242 │                 margin-left: calc(-50vw + 50%);
1243 │             }
1244 │ 
1245 │             /* Responsive adjustments for schedule */
1246 │             .schedule-container {
1247 │                 margin: 2rem -1rem 0 -1rem;
1248 │                 border-radius: 0;
1249 │             }
1250 │ 
1251 │             .schedule-wrapper {
1252 │                 min-width: 600px;
1253 │             }
1254 │ 
1255 │             .schedule-table th,
1256 │             .schedule-table td {
1257 │                 padding: 0.5rem 0.3rem;
1258 │                 font-size: 0.75rem;
1259 │             }
1260 │ 
1261 │             .class-cell .instructor {
1262 │                 font-size: 0.65rem;
1263 │             }
1264 │ 
1265 │             .legend-grid {
1266 │                 grid-template-columns: 1fr;
1267 │             }
1268 │ 
1269 │             .legend-item {
1270 │                 justify-content: flex-start;
1271 │             }
1272 │         }
1273 │ 
1274 │         @media (max-width: 480px) {
1275 │             .section {
1276 │                 padding: 3rem 1rem;
1277 │             }
1278 │ 
1279 │             .nav-container {
1280 │                 padding: 0 1rem;
1281 │             }
1282 │ 
1283 │             .logo-img {
1284 │                 width: 50px;
1285 │                 height: 50px;
1286 │                 font-size: 1.2rem;
1287 │             }
1288 │ 
1289 │             .hero-content h1 {
1290 │                 font-size: 2rem;
1291 │                 white-space: normal;
1292 │                 word-wrap: break-word;
1293 │             }
1294 │ 
1295 │             .hero-content .subtitle {
1296 │                 font-size: 1rem;
1297 │             }
1298 │ 
1299 │             .contact-content {
1300 │                 padding: 0 1rem;
1301 │             }
1302 │ 
1303 │             .contact-grid {
1304 │                 gap: clamp(1.5rem, 4vw, 2rem);
1305 │             }
1306 │ 
1307 │             .schedule-wrapper {
1308 │                 min-width: 500px;
1309 │             }
1310 │ 
1311 │             .schedule-table th,
1312 │             .schedule-table td {
1313 │                 padding: 0.4rem 0.2rem;
1314 │                 font-size: 0.7rem;
1315 │             }
1316 │ 
1317 │             .time-cell {
1318 │                 width: 60px;
1319 │                 min-width: 60px;
1320 │             }
1321 │ 
1322 │             .time-column {
1323 │                 width: 60px;
1324 │                 min-width: 60px;
1325 │             }
1326 │ 
1327 │             .class-cell .instructor {
1328 │                 display: none;
1329 │             }
1330 │         }
1331 │ 
1332 │         /* AnimaÃ§Ãµes */
1333 │         @keyframes fadeIn {
1334 │             from {
1335 │                 opacity: 0;
1336 │                 transform: translateY(30px);
1337 │             }
1338 │             to {
1339 │                 opacity: 1;
1340 │                 transform: translateY(0);
1341 │             }
1342 │         }
1343 │ 
1344 │         @keyframes slideIn {
1345 │             from {
1346 │                 opacity: 0;
1347 │                 transform: translateX(-30px);
1348 │             }
1349 │             to {
1350 │                 opacity: 1;
1351 │                 transform: translateX(0);
1352 │             }
1353 │         }
1354 │ 
1355 │         @keyframes ripple {
1356 │             to {
1357 │                 transform: scale(2);
1358 │                 opacity: 0;
1359 │             }
1360 │         }
1361 │ 
1362 │         .fade-in {
1363 │             animation: fadeIn 0.8s ease forwards;
1364 │         }
1365 │ 
1366 │         .slide-in {
1367 │             animation: slideIn 0.8s ease forwards;
1368 │         }
1369 │ 
1370 │         /* Scroll reveal animations */
1371 │         .reveal {
1372 │             opacity: 0;
1373 │             transform: translateY(50px);
1374 │             transition: all 0.8s ease;
1375 │         }
1376 │ 
1377 │         .reveal.active {
1378 │             opacity: 1;
1379 │             transform: translateY(0);
1380 │         }
1381 │ 
1382 │         /* Loading spinner for images */
1383 │         .loading {
1384 │             background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
1385 │             background-size: 200% 100%;
1386 │             animation: loading 1.5s infinite;
1387 │         }
1388 │ 
1389 │         @keyframes loading {
1390 │             0% {
1391 │                 background-position: 200% 0;
1392 │             }
1393 │             100% {
1394 │                 background-position: -200% 0;
1395 │             }
1396 │         }
1397 │     </style>
1398 │ </head>
1399 │ <body>
1400 │     <header class="header" id="header">
1401 │         <div class="nav-container">
1402 │             <div class="logo">
1403 │                 <div class="logo-img"></div>
1404 │                 <div class="logo-text">
1405 │                     <div class="logo-main">Gracie Barra</div>
1406 │                     <div class="logo-sub">Cidade Nova</div>
1407 │                 </div>
1408 │             </div>
1409 │             
1410 │             <div class="nav-wrapper">
1411 │                 <nav>
1412 │                     <ul class="nav-menu">
1413 │                         <li><a href="#inicio">InÃ­cio</a></li>
1414 │                         <li><a href="#sobre">Sobre</a></li>
1415 │                         <li><a href="#programas">Programas</a></li>
1416 │                         <li><a href="#beneficios">BenefÃ­cios</a></li>
1417 │                         <li><a href="#filosofia">Filosofia</a></li>
1418 │                         <li><a href="#professores">Professores</a></li>
1419 │                         <li><a href="#horarios">HorÃ¡rios</a></li>
1420 │                         <li><a href="#contato">Contato</a></li>
1421 │                     </ul>
1422 │                 </nav>
1423 │                 
1424 │                 <button class="theme-toggle" id="themeToggle">
1425 │                     <span id="themeIcon">ðŸŒ™</span>
1426 │                     <span id="themeText">Escuro</span>
1427 │                 </button>
1428 │             </div>
1429 │             
1430 │             <button class="mobile-menu" id="mobileMenuBtn" aria-label="Abrir menu">â˜°</button>
1431 │         </div>
1432 │         
1433 │         <nav class="mobile-nav" id="mobileNav" aria-label="Menu Mobile">
1434 │             <ul>
1435 │                 <li><a href="#inicio">InÃ­cio</a></li>
1436 │                 <li><a href="#sobre">Sobre</a></li>
1437 │                 <li><a href="#programas">Programas</a></li>
1438 │                 <li><a href="#beneficios">BenefÃ­cios</a></li>
1439 │                 <li><a href="#filosofia">Filosofia</a></li>
1440 │                 <li><a href="#professores">Professores</a></li>
1441 │                 <li><a href="#horarios">HorÃ¡rios</a></li>
1442 │                 <li><a href="#contato">Contato</a></li>
1443 │             </ul>
1444 │             <button class="theme-toggle" id="mobileThemeToggle">
1445 │                 <span id="mobileThemeIcon">ðŸŒ™</span>
1446 │                 <span id="mobileThemeText">Escuro</span>
1447 │             </button>
1448 │         </nav>
1449 │     </header>
1450 │ 
1451 │     <section id="inicio" class="hero">
1452 │         <div class="hero-content reveal">
1453 │             <h1>Gracie Barra Cidade Nova</h1>
1454 │             <div class="subtitle">Jiu-Jitsu para Todos</div>
1455 │             <a href="https://wa.me/559281136742?text=OlÃ¡!%20Gostaria%20de%20agendar%20uma%20aula%20experimental%20na%20Gracie%20Barra%20Cidade%20Nova.%20Poderia%20me%20ajudar%20com%20mais%20informaÃ§Ãµes?" target="_blank" class="cta-button">ComeÃ§ar a Treinar</a>
1456 │         </div>
1457 │     </section>
1458 │ 
1459 │     <section id="sobre" class="section">
1460 │         <h2 class="section-title reveal">Sobre a Gracie Barra</h2>
1461 │         <p class="section-subtitle reveal">Gracie Barra Ã© uma comunidade mundial de instrutores, estudantes e atletas do Jiu-Jitsu. Nossa organizaÃ§Ã£o Ã© constituÃ­da por mais de 700 escolas em seis continentes.</p>
1462 │         
1463 │         <div class="two-column">
1464 │             <div class="content-block reveal">
1465 │                 <h3>Nossa Unidade</h3>
1466 │                 <p>A Gracie Barra Cidade Nova representa a excelÃªncia do ensino de Jiu-Jitsu em Manaus. Seguimos os padrÃµes globais da Gracie Barra, oferecendo um ambiente estruturado e acolhedor para todos os nÃ­veis de experiÃªncia.</p>
1467 │                 <p>Localizada estrategicamente na Cidade Nova, nossa academia conta com infraestrutura moderna e professores qualificados, proporcionando a melhor experiÃªncia de aprendizado do Jiu-Jitsu brasileiro em toda a regiÃ£o amazÃ´nica.</p>
1468 │             </div>
1469 │             <div class="image-placeholder academia-img reveal"></div>
1470 │         </div>
1471 │     </section>
1472 │ 
1473 │     <section class="section">
1474 │         <div class="two-column">
1475 │             <div class="image-placeholder metodo-img reveal"></div>
1476 │             <div class="content-block reveal">
1477 │                 <h3>Nosso MÃ©todo</h3>
1478 │                 <p>A partir da ideia de que o Jiu-Jitsu deve ser adotado como uma jornada por toda a vida, Mestre Carlos Gracie Jr. criou um plano estruturado que permite aos alunos progredirem sistematicamente da faixa-branca Ã  faixa-preta.</p>
1479 │                 <p>A estrutura das aulas Ã© a marca registrada de todas as escolas Gracie Barra mundialmente. As aulas comeÃ§am na hora marcada e seguem uma estrutura curricular padronizada, garantindo qualidade e consistÃªncia no ensino.</p>
1480 │             </div>
1481 │         </div>
1482 │     </section>
1483 │ 
1484 │     <section class="section">
1485 │         <div class="two-column">
1486 │             <div class="content-block reveal">
1487 │                 <h3>Por que Gracie Barra</h3>
1488 │                 <p>Os membros da GB fazem as escolas ser o que sÃ£o, e vocÃª logo serÃ¡ parte tambÃ©m desta grande famÃ­lia. VocÃª ficarÃ¡ impressionado com o comprometimento de cada membro da equipe com o seu desenvolvimento pessoal e tÃ©cnico.</p>
1489 │                 <p>Nossa comunidade em Cidade Nova reflete fielmente os valores fundamentais da Gracie Barra: Irmandade, ExpansÃ£o e Integridade, criando um ambiente Ãºnico e transformador para seu crescimento como pessoa e atleta.</p>
1490 │             </div>
1491 │             <div class="image-placeholder comunidade-img reveal"></div>
1492 │         </div>
1493 │     </section>
1494 │ 
1495 │     <section id="programas" class="section">
1496 │         <h2 class="section-title reveal">Programa Gracie Barra</h2>
1497 │         <p class="section-subtitle reveal">Programas estruturados para todas as idades e nÃ­veis de experiÃªncia, seguindo o mÃ©todo oficial Gracie Barra</p>
1498 │         
1499 │         <div class="programs-grid">
1500 │             <div class="program-card reveal">
1501 │                 <div class="program-icon">GB1</div>
1502 │                 <h3>GB1 - Fundamentals</h3>
1503 │                 <p>Programa para iniciantes com foco nos fundamentos bÃ¡sicos do Jiu-Jitsu e defesa pessoal. Ideal para quem estÃ¡ comeÃ§ando sua jornada no mundo das artes marciais e busca aprender as tÃ©cnicas essenciais.</p>
1504 │             </div>
1505 │             <div class="program-card reveal">
1506 │                 <div class="program-icon">GB2</div>
1507 │                 <h3>GB2 - Advanced</h3>
1508 │                 <p>Para alunos com experiÃªncia intermediÃ¡ria, desenvolvendo tÃ©cnicas avanÃ§adas e sparring controlado. Aprofundamento das habilidades tÃ©cnicas e introduÃ§Ã£o a conceitos mais complexos do Jiu-Jitsu.</p>
1509 │             </div>
1510 │             <div class="program-card reveal">
1511 │                 <div class="program-icon">GB3</div>
1512 │                 <h3>GB3 - Black Belt</h3>
1513 │                 <p>Programa avanÃ§ado para faixas marrons e pretas, com foco em competiÃ§Ã£o e refinamento tÃ©cnico. Desenvolvimento de alta performance e preparaÃ§Ã£o para competiÃ§Ãµes de elite.</p>
1514 │             </div>
1515 │             <div class="program-card reveal">
1516 │                 <div class="program-icon">ðŸ§’</div>
1517 │                 <h3>Little Champions</h3>
1518 │                 <p>Jiu-Jitsu para crianÃ§as de 4 a 6 anos, desenvolvendo coordenaÃ§Ã£o motora, disciplina e valores sociais fundamentais. IntroduÃ§Ã£o lÃºdica Ã s artes marciais com foco no desenvolvimento integral da crianÃ§a.</p>
1519 │             </div>
1520 │             <div class="program-card reveal">
1521 │                 <div class="program-icon">ðŸ‘¦</div>
1522 │                 <h3>Junior Champions</h3>
1523 │                 <p>Para jovens de 7 a 15 anos, combinando tÃ©cnicas de Jiu-Jitsu com desenvolvimento do carÃ¡ter. FormaÃ§Ã£o de jovens atletas com base sÃ³lida em valores e tÃ©cnicas marciais.</p>
1524 │             </div>
1525 │             <div class="program-card reveal">
1526 │                 <div class="program-icon">ðŸ‘©</div>
1527 │                 <h3>Women's Program</h3>
1528 │                 <p>Programa especial para mulheres, focando em defesa pessoal e empoderamento feminino. Ambiente seguro e acolhedor para o desenvolvimento da autoconfianÃ§a e habilidades de autodefesa.</p>
1529 │             </div>
1530 │         </div>
1531 │     </section>
1532 │ 
1533 │     <section id="beneficios" class="benefits-section section">
1534 │         <h2 class="section-title reveal">BenefÃ­cios do Jiu-Jitsu</h2>
1535 │         <p class="section-subtitle reveal">Transforme sua vida atravÃ©s da prÃ¡tica regular do Jiu-Jitsu e descubra todos os benefÃ­cios desta arte marcial</p>
1536 │         
1537 │         <div class="benefits-grid">
1538 │             <div class="benefit-item reveal">
1539 │                 <div class="benefit-icon">ðŸ’ª</div>
1540 │                 <h3>Condicionamento FÃ­sico</h3>
1541 │                 <p>Melhora significativa da forÃ§a, flexibilidade, resistÃªncia cardiovascular e coordenaÃ§Ã£o motora. O Jiu-Jitsu proporciona um treino completo que trabalha todo o corpo de forma harmoniosa.</p>
1542 │             </div>
1543 │             <div class="benefit-item reveal">
1544 │                 <div class="benefit-icon">ðŸ§ </div>
1545 │                 <h3>Desenvolvimento Mental</h3>
1546 │                 <p>Aumenta o foco, disciplina, autocontrole e capacidade de resoluÃ§Ã£o de problemas. A prÃ¡tica regular desenvolve a mente estratÃ©gica e a capacidade de tomar decisÃµes sob pressÃ£o.</p>
1547 │             </div>
1548 │             <div class="benefit-item reveal">
1549 │                 <div class="benefit-icon">ðŸ›¡ï¸</div>
1550 │                 <h3>Defesa Pessoal</h3>
1551 │                 <p>Aprenda tÃ©cnicas eficazes de autodefesa e desenvolva confianÃ§a para se proteger. O Jiu-Jitsu ensina como neutralizar agressores maiores e mais fortes usando tÃ©cnica e alavancagem.</p>
1552 │             </div>
1553 │             <div class="benefit-item reveal">
1554 │                 <div class="benefit-icon">ðŸ¤</div>
1555 │                 <h3>SocializaÃ§Ã£o</h3>
1556 │                 <p>FaÃ§a parte de uma comunidade unida e desenvolva amizades duradouras. O ambiente da Gracie Barra promove o respeito mÃºtuo e a formaÃ§Ã£o de laÃ§os verdadeiros entre os praticantes.</p>
1557 │             </div>
1558 │             <div class="benefit-item reveal">
1559 │                 <div class="benefit-icon">âš–ï¸</div>
1560 │                 <h3>EquilÃ­brio Emocional</h3>
1561 │                 <p>Reduza o estresse, ansiedade e desenvolva maior estabilidade emocional. A prÃ¡tica do Jiu-Jitsu serve como uma vÃ¡lvula de escape saudÃ¡vel para as pressÃµes do dia a dia.</p>
1562 │             </div>
1563 │             <div class="benefit-item reveal">
1564 │                 <div class="benefit-icon">ðŸ†</div>
1565 │                 <h3>Conquistas Pessoais</h3>
1566 │                 <p>EstabeleÃ§a e alcance metas progressivas, celebrando cada evoluÃ§Ã£o em sua jornada. O sistema de graduaÃ§Ã£o motiva o crescimento contÃ­nuo e o desenvolvimento pessoal.</p>
1567 │             </div>
1568 │         </div>
1569 │     </section>
1570 │ 
1571 │     <section class="quote-section">
1572 │         <div class="quote reveal">
1573 │             "Minha vida Ã© dedicada ao Jiu-Jitsu. Meu objetivo sempre foi construir uma irmandade para liderar a expansÃ£o do Jiu-Jitsu, respeitando sempre a essÃªncia da nossa arte. Meus alunos sÃ£o uma extensÃ£o da minha famÃ­lia."
1574 │         </div>
1575 │         <div class="quote-author reveal">- Carlos Gracie Jr.</div>
1576 │     </section>
1577 │ 
1578 │     <section id="filosofia" class="section">
1579 │         <h2 class="section-title reveal">Nossos Valores</h2>
1580 │         <p class="section-subtitle reveal">Os pilares fundamentais que sustentam a Gracie Barra em todo o mundo e orientam nossa missÃ£o</p>
1581 │         
1582 │         <div class="values-grid">
1583 │             <div class="value-card reveal">
1584 │                 <h3>Irmandade</h3>
1585 │                 <p>ConstruÃ­mos uma comunidade forte baseada no respeito mÃºtuo, apoio incondicional e crescimento conjunto, onde cada membro Ã© valorizado, respeitado e considerado parte de uma grande famÃ­lia marcial que transcende diferenÃ§as sociais, culturais e econÃ´micas.</p>
1586 │             </div>
1587 │             <div class="value-card reveal">
1588 │                 <h3>ExpansÃ£o</h3>
1589 │                 <p>Compartilhamos o Jiu-Jitsu como ferramenta de transformaÃ§Ã£o social e pessoal, levando seus benefÃ­cios para toda a comunidade de Manaus e regiÃ£o amazÃ´nica, democratizando o acesso a esta arte marcial e seus valores transformadores.</p>
1590 │             </div>
1591 │             <div class="value-card reveal">
1592 │                 <h3>Integridade</h3>
1593 │                 <p>Mantemos os mais altos padrÃµes Ã©ticos e morais em todas nossas aÃ§Ãµes, preservando fielmente a tradiÃ§Ã£o e os valores autÃªnticos do Jiu-Jitsu Brasileiro, honrando o legado deixado pela famÃ­lia Gracie e transmitindo-o com responsabilidade.</p>
1594 │             </div>
1595 │         </div>
1596 │     </section>
1597 │ 
1598 │     <section id="professores" class="section">
1599 │         <h2 class="section-title reveal">Nossos Professores</h2>
1600 │         <p class="section-subtitle reveal">Instrutores qualificados e certificados pela Gracie Barra, dedicados ao seu desenvolvimento</p>
1601 │         
1602 │         <div class="instructors-grid">
1603 │             <div class="instructor-card reveal">
1604 │                 <div class="instructor-img instructor-1"></div>
1605 │                 <div class="instructor-info">
1606 │                     <h3>Professor Victor CÃ©sar</h3>
1607 │                     <div class="rank">Faixa Preta 2Âº Grau</div>
1608 │                     <p>Faixa preta desde 2018, formado em EducaÃ§Ã£o FÃ­sica e especialista em ensino infantil. BicampeÃ£o Brasileiro com experiÃªncia internacional nos EUA.</p>
1609 │                     <button class="read-more-btn" onclick="openModal('victor')">Ler mais</button>
1610 │                 </div>
1611 │             </div>
1612 │             <div class="instructor-card reveal">
1613 │                 <div class="instructor-img instructor-2"></div>
1614 │                 <div class="instructor-info">
1615 │                     <h3>Professor Ricardo Pires</h3>
1616 │                     <div class="rank">Faixa Preta 2Âº Grau</div>
1617 │                     <p>38 anos, iniciou aos 15 anos e Ã© faixa preta desde 2016 pelo Sensei Henrique Machado. Professor hÃ¡ 12 anos, combina carreira no serviÃ§o pÃºblico com dedicaÃ§Ã£o total ao Jiu-Jitsu.</p>
1618 │                     <button class="read-more-btn" onclick="openModal('ricardo')">Ler mais</button>
1619 │                 </div>
1620 │             </div>
1621 │             <div class="instructor-card reveal">
1622 │                 <div class="instructor-img instructor-3"></div>
1623 │                 <div class="instructor-info">
1624 │                     <h3>Instrutor</h3>
1625 │                     <div class="rank">Faixa Roxa</div>
1626 │                     <p>Em manutenÃ§Ã£o</p>
1627 │                 </div>
1628 │             </div>
1629 │         </div>
1630 │     </section>
1631 │ 
1632 │     <section class="section">
1633 │         <h2 class="section-title reveal">Ãšltimas NotÃ­cias</h2>
1634 │         <p class="section-subtitle reveal">Fique por dentro das novidades da GB Cidade Nova e nossa comunidade</p>
1635 │         
1636 │         <div class="news-grid">
1637 │             <div class="news-card reveal">
1638 │                 <div class="news-img news-1"></div>
1639 │                 <div class="news-content">
1640 │                     <div class="news-date">15 de Junho, 2024</div>
1641 │                     <div class="news-title">Em manutenÃ§Ã£o</div>
1642 │                     <p>Em manutenÃ§Ã£o</p>
1643 │                 </div>
1644 │             </div>
1645 │             <div class="news-card reveal">
1646 │                 <div class="news-img news-2"></div>
1647 │                 <div class="news-content">
1648 │                     <div class="news-date">10 de Junho, 2024</div>
1649 │                     <div class="news-title">Em manutenÃ§Ã£o</div>
1650 │                     <p>Em manutenÃ§Ã£o</p>
1651 │                 </div>
1652 │             </div>
1653 │             <div class="news-card reveal">
1654 │                 <div class="news-img news-3"></div>
1655 │                 <div class="news-content">
1656 │                     <div class="news-date">5 de Junho, 2024</div>
1657 │                     <div class="news-title">Em manutenÃ§Ã£o</div>
1658 │                     <p>Em manutenÃ§Ã£o</p>
1659 │                 </div>
1660 │             </div>
1661 │         </div>
1662 │     </section>
1663 │ 
1664 │     <section id="horarios" class="section">
1665 │         <h2 class="section-title reveal">Cronograma de Aulas</h2>
1666 │         <p class="section-subtitle reveal">Confira os horÃ¡rios das nossas aulas e escolha o melhor programa para vocÃª</p>
1667 │         
1668 │         <div class="schedule-container reveal">
1669 │             <div class="schedule-wrapper">
1670 │                 <table class="schedule-table">
1671 │                     <thead>
1672 │                         <tr>
1673 │                             <th class="time-column">HorÃ¡rio</th>
1674 │                             <th>Segunda</th>
1675 │                             <th>TerÃ§a</th>
1676 │                             <th>Quarta</th>
1677 │                             <th>Quinta</th>
1678 │                             <th>Sexta</th>
1679 │                             <th>SÃ¡bado</th>
1680 │                         </tr>
1681 │                     </thead>
1682 │                     <tbody>
1683 │                         <tr>
1684 │                             <td class="time-cell">07:00</td>
1685 │                             <td class="class-cell gb1">GB1<br><span class="instructor">Adulto Iniciantes</span></td>
1686 │                             <td class="class-cell gb1">GB1<br><span class="instructor">Adulto Iniciantes</span></td>
1687 │                             <td class="class-cell gb1">GB1<br><span class="instructor">Adulto Iniciantes</span></td>
1688 │                             <td class="class-cell gb1">GB1<br><span class="instructor">Adulto Iniciantes</span></td>
1689 │                             <td class="class-cell gb1">GB1<br><span class="instructor">Adulto Iniciantes</span></td>
1690 │                             <td class="class-cell gb-kids">GB Kids<br><span class="instructor">3-7 anos</span></td>
1691 │                         </tr>
1692 │                         <tr>
1693 │                             <td class="time-cell">08:00</td>
1694 │                             <td class="class-cell gb1">GB1<br><span class="instructor">Adulto Iniciantes</span></td>
1695 │                             <td class="class-cell gb1">GB1<br><span class="instructor">Adulto Iniciantes</span></td>
1696 │                             <td class="class-cell gb1">GB1<br><span class="instructor">Adulto Iniciantes</span></td>
1697 │                             <td class="class-cell gb1">GB1<br><span class="instructor">Adulto Iniciantes</span></td>
1698 │                             <td class="class-cell gb1">GB1<br><span class="instructor">Adulto Iniciantes</span></td>
1699 │                             <td class="class-cell gb-kids">GB Kids<br><span class="instructor">3-7 anos</span></td>
1700 │                         </tr>
1701 │                         <tr>
1702 │                             <td class="time-cell">09:00</td>
1703 │                             <td class="class-cell gb-kids">GB Kids<br><span class="instructor">3-7 anos</span></td>
1704 │                             <td class="class-cell gb-kids">GB Kids<br><span class="instructor">3-7 anos</span></td>
1705 │                             <td class="class-cell gb-kids">GB Kids<br><span class="instructor">3-7 anos</span></td>
1706 │                             <td class="class-cell gb-kids">GB Kids<br><span class="instructor">3-7 anos</span></td>
1707 │                             <td class="class-cell gb-kids">GB Kids<br><span class="instructor">3-7 anos</span></td>
1708 │                             <td class="class-cell gb-kids">GB Kids<br><span class="instructor">3-7 anos</span></td>
1709 │                         </tr>
1710 │                         <tr>
1711 │                             <td class="time-cell">17:00</td>
1712 │                             <td class="class-cell gb-kids">GB Kids<br><span class="instructor">3-7 anos</span></td>
1713 │                             <td class="class-cell gb-kids">GB Kids<br><span class="instructor">3-7 anos</span></td>
1714 │                             <td class="class-cell gb-kids">GB Kids<br><span class="instructor">3-7 anos</span></td>
1715 │                             <td class="class-cell gb-kids">GB Kids<br><span class="instructor">3-7 anos</span></td>
1716 │                             <td class="class-cell gb-kids">GB Kids NO GI<br><span class="instructor">3-7 anos</span></td>
1717 │                             <td class="class-cell gb-kids">GB Kids<br><span class="instructor">3-7 anos</span></td>
1718 │                         </tr>
1719 │                         <tr>
1720 │                             <td class="time-cell">18:00</td>
1721 │                             <td class="class-cell gb1">GB K 2<br><span class="instructor">8-13 anos</span></td>
1722 │                             <td class="class-cell gb1">GB K 2<br><span class="instructor">8-13 anos</span></td>
1723 │                             <td class="class-cell gb1">GB K 2<br><span class="instructor">8-13 anos</span></td>
1724 │                             <td class="class-cell gb1">GB K 2<br><span class="instructor">8-13 anos</span></td>
1725 │                             <td class="class-cell gb1">GB K 2<br><span class="instructor">8-13 anos</span></td>
1726 │                             <td class="class-cell gb-kids">GB Kids<br><span class="instructor">3-7 anos</span></td>
1727 │                         </tr>
1728 │                         <tr>
1729 │                             <td class="time-cell">19:00</td>
1730 │                             <td class="class-cell gb2">GB1 + GB2<br><span class="instructor">Adultos</span></td>
1731 │                             <td class="class-cell gb2">GB1 + GB2<br><span class="instructor">Adultos</span></td>
1732 │                             <td class="class-cell gb2">GB1 + GB2<br><span class="instructor">Adultos</span></td>
1733 │                             <td class="class-cell gb2">GB1 + GB2<br><span class="instructor">Adultos</span></td>
1734 │                             <td class="class-cell gb2">GB1 + GB2<br><span class="instructor">Adultos</span></td>
1735 │                             <td class="class-cell open-mat">Open Mat<br><span class="instructor">Treino Livre</span></td>
1736 │                         </tr>
1737 │                     </tbody>
1738 │                 </table>
1739 │             </div>
1740 │             
1741 │             <div class="schedule-legend">
1742 │                 <h3>Legenda dos Programas</h3>
1743 │                 <div class="legend-grid">
1744 │                     <div class="legend-item">
1745 │                         <span class="legend-color gb1"></span>
1746 │                         <span>GB1 - Adultos Iniciantes</span>
1747 │                     </div>
1748 │                     <div class="legend-item">
1749 │                         <span class="legend-color gb2"></span>
1750 │                         <span>GB2 - Adultos (3+ graus faixa branca)</span>
1751 │                     </div>
1752 │                     <div class="legend-item">
1753 │                         <span class="legend-color gb-kids"></span>
1754 │                         <span>GB Kids - Infantil (3-7 anos)</span>
1755 │                     </div>
1756 │                     <div class="legend-item">
1757 │                         <span class="legend-color gb1"></span>
1758 │                         <span>GB K2 - Infanto Juvenil (8-13 anos)</span>
1759 │                     </div>
1760 │                     <div class="legend-item">
1761 │                         <span class="legend-color gb2"></span>
1762 │                         <span>GI - Com Kimono</span>
1763 │                     </div>
1764 │                     <div class="legend-item">
1765 │                         <span class="legend-color gb-kids"></span>
1766 │                         <span>NO GI - Sem Kimono</span>
1767 │                     </div>
1768 │                     <div class="legend-item">
1769 │                         <span class="legend-color open-mat"></span>
1770 │                         <span>Open Mat - Treino Livre</span>
1771 │                     </div>
1772 │                 </div>
1773 │             </div>
1774 │         </div>
1775 │     </section>
1776 │ 
1777 │     <section id="contato" class="contact-section">
1778 │         <div class="contact-content">
1779 │             <h2 class="section-title reveal">Entre em Contato</h2>
1780 │             <p class="section-subtitle reveal">Comece sua jornada no Jiu-Jitsu hoje mesmo e transforme sua vida</p>
1781 │             
1782 │             <div class="contact-grid">
1783 │                 <div class="contact-info reveal">
1784 │                     <h3>InformaÃ§Ãµes de Contato</h3>
1785 │                     <p>ðŸ“ <strong>EndereÃ§o:</strong> Av. Atroaris, quadra 20, n. 129, Conj. Renato Souza, R. Cap. Braule Pinto - Cidade Nova, Manaus - AM</p>
1786 │                     <p>ðŸ“ž <strong>Telefone:</strong> 
1787 │                         <a href="https://wa.me/559281136742?text=OlÃ¡!%20Vi%20o%20nÃºmero%20no%20site%20da%20Gracie%20Barra%20Cidade%20Nova." 
1788 │                         target="_blank" 
1789 │                         class="phone-link">
1790 │                         (92) 98113-6742
1791 │                         </a>
1792 │                     </p>         
1793 │                     <p>ðŸ“ž <strong>Telefone:</strong> 
1794 │                         <a href="https://wa.me/559281501174?text=OlÃ¡!%20Vi%20o%20nÃºmero%20no%20site%20da%20Gracie%20Barra%20Cidade%20Nova." 
1795 │                         target="_blank" 
1796 │                         class="phone-link">
1797 │                            (92) 98150-1174
1798 │                         </a>
1799 │                     </p>           
1800 │                     <p>ðŸ“§ <strong>Email:</strong> email@graciebarra.com.br</p>
1801 │                     <div class="social-links">
1802 │                     <a href="https://www.instagram.com/gb_cidadenova/" target="_blank" title="Instagram">
1803 │                         <i class="bi bi-instagram"></i>
1804 │                     </a>                        
1805 │                     <a href="#" title="Facebook">
1806 │                         <i class="bi bi-facebook"></i>
1807 │                     </a>                        
1808 │                     <a href="https://wa.me/559281136742" title="WhatsApp">
1809 │                         <i class="bi bi-whatsapp"></i>
1810 │                     </a>                    
1811 │                 </div>
1812 │                 </div>
1813 │                 <div class="contact-info reveal">
1814 │                     <h3>HorÃ¡rios de Funcionamento</h3>
1815 │                     <p><strong>Segunda a Sexta:</strong> 06:00 - 22:00</p>
1816 │                     <p><strong>SÃ¡bado:</strong> 08:00 - 16:00</p>
1817 │                     <p><strong>Domingo:</strong> Fechado</p>
1818 │                     <br>
1819 │                     <a href="https://wa.me/559281136742?text=OlÃ¡!%20Gostaria%20de%20agendar%20uma%20aula%20experimental%20na%20Gracie%20Barra%20Cidade%20Nova.%20Poderia%20me%20ajudar%20com%20mais%20informaÃ§Ãµes?" target="_blank" class="cta-button">Agendar Aula Experimental</a>
1820 │                 </div>  
1821 │             </div>
1822 │         </div>
1823 │     </section>
1824 │ 
1825 │     <!-- Modal Professor Victor -->
1826 │     <div id="victorModal" class="modal">
1827 │         <div class="modal-content">
1828 │             <span class="close">&times;</span>
1829 │             <h3>Professor Victor CÃ©sar</h3>
1830 │             <div class="rank">Faixa Preta 2Âº Grau â€¢ Gracie Barra Cidade Nova</div>
1831 │             
1832 │             <p>Victor CÃ©sar Ã© faixa preta de Jiu-Jitsu 2Âº grau desde 2018, com mais de uma dÃ©cada de experiÃªncia dedicada ao ensino da arte suave, especialmente com crianÃ§as. Formado em EducaÃ§Ã£o FÃ­sica desde 2016, alia conhecimento tÃ©cnico e pedagÃ³gico para oferecer aulas seguras, divertidas e eficazes para todas as idades.</p>
1833 │             
1834 │             <p>Sua trajetÃ³ria no Jiu-Jitsu Ã© marcada por conquistas expressivas e vivÃªncias internacionais. Atuou como professor por dois anos nos Estados Unidos, onde tambÃ©m competiu e obteve excelentes resultados.</p>
1835 │             
1836 │             <p><strong>Principais TÃ­tulos:</strong></p>
1837 │             <ul>
1838 │                 <li>BicampeÃ£o Brasileiro</li>
1839 │                 <li>3Âº lugar no Campeonato Brasileiro</li>
1840 │                 <li>3Âº lugar no American National</li>
1841 │                 <li>4Ã— CampeÃ£o Amazonense</li>
1842 │                 <li>CampeÃ£o da Seletiva de Abu Dhabi</li>
1843 │                 <li>5Ã— CampeÃ£o do Manaus Open</li>
1844 │                 <li>Vice-campeÃ£o no Charlotte Open (EUA)</li>
1845 │                 <li>Vice-campeÃ£o no Boise Open (EUA)</li>
1846 │                 <li>Vice-campeÃ£o no Oklahoma Open (EUA)</li>
1847 │                 <li>3Âº lugar no Atlanta Open (EUA)</li>
1848 │             </ul>
1849 │             
1850 │             <p>Como Professor infantil da Gracie Barra Cidade Nova, o professor Victor CÃ©sar acredita que o Jiu-Jitsu vai muito alÃ©m das vitÃ³rias no tatame: Ã© uma ferramenta poderosa de formaÃ§Ã£o de carÃ¡ter, disciplina e autoconfianÃ§a. Seu compromisso Ã© oferecer um ambiente acolhedor, respeitoso e de alto nÃ­vel tÃ©cnico para todos os alunos.</p>
1851 │         </div>
1852 │     </div>
1853 │ 
1854 │     <!-- Modal Professor Ricardo -->
1855 │     <div id="ricardoModal" class="modal">
1856 │         <div class="modal-content">
1857 │             <span class="close">&times;</span>
1858 │             <h3>Professor Ricardo Pires</h3>
1859 │             <div class="rank">Faixa Preta 2Âº Grau â€¢ Gracie Barra Cidade Nova</div>
1860 │             
1861 │             <p>Professor Ricardo Pires, 38 anos, faixa preta 2Â° grau. Iniciou sua trajetÃ³ria na arte suave aos 15 anos de idade e, desde entÃ£o, vem construindo uma carreira marcada por dedicaÃ§Ã£o, disciplina e paixÃ£o pelo tatame.</p>
1862 │             
1863 │             <p><strong>FormaÃ§Ã£o e GraduaÃ§Ã£o:</strong></p>
1864 │             <p>Em 2016, apÃ³s anos de intenso aperfeiÃ§oamento tÃ©cnico e vivÃªncia no esporte, foi graduado faixa preta pelo renomado Sensei Henrique Machado, referÃªncia nacional e internacional na modalidade. Sua formaÃ§Ã£o Ã© fruto de uma trajetÃ³ria sÃ³lida, pautada em treinos rigorosos, estudo contÃ­nuo e uma profunda compreensÃ£o dos valores do jiu-jitsu.</p>
1865 │             
1866 │             <p><strong>ExperiÃªncia no Ensino:</strong></p>
1867 │             <p>Desde 2013, Ricardo Pires atua como professor, acumulando 12 anos de experiÃªncia no ensino da arte marcial. Ao longo desse perÃ­odo, tem formado diversos praticantes, promovendo nÃ£o apenas o desenvolvimento tÃ©cnico de seus alunos, mas tambÃ©m valores como respeito, resiliÃªncia e autoconfianÃ§a.</p>
1868 │             
1869 │             <p><strong>TrajetÃ³ria Competitiva:</strong></p>
1870 │             <p>Com mais de duas dÃ©cadas de vivÃªncia em competiÃ§Ãµes, sua histÃ³ria Ã© tambÃ©m marcada por conquistas dentro dos tatames, levando consigo a experiÃªncia de quem conhece profundamente os desafios e aprendizados que o esporte oferece.</p>
1871 │             
1872 │             <p><strong>Perfil Profissional:</strong></p>
1873 │             <p>Apesar de ser um servidor de carreira no serviÃ§o pÃºblico, Ricardo Pires mantÃ©m sua dedicaÃ§Ã£o ao jiu-jitsu, conciliando suas funÃ§Ãµes com o constante estudo e o ensino da arte marcial. Seu compromisso vai alÃ©m da prÃ¡tica: Ã© um verdadeiro exemplo de lideranÃ§a e inspiraÃ§Ã£o para as novas geraÃ§Ãµes de praticantes.</p>
1874 │         </div>
1875 │     </div>
1876 │ 
1877 │     <footer class="footer">
1878 │         <p>&copy; 2024 Gracie Barra Cidade Nova. Todos os direitos reservados.</p>
1879 │         <p>Parte da rede mundial Gracie Barra - Jiu-Jitsu para Todos</p>
1880 │         <p style="margin-top:1rem;font-size:0.95em;">
1881 │             Desenvolvido por <a href="https://i9script.com" target="_blank" rel="noopener" style="color:#fff;text-decoration:underline;">i9Script</a>
1882 │         </p>
1883 │     </footer>
1884 │ 
1885 │     <button class="scroll-to-top" id="scrollToTop">â†‘</button>
1886 │ 
1887 │     <script>
1888 │         // Variables
1889 │         const header = document.getElementById('header');
1890 │         const mobileMenuBtn = document.getElementById('mobileMenuBtn');
1891 │         const mobileNav = document.getElementById('mobileNav');
1892 │         const scrollToTopBtn = document.getElementById('scrollToTop');
1893 │         const themeToggle = document.getElementById('themeToggle');
1894 │ 
1895 │         // Theme Management
1896 │         function toggleTheme() {
1897 │             const currentTheme = document.documentElement.getAttribute('data-theme');
1898 │             const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
1899 │             
1900 │             document.documentElement.setAttribute('data-theme', newTheme);
1901 │             localStorage.setItem('theme', newTheme);
1902 │             
1903 │             updateThemeToggle(newTheme);
1904 │         }
1905 │ 
1906 │         function updateThemeToggle(theme) {
1907 │             const themeIcon = document.getElementById('themeIcon');
1908 │             const themeText = document.getElementById('themeText');
1909 │             const mobileThemeIcon = document.getElementById('mobileThemeIcon');
1910 │             const mobileThemeText = document.getElementById('mobileThemeText');
1911 │             
1912 │             if (theme === 'dark') {
1913 │                 if (themeIcon) themeIcon.textContent = 'â˜€ï¸';
1914 │                 if (themeText) themeText.textContent = 'Claro';
1915 │                 if (mobileThemeIcon) mobileThemeIcon.textContent = 'â˜€ï¸';
1916 │                 if (mobileThemeText) mobileThemeText.textContent = 'Claro';
1917 │             } else {
1918 │                 if (themeIcon) themeIcon.textContent = 'ðŸŒ™';
1919 │                 if (themeText) themeText.textContent = 'Escuro';
1920 │                 if (mobileThemeIcon) mobileThemeIcon.textContent = 'ðŸŒ™';
1921 │                 if (mobileThemeText) mobileThemeText.textContent = 'Escuro';
1922 │             }
1923 │         }
1924 │ 
1925 │         // Initialize theme
1926 │         function initTheme() {
1927 │             const savedTheme = localStorage.getItem('theme');
1928 │             const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
1929 │             const initialTheme = savedTheme || (systemPrefersDark ? 'dark' : 'light');
1930 │             
1931 │             document.documentElement.setAttribute('data-theme', initialTheme);
1932 │             updateThemeToggle(initialTheme);
1933 │         }
1934 │ 
1935 │         // Theme toggle event listener
1936 │         if (themeToggle) {
1937 │             themeToggle.addEventListener('click', toggleTheme);
1938 │         }
1939 │ 
1940 │         // Initialize theme on page load
1941 │         initTheme();
1942 │ 
1943 │         // Scroll to top button visibility
1944 │         window.addEventListener('scroll', () => {
1945 │             if (scrollToTopBtn) {
1946 │                 if (window.scrollY > 300) {
1947 │                     scrollToTopBtn.style.display = 'block';
1948 │                 } else {
1949 │                     scrollToTopBtn.style.display = 'none';
1950 │                 }
1951 │             }
1952 │         });
1953 │ 
1954 │         // Mobile menu toggle
1955 │         if (mobileMenuBtn && mobileNav) {
1956 │             mobileMenuBtn.addEventListener('click', () => {
1957 │                 mobileNav.classList.toggle('active');
1958 │                 const isActive = mobileNav.classList.contains('active');
1959 │                 mobileMenuBtn.textContent = isActive ? 'âœ•' : 'â˜°';
1960 │                 mobileMenuBtn.style.transform = isActive ? 'rotate(180deg)' : 'rotate(0deg)';
1961 │             });
1962 │         }
1963 │ 
1964 │         // Close mobile menu when clicking on a link
1965 │         if (mobileNav) {
1966 │             mobileNav.addEventListener('click', (e) => {
1967 │                 if (e.target.tagName === 'A') {
1968 │                     mobileNav.classList.remove('active');
1969 │                     if (mobileMenuBtn) {
1970 │                         mobileMenuBtn.textContent = 'â˜°';
1971 │                         mobileMenuBtn.style.transform = 'rotate(0deg)';
1972 │                     }
1973 │                 }
1974 │             });
1975 │         }
1976 │ 
1977 │         // Close mobile menu when clicking outside
1978 │         document.addEventListener('click', (e) => {
1979 │             if (mobileNav && mobileMenuBtn && !mobileNav.contains(e.target) && !mobileMenuBtn.contains(e.target)) {
1980 │                 mobileNav.classList.remove('active');
1981 │                 mobileMenuBtn.textContent = 'â˜°';
1982 │                 mobileMenuBtn.style.transform = 'rotate(0deg)';
1983 │             }
1984 │         });
1985 │ 
1986 │         // Smooth scroll for anchor links
1987 │         document.querySelectorAll('a[href^="#"]').forEach(anchor => {
1988 │             anchor.addEventListener('click', function (e) {
1989 │                 e.preventDefault();
1990 │                 const target = document.querySelector(this.getAttribute('href'));
1991 │                 if (target) {
1992 │                     const targetPosition = target.offsetTop - 80; // Offset para header nÃ£o fixo
1993 │                     
1994 │                     window.scrollTo({
1995 │                         top: targetPosition,
1996 │                         behavior: 'smooth'
1997 │                     });
1998 │                 }
1999 │             });
2000 │         });
2001 │ 
2002 │         // Scroll to top function
2003 │         if (scrollToTopBtn) {
2004 │             scrollToTopBtn.addEventListener('click', () => {
2005 │                 window.scrollTo({
2006 │                     top: 0,
2007 │                     behavior: 'smooth'
2008 │                 });
2009 │             });
2010 │         }
2011 │ 
2012 │         // Scroll reveal animation
2013 │         const revealElements = document.querySelectorAll('.reveal');
2014 │         const revealObserver = new IntersectionObserver((entries) => {
2015 │             entries.forEach(entry => {
2016 │                 if (entry.isIntersecting) {
2017 │                     entry.target.classList.add('active');
2018 │                     revealObserver.unobserve(entry.target);
2019 │                 }
2020 │             });
2021 │         }, {
2022 │             threshold: 0.1,
2023 │             rootMargin: '0px 0px -50px 0px'
2024 │         });
2025 │ 
2026 │         revealElements.forEach(element => {
2027 │             revealObserver.observe(element);
2028 │         });
2029 │ 
2030 │         // Enhanced CTA button interaction
2031 │         document.querySelectorAll('.cta-button').forEach(button => {
2032 │             if (button) {
2033 │                 button.addEventListener('click', function(e) {
2034 │                     // Create ripple effect
2035 │                     const ripple = document.createElement('span');
2036 │                     const rect = this.getBoundingClientRect();
2037 │                     const size = Math.max(rect.width, rect.height);
2038 │                     const x = e.clientX - rect.left - size / 2;
2039 │                     const y = e.clientY - rect.top - size / 2;
2040 │                     
2041 │                     ripple.style.cssText = `
2042 │                         position: absolute;
2043 │                         width: ${size}px;
2044 │                         height: ${size}px;
2045 │                         left: ${x}px;
2046 │                         top: ${y}px;
2047 │                         background: rgba(255,255,255,0.3);
2048 │                         border-radius: 50%;
2049 │                         transform: scale(0);
2050 │                         animation: ripple 0.6s ease-out;
2051 │                         pointer-events: none;
2052 │                     `;
2053 │                     
2054 │                     this.appendChild(ripple);
2055 │                     
2056 │                     setTimeout(() => {
2057 │                         ripple.remove();
2058 │                     }, 600);
2059 │                 });
2060 │             }
2061 │         });
2062 │ 
2063 │         // Initialize animations
2064 │         document.addEventListener('DOMContentLoaded', () => {
2065 │             // Add fade-in class to hero content after page load
2066 │             setTimeout(() => {
2067 │                 const heroContent = document.querySelector('.hero-content');
2068 │                 if (heroContent) {
2069 │                     heroContent.classList.add('fade-in');
2070 │                 }
2071 │             }, 300);
2072 │         });
2073 │ 
2074 │         // Intersection Observer for section navigation highlighting
2075 │         const sections = document.querySelectorAll('section[id]');
2076 │         const navLinks = document.querySelectorAll('.nav-menu a[href^="#"]');
2077 │         
2078 │         if (sections.length > 0 && navLinks.length > 0) {
2079 │             const sectionObserver = new IntersectionObserver((entries) => {
2080 │                 entries.forEach(entry => {
2081 │                     if (entry.isIntersecting) {
2082 │                         const currentSection = entry.target.getAttribute('id');
2083 │                         navLinks.forEach(link => {
2084 │                             link.classList.remove('active');
2085 │                             if (link.getAttribute('href') === `#${currentSection}`) {
2086 │                                 link.classList.add('active');
2087 │                             }
2088 │                         });
2089 │                     }
2090 │                 });
2091 │             }, {
2092 │                 threshold: 0.3,
2093 │                 rootMargin: '-100px 0px -100px 0px'
2094 │             });
2095 │ 
2096 │             sections.forEach(section => {
2097 │                 sectionObserver.observe(section);
2098 │             });
2099 │         }
2100 │ 
2101 │         // Accessibility improvements
2102 │         document.addEventListener('keydown', (e) => {
2103 │             if (e.key === 'Escape' && mobileNav && mobileNav.classList.contains('active')) {
2104 │                 mobileNav.classList.remove('active');
2105 │                 if (mobileMenuBtn) {
2106 │                     mobileMenuBtn.textContent = 'â˜°';
2107 │                     mobileMenuBtn.style.transform = 'rotate(0deg)';
2108 │                 }
2109 │             }
2110 │         });
2111 │ 
2112 │         // Focus management for mobile menu
2113 │         if (mobileMenuBtn && mobileNav) {
2114 │             mobileMenuBtn.addEventListener('click', () => {
2115 │                 const isActive = mobileNav.classList.contains('active');
2116 │                 if (isActive) {
2117 │                     const firstLink = mobileNav.querySelector('a');
2118 │                     if (firstLink) firstLink.focus();
2119 │                 }
2120 │             });
2121 │         }
2122 │ 
2123 │         // Performance optimization
2124 │         let ticking = false;
2125 │         function requestTick() {
2126 │             if (!ticking) {
2127 │                 requestAnimationFrame(() => {
2128 │                     ticking = false;
2129 │                 });
2130 │                 ticking = true;
2131 │             }
2132 │         }
2133 │ 
2134 │         window.addEventListener('scroll', requestTick);
2135 │ 
2136 │         // Error handling
2137 │         window.addEventListener('error', (e) => {
2138 │             console.warn('Erro detectado:', e.message);
2139 │         });
2140 │ 
2141 │         // Page load optimization
2142 │         window.addEventListener('load', () => {
2143 │             const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
2144 │             console.log('Tempo de carregamento:', loadTime + 'ms');
2145 │         });
2146 │ 
2147 │         // Lazy loading for background images
2148 │         const imageElements = document.querySelectorAll('.image-placeholder, .instructor-img, .news-img');
2149 │         
2150 │         const imageObserver = new IntersectionObserver((entries) => {
2151 │             entries.forEach(entry => {
2152 │                 if (entry.isIntersecting) {
2153 │                     entry.target.style.opacity = '1';
2154 │                     imageObserver.unobserve(entry.target);
2155 │                 }
2156 │             });
2157 │         });
2158 │ 
2159 │         imageElements.forEach(img => {
2160 │             img.style.opacity = '0.8';
2161 │             img.style.transition = 'opacity 0.5s ease';
2162 │             imageObserver.observe(img);
2163 │         });
2164 │ 
2165 │         // Add smooth transitions to all interactive elements
2166 │         document.querySelectorAll('.program-card, .benefit-item, .instructor-card, .news-card, .value-card').forEach(card => {
2167 │             card.addEventListener('mouseenter', function() {
2168 │                 this.style.transform = this.classList.contains('program-card') ? 'translateY(-12px) scale(1.02)' : 
2169 │                                      this.classList.contains('instructor-card') ? 'translateY(-15px)' :
2170 │                                      'translateY(-8px)';
2171 │             });
2172 │             
2173 │             card.addEventListener('mouseleave', function() {
2174 │                 this.style.transform = this.classList.contains('value-card') ? 'translateX(0)' : 'translateY(0) scale(1)';
2175 │             });
2176 │         });
2177 │ 
2178 │         // Responsive navigation adjustments
2179 │         function handleResize() {
2180 │             const navContainer = document.querySelector('.nav-container');
2181 │             const navWrapper = document.querySelector('.nav-wrapper');
2182 │             
2183 │             if (window.innerWidth <= 1024) {
2184 │                 navContainer.style.flexWrap = 'wrap';
2185 │                 if (navWrapper) {
2186 │                     navWrapper.style.width = '100%';
2187 │                     navWrapper.style.justifyContent = 'space-between';
2188 │                     navWrapper.style.marginTop = '1rem';
2189 │                 }
2190 │             } else {
2191 │                 navContainer.style.flexWrap = 'nowrap';
2192 │                 if (navWrapper) {
2193 │                     navWrapper.style.width = 'auto';
2194 │                     navWrapper.style.marginTop = '0';
2195 │                 }
2196 │             }
2197 │         }
2198 │ 
2199 │         window.addEventListener('resize', handleResize);
2200 │         handleResize(); // Call on load
2201 │ 
2202 │         // Enhanced theme toggle functionality
2203 │         function enhancedThemeToggle() {
2204 │             const currentTheme = document.documentElement.getAttribute('data-theme');
2205 │             const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
2206 │             
2207 │             // Add transition class
2208 │             document.body.classList.add('theme-transitioning');
2209 │             
2210 │             document.documentElement.setAttribute('data-theme', newTheme);
2211 │             localStorage.setItem('theme', newTheme);
2212 │             updateThemeToggle(newTheme);
2213 │             
2214 │             // Remove transition class after animation
2215 │             setTimeout(() => {
2216 │                 document.body.classList.remove('theme-transitioning');
2217 │             }, 300);
2218 │         }
2219 │ 
2220 │         // Replace the existing toggle function
2221 │         if (themeToggle) {
2222 │             themeToggle.removeEventListener('click', toggleTheme);
2223 │             themeToggle.addEventListener('click', enhancedThemeToggle);
2224 │         }
2225 │ 
2226 │         // Add CSS for theme transition
2227 │         const themeTransitionStyle = document.createElement('style');
2228 │         themeTransitionStyle.textContent = `
2229 │             .theme-transitioning * {
2230 │                 transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease !important;
2231 │             }
2232 │         `;
2233 │         document.head.appendChild(themeTransitionStyle);
2234 │ 
2235 │         // Theme toggle for mobile
2236 │         const mobileThemeToggle = document.getElementById('mobileThemeToggle');
2237 │         if (mobileThemeToggle) {
2238 │             mobileThemeToggle.addEventListener('click', toggleTheme);
2239 │         }
2240 │ 
2241 │         // Schedule table interactivity
2242 │         document.querySelectorAll('.class-cell:not(.closed)').forEach(cell => {
2243 │             cell.addEventListener('mouseenter', function() {
2244 │                 const className = this.textContent.split('\n')[0];
2245 │                 const instructor = this.querySelector('.instructor')?.textContent || '';
2246 │                 
2247 │                 // Create tooltip
2248 │                 const tooltip = document.createElement('div');
2249 │                 tooltip.className = 'schedule-tooltip';
2250 │                 tooltip.innerHTML = `
2251 │                     <strong>${className}</strong><br>
2252 │                     ${instructor}<br>
2253 │                     <small>Clique para mais informaÃ§Ãµes</small>
2254 │                 `;
2255 │                 
2256 │                 tooltip.style.cssText = `
2257 │                     position: absolute;
2258 │                     background: var(--card-background);
2259 │                     color: var(--text-primary);
2260 │                     padding: 0.8rem;
2261 │                     border-radius: 8px;
2262 │                     box-shadow: var(--shadow-strong);
2263 │                     border: 1px solid var(--border-color);
2264 │                     z-index: 1000;
2265 │                     font-size: 0.85rem;
2266 │                     line-height: 1.4;
2267 │                     max-width: 200px;
2268 │                     pointer-events: none;
2269 │                     opacity: 0;
2270 │                     transition: opacity 0.3s ease;
2271 │                 `;
2272 │                 
2273 │                 document.body.appendChild(tooltip);
2274 │                 
2275 │                 // Position tooltip
2276 │                 const rect = this.getBoundingClientRect();
2277 │                 tooltip.style.left = (rect.left + rect.width / 2 - tooltip.offsetWidth / 2) + 'px';
2278 │                 tooltip.style.top = (rect.top - tooltip.offsetHeight - 10) + 'px';
2279 │                 
2280 │                 // Show tooltip
2281 │                 setTimeout(() => tooltip.style.opacity = '1', 50);
2282 │                 
2283 │                 this.setAttribute('data-tooltip', 'true');
2284 │             });
2285 │             
2286 │             cell.addEventListener('mouseleave', function() {
2287 │                 document.querySelectorAll('.schedule-tooltip').forEach(tooltip => {
2288 │                     tooltip.style.opacity = '0';
2289 │                     setTimeout(() => {
2290 │                         if (tooltip.parentNode) {
2291 │                             tooltip.parentNode.removeChild(tooltip);
2292 │                         }
2293 │                     }, 300);
2294 │                 });
2295 │                 this.removeAttribute('data-tooltip');
2296 │             });
2297 │             
2298 │             // Click handler for more information
2299 │             cell.addEventListener('click', function() {
2300 │                 const className = this.textContent.split('\n')[0];
2301 │                 
2302 │                 // Scroll to programs section to show more info
2303 │                 if (className.includes('GB1') || className.includes('GB2') || className.includes('GB3') || 
2304 │                     className.includes('Kids') || className.includes('Little') || className.includes('Women')) {
2305 │                     const programsSection = document.getElementById('programas');
2306 │                     if (programsSection) {
2307 │                         programsSection.scrollIntoView({ 
2308 │                             behavior: 'smooth',
2309 │                             block: 'start'
2310 │                         });
2311 │                         
2312 │                         // Highlight the corresponding program card
2313 │                         setTimeout(() => {
2314 │                             const cards = document.querySelectorAll('.program-card');
2315 │                             cards.forEach(card => {
2316 │                                 if (className.includes('GB1') && card.textContent.includes('GB1')) {
2317 │                                     card.style.transform = 'translateY(-12px) scale(1.05)';
2318 │                                     card.style.boxShadow = '0 20px 50px rgba(220, 20, 60, 0.3)';
2319 │                                     setTimeout(() => {
2320 │                                         card.style.transform = '';
2321 │                                         card.style.boxShadow = '';
2322 │                                     }, 2000);
2323 │                                 } else if (className.includes('GB2') && card.textContent.includes('GB2')) {
2324 │                                     card.style.transform = 'translateY(-12px) scale(1.05)';
2325 │                                     card.style.boxShadow = '0 20px 50px rgba(44, 90, 160, 0.3)';
2326 │                                     setTimeout(() => {
2327 │                                         card.style.transform = '';
2328 │                                         card.style.boxShadow = '';
2329 │                                     }, 2000);
2330 │                                 } else if (className.includes('GB3') && card.textContent.includes('GB3')) {
2331 │                                     card.style.transform = 'translateY(-12px) scale(1.05)';
2332 │                                     card.style.boxShadow = '0 20px 50px rgba(124, 45, 18, 0.3)';
2333 │                                     setTimeout(() => {
2334 │                                         card.style.transform = '';
2335 │                                         card.style.boxShadow = '';
2336 │                                     }, 2000);
2337 │                                 } else if (className.includes('Little') && card.textContent.includes('Little')) {
2338 │                                     card.style.transform = 'translateY(-12px) scale(1.05)';
2339 │                                     card.style.boxShadow = '0 20px 50px rgba(202, 138, 4, 0.3)';
2340 │                                     setTimeout(() => {
2341 │                                         card.style.transform = '';
2342 │                                         card.style.boxShadow = '';
2343 │                                     }, 2000);
2344 │                                 } else if (className.includes('Kids') && card.textContent.includes('Junior')) {
2345 │                                     card.style.transform = 'translateY(-12px) scale(1.05)';
2346 │                                     card.style.boxShadow = '0 20px 50px rgba(22, 163, 74, 0.3)';
2347 │                                     setTimeout(() => {
2348 │                                         card.style.transform = '';
2349 │                                         card.style.boxShadow = '';
2350 │                                     }, 2000);
2351 │                                 } else if (className.includes('Women') && card.textContent.includes('Women')) {
2352 │                                     card.style.transform = 'translateY(-12px) scale(1.05)';
2353 │                                     card.style.boxShadow = '0 20px 50px rgba(168, 85, 247, 0.3)';
2354 │                                     setTimeout(() => {
2355 │                                         card.style.transform = '';
2356 │                                         card.style.boxShadow = '';
2357 │                                     }, 2000);
2358 │                                 }
2359 │                             });
2360 │                         }, 500);
2361 │                     }
2362 │                 }
2363 │             });
2364 │         });
2365 │ 
2366 │         // Smooth scroll enhancement for schedule section
2367 │         const scheduleLink = document.querySelector('a[href="#horarios"]');
2368 │         if (scheduleLink) {
2369 │             scheduleLink.addEventListener('click', function(e) {
2370 │                 e.preventDefault();
2371 │                 const scheduleSection = document.getElementById('horarios');
2372 │                 if (scheduleSection) {
2373 │                     scheduleSection.scrollIntoView({
2374 │                         behavior: 'smooth',
2375 │                         block: 'start'
2376 │                     });
2377 │                     
2378 │                     // Add a subtle animation to the schedule table
2379 │                     setTimeout(() => {
2380 │                         const scheduleTable = document.querySelector('.schedule-table');
2381 │                         if (scheduleTable) {
2382 │                             scheduleTable.style.transform = 'scale(1.02)';
2383 │                             setTimeout(() => {
2384 │                                 scheduleTable.style.transform = 'scale(1)';
2385 │                             }, 300);
2386 │                         }
2387 │                     }, 500);
2388 │                 }
2389 │             });
2390 │         }
2391 │ 
2392 │         // Modal functionality
2393 │         function openModal(instructor) {
2394 │             const modal = document.getElementById(instructor + 'Modal');
2395 │             if (modal) {
2396 │                 modal.style.display = 'block';
2397 │                 document.body.style.overflow = 'hidden';
2398 │             }
2399 │         }
2400 │ 
2401 │         function closeModal(instructor) {
2402 │             const modal = document.getElementById(instructor + 'Modal');
2403 │             if (modal) {
2404 │                 modal.style.display = 'none';
2405 │                 document.body.style.overflow = 'auto';
2406 │             }
2407 │         }
2408 │ 
2409 │         // Close modal when clicking outside or on X
2410 │         document.addEventListener('DOMContentLoaded', function() {
2411 │             const modals = document.querySelectorAll('.modal');
2412 │             
2413 │             modals.forEach(modal => {
2414 │                 const closeBtn = modal.querySelector('.close');
2415 │                 
2416 │                 // Close on X click
2417 │                 if (closeBtn) {
2418 │                     closeBtn.addEventListener('click', function() {
2419 │                         modal.style.display = 'none';
2420 │                         document.body.style.overflow = 'auto';
2421 │                     });
2422 │                 }
2423 │                 
2424 │                 // Close on outside click
2425 │                 modal.addEventListener('click', function(e) {
2426 │                     if (e.target === modal) {
2427 │                         modal.style.display = 'none';
2428 │                         document.body.style.overflow = 'auto';
2429 │                     }
2430 │                 });
2431 │             });
2432 │             
2433 │             // Close on Escape key
2434 │             document.addEventListener('keydown', function(e) {
2435 │                 if (e.key === 'Escape') {
2436 │                     modals.forEach(modal => {
2437 │                         if (modal.style.display === 'block') {
2438 │                             modal.style.display = 'none';
2439 │                             document.body.style.overflow = 'auto';
2440 │                         }
2441 │                     });
2442 │                 }
2443 │             });
2444 │         });
2445 │     </script>
2446 │ </body>
2447 │ </html>

═══════════════════════════════════════════════════════════════
ARQUIVO: public\package.json
Tamanho: 0.5KB
Modificado: 06/20/2025 00:35:30
═══════════════════════════════════════════════════════════════
   1 │ {
   2 │   "name": "gracie-barra-cidade-nova",
   3 │   "version": "1.0.0",
   4 │   "description": "Site oficial da Gracie Barra Cidade Nova - Jiu-Jitsu para Todos",
   5 │   "main": "index.html",
   6 │   "scripts": {
   7 │     "start": "npx serve .",
   8 │     "build": "echo 'Build complete - static site'"
   9 │   },
  10 │   "keywords": [
  11 │     "jiu-jitsu",
  12 │     "gracie-barra",
  13 │     "artes-marciais",
  14 │     "manaus",
  15 │     "cidade-nova"
  16 │   ],
  17 │   "author": "Gracie Barra Cidade Nova",
  18 │   "license": "MIT",
  19 │   "devDependencies": {
  20 │     "serve": "^14.2.0"
  21 │   }
  22 │ }

═══════════════════════════════════════════════════════════════
ARQUIVO: public\admin\index.html
Tamanho: 13.31KB
Modificado: 07/07/2025 11:58:28
═══════════════════════════════════════════════════════════════
   1 │ <!DOCTYPE html>
   2 │ <html lang="pt-BR">
   3 │ <head>
   4 │     <meta charset="UTF-8">
   5 │     <meta name="viewport" content="width=device-width, initial-scale=1.0">
   6 │     <title>CMS Admin - Gracie Barra Cidade Nova</title>
   7 │     
   8 │     <!-- Favicon -->
   9 │     <link rel="icon" type="image/png" href="../assets/images/gb_logo.png">
  10 │     
  11 │     <!-- Bootstrap Icons -->
  12 │     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
  13 │     
  14 │     <!-- CSS do Admin -->
  15 │     <link rel="stylesheet" href="css/admin.css">
  16 │ </head>
  17 │ 
  18 │ <body>
  19 │     <!-- ===== LOGIN SECTION ===== -->
  20 │     <div id="loginSection" class="login-container">
  21 │         <div class="login-box">
  22 │             <div class="login-logo">
  23 │                 <img src="../assets/images/gb_logo.png" alt="Gracie Barra Logo" onerror="this.style.display='none'">
  24 │             </div>
  25 │             <h2 class="login-title">CMS Admin - Gracie Barra</h2>
  26 │             
  27 │             <div id="errorMessage" class="error-message">
  28 │                 UsuÃ¡rio ou senha incorretos
  29 │             </div>
  30 │             
  31 │             <form id="loginForm">
  32 │                 <div class="form-group">
  33 │                     <label for="username">UsuÃ¡rio</label>
  34 │                     <input type="text" id="username" class="form-control" required autocomplete="username">
  35 │                 </div>
  36 │                 
  37 │                 <div class="form-group">
  38 │                     <label for="password">Senha</label>
  39 │                     <input type="password" id="password" class="form-control" required autocomplete="current-password">
  40 │                 </div>
  41 │                 
  42 │                 <div class="form-group">
  43 │                     <label class="checkbox-label">
  44 │                         <input type="checkbox" id="rememberMe"> Lembrar-me
  45 │                     </label>
  46 │                 </div>
  47 │                 
  48 │                 <button type="submit" class="btn-login" id="loginBtn">
  49 │                     <span class="btn-text">Entrar</span>
  50 │                     <span class="btn-loading" style="display: none;">
  51 │                         <i class="bi bi-arrow-clockwise spinning"></i> Entrando...
  52 │                     </span>
  53 │                 </button>
  54 │             </form>
  55 │             
  56 │             <div class="login-help">
  57 │                 <p><strong>UsuÃ¡rios de teste:</strong></p>
  58 │                 <small>Admin: admin / password123<br>
  59 │                 Editor: jonasgb / password123</small>
  60 │             </div>
  61 │         </div>
  62 │     </div>
  63 │ 
  64 │     <!-- ===== CMS ADMIN SECTION ===== -->
  65 │     <div id="cmsSection" class="cms-container">
  66 │         <!-- Header -->
  67 │         <header class="cms-header">
  68 │             <div class="cms-logo">
  69 │                 <img src="../assets/images/gb_logo.png" alt="GB Logo" class="cms-logo-img">
  70 │                 <div class="cms-title">
  71 │                     <h1>CMS Admin</h1>
  72 │                     <span>Gracie Barra Cidade Nova</span>
  73 │                 </div>
  74 │             </div>
  75 │             
  76 │             <div class="cms-nav">
  77 │                 <div class="user-info">
  78 │                     <div class="user-avatar" id="userAvatar">A</div>
  79 │                     <div class="user-details">
  80 │                         <div class="user-name" id="userName">Admin</div>
  81 │                         <div class="user-role" id="userRole">Administrador</div>
  82 │                     </div>
  83 │                 </div>
  84 │                 
  85 │                 <button class="btn btn-secondary" id="previewBtn">
  86 │                     <i class="bi bi-eye"></i> Visualizar Site
  87 │                 </button>
  88 │                 
  89 │                 <button class="btn btn-primary" id="saveAllBtn">
  90 │                     <i class="bi bi-cloud-arrow-up"></i> Salvar Tudo
  91 │                 </button>
  92 │                 
  93 │                 <div class="dropdown">
  94 │                     <button class="btn btn-secondary dropdown-toggle" id="userMenuBtn">
  95 │                         <i class="bi bi-person-circle"></i>
  96 │                     </button>
  97 │                     <div class="dropdown-menu" id="userMenu">
  98 │                         <a href="#" id="profileBtn"><i class="bi bi-person"></i> Perfil</a>
  99 │                         <a href="#" id="settingsBtn"><i class="bi bi-gear"></i> ConfiguraÃ§Ãµes</a>
 100 │                         <hr>
 101 │                         <a href="#" id="logoutBtn"><i class="bi bi-box-arrow-right"></i> Sair</a>
 102 │                     </div>
 103 │                 </div>
 104 │             </div>
 105 │         </header>
 106 │ 
 107 │         <!-- Main Content -->
 108 │         <div class="cms-main">
 109 │             <!-- Sidebar -->
 110 │             <aside class="cms-sidebar">
 111 │                 <nav class="sidebar-nav">
 112 │                     <!-- Dashboard -->
 113 │                     <div class="sidebar-section">
 114 │                         <div class="sidebar-title">
 115 │                             <i class="bi bi-speedometer2"></i> Dashboard
 116 │                         </div>
 117 │                         <div class="sidebar-item active" data-section="dashboard">
 118 │                             <i class="bi bi-graph-up"></i>
 119 │                             <span>VisÃ£o Geral</span>
 120 │                         </div>
 121 │                     </div>
 122 │ 
 123 │                     <!-- ConteÃºdo do Site -->
 124 │                     <div class="sidebar-section">
 125 │                         <div class="sidebar-title">
 126 │                             <i class="bi bi-file-text"></i> ConteÃºdo do Site
 127 │                         </div>
 128 │                         <div class="sidebar-item" data-section="header">
 129 │                             <i class="bi bi-layout-text-window"></i>
 130 │                             <span>Header & Logo</span>
 131 │                         </div>
 132 │                         <div class="sidebar-item" data-section="hero">
 133 │                             <i class="bi bi-star-fill"></i>
 134 │                             <span>SeÃ§Ã£o Principal</span>
 135 │                         </div>
 136 │                         <div class="sidebar-item" data-section="about">
 137 │                             <i class="bi bi-info-circle"></i>
 138 │                             <span>Sobre NÃ³s</span>
 139 │                         </div>
 140 │                         <div class="sidebar-item" data-section="programs">
 141 │                             <i class="bi bi-grid-3x3"></i>
 142 │                             <span>Programas</span>
 143 │                         </div>
 144 │                         <div class="sidebar-item" data-section="benefits">
 145 │                             <i class="bi bi-heart-fill"></i>
 146 │                             <span>BenefÃ­cios</span>
 147 │                         </div>
 148 │                         <div class="sidebar-item" data-section="instructors">
 149 │                             <i class="bi bi-people-fill"></i>
 150 │                             <span>Professores</span>
 151 │                         </div>
 152 │                         <div class="sidebar-item" data-section="schedule">
 153 │                             <i class="bi bi-calendar3"></i>
 154 │                             <span>HorÃ¡rios</span>
 155 │                         </div>
 156 │                         <div class="sidebar-item" data-section="contact">
 157 │                             <i class="bi bi-telephone-fill"></i>
 158 │                             <span>Contato</span>
 159 │                         </div>
 160 │                         <div class="sidebar-item" data-section="footer">
 161 │                             <i class="bi bi-layout-text-window-reverse"></i>
 162 │                             <span>RodapÃ©</span>
 163 │                         </div>
 164 │                     </div>
 165 │ 
 166 │                     <!-- MÃ­dia -->
 167 │                     <div class="sidebar-section">
 168 │                         <div class="sidebar-title">
 169 │                             <i class="bi bi-images"></i> MÃ­dia
 170 │                         </div>
 171 │                         <div class="sidebar-item" data-section="media">
 172 │                             <i class="bi bi-folder2-open"></i>
 173 │                             <span>Gerenciar Arquivos</span>
 174 │                         </div>
 175 │                         <div class="sidebar-item" data-section="gallery">
 176 │                             <i class="bi bi-collection"></i>
 177 │                             <span>Galeria de Fotos</span>
 178 │                         </div>
 179 │                     </div>
 180 │ 
 181 │                     <!-- Sistema -->
 182 │                     <div class="sidebar-section">
 183 │                         <div class="sidebar-title">
 184 │                             <i class="bi bi-gear-fill"></i> Sistema
 185 │                         </div>
 186 │                         <div class="sidebar-item" data-section="settings">
 187 │                             <i class="bi bi-sliders"></i>
 188 │                             <span>ConfiguraÃ§Ãµes</span>
 189 │                         </div>
 190 │                         <div class="sidebar-item" data-section="users" data-permission="admin">
 191 │                             <i class="bi bi-person-gear"></i>
 192 │                             <span>UsuÃ¡rios</span>
 193 │                         </div>
 194 │                         <div class="sidebar-item" data-section="backup" data-permission="admin">
 195 │                             <i class="bi bi-archive"></i>
 196 │                             <span>Backup</span>
 197 │                         </div>
 198 │                         <div class="sidebar-item" data-section="logs" data-permission="admin">
 199 │                             <i class="bi bi-journal-text"></i>
 200 │                             <span>Logs</span>
 201 │                         </div>
 202 │                     </div>
 203 │                 </nav>
 204 │             </aside>
 205 │ 
 206 │             <!-- Content Area -->
 207 │             <main class="cms-content">
 208 │                 <!-- Status Messages -->
 209 │                 <div id="alertContainer" class="alert-container"></div>
 210 │ 
 211 │                 <!-- Dynamic Content -->
 212 │                 <div id="dynamicContent" class="content-area">
 213 │                     <!-- ConteÃºdo serÃ¡ carregado dinamicamente aqui -->
 214 │                     <div class="welcome-screen">
 215 │                         <div class="welcome-icon">
 216 │                             <i class="bi bi-speedometer2"></i>
 217 │                         </div>
 218 │                         <h2>Bem-vindo ao CMS</h2>
 219 │                         <p>Selecione uma opÃ§Ã£o na barra lateral para comeÃ§ar a editar o conteÃºdo do site.</p>
 220 │                         
 221 │                         <div class="quick-actions">
 222 │                             <button class="btn btn-primary" onclick="loadSection('hero')">
 223 │                                 <i class="bi bi-star"></i> Editar PÃ¡gina Principal
 224 │                             </button>
 225 │                             <button class="btn btn-secondary" onclick="loadSection('media')">
 226 │                                 <i class="bi bi-images"></i> Gerenciar Imagens
 227 │                             </button>
 228 │                             <button class="btn btn-secondary" onclick="window.open('../', '_blank')">
 229 │                                 <i class="bi bi-eye"></i> Ver Site
 230 │                             </button>
 231 │                         </div>
 232 │                     </div>
 233 │                 </div>
 234 │             </main>
 235 │         </div>
 236 │     </div>
 237 │ 
 238 │     <!-- ===== MODALS ===== -->
 239 │     
 240 │     <!-- Preview Modal -->
 241 │     <div id="previewModal" class="modal">
 242 │         <div class="modal-content modal-fullscreen">
 243 │             <div class="modal-header">
 244 │                 <h3><i class="bi bi-eye"></i> Preview do Site</h3>
 245 │                 <button class="btn-close" onclick="closePreview()">&times;</button>
 246 │             </div>
 247 │             <div class="modal-body">
 248 │                 <iframe id="previewFrame" src="" frameborder="0"></iframe>
 249 │             </div>
 250 │         </div>
 251 │     </div>
 252 │ 
 253 │     <!-- Upload Modal -->
 254 │     <div id="uploadModal" class="modal">
 255 │         <div class="modal-content">
 256 │             <div class="modal-header">
 257 │                 <h3><i class="bi bi-cloud-upload"></i> Upload de Arquivo</h3>
 258 │                 <button class="btn-close" onclick="closeUploadModal()">&times;</button>
 259 │             </div>
 260 │             <div class="modal-body">
 261 │                 <div class="upload-area" id="uploadArea">
 262 │                     <div class="upload-icon">
 263 │                         <i class="bi bi-cloud-upload"></i>
 264 │                     </div>
 265 │                     <h4>Arraste arquivos aqui ou clique para selecionar</h4>
 266 │                     <p>Tipos permitidos: JPG, PNG, GIF, WebP (mÃ¡x. 5MB)</p>
 267 │                     <input type="file" id="fileInput" multiple accept="image/*" style="display: none;">
 268 │                     <button class="btn btn-primary" onclick="document.getElementById('fileInput').click()">
 269 │                         Selecionar Arquivos
 270 │                     </button>
 271 │                 </div>
 272 │                 <div id="uploadProgress" style="display: none;">
 273 │                     <div class="progress-bar">
 274 │                         <div class="progress-fill" id="progressFill"></div>
 275 │                     </div>
 276 │                     <p id="progressText">Enviando...</p>
 277 │                 </div>
 278 │             </div>
 279 │         </div>
 280 │     </div>
 281 │ 
 282 │     <!-- Loading Overlay -->
 283 │     <div id="loadingOverlay" class="loading-overlay">
 284 │         <div class="loading-spinner">
 285 │             <i class="bi bi-arrow-clockwise spinning"></i>
 286 │             <p>Carregando...</p>
 287 │         </div>
 288 │     </div>
 289 │ 
 290 │     <!-- Scripts -->
 291 │     <script src="js/auth.js"></script>
 292 │     <script src="js/content.js"></script>
 293 │     <script src="js/files.js"></script>
 294 │     <script src="js/admin.js"></script>
 295 │     
 296 │     <script>
 297 │         // InicializaÃ§Ã£o do sistema
 298 │         document.addEventListener('DOMContentLoaded', function() {
 299 │             AdminSystem.init();
 300 │         });
 301 │     </script>
 302 │ </body>
 303 │ </html>

═══════════════════════════════════════════════════════════════
ARQUIVO: public\admin\css\admin.css
Tamanho: 18.5KB
Modificado: 07/07/2025 11:58:52
═══════════════════════════════════════════════════════════════
   1 │ /* ===== CSS VARIABLES ===== */
   2 │ :root {
   3 │     /* Brand Colors */
   4 │     --primary-red: #dc143c;
   5 │     --primary-blue: #2c5aa0;
   6 │     --dark-red: #b91c3c;
   7 │     --success-green: #10b981;
   8 │     --warning-orange: #f59e0b;
   9 │     --danger-red: #ef4444;
  10 │     
  11 │     /* Light Theme */
  12 │     --text-primary: #1f2937;
  13 │     --text-secondary: #6b7280;
  14 │     --text-light: #9ca3af;
  15 │     --background-primary: #ffffff;
  16 │     --background-secondary: #f9fafb;
  17 │     --background-tertiary: #f3f4f6;
  18 │     --card-background: #ffffff;
  19 │     --border-color: #e5e7eb;
  20 │     --shadow-light: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
  21 │     --shadow-medium: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  22 │     --shadow-strong: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  23 │     
  24 │     /* Layout */
  25 │     --border-radius: 8px;
  26 │     --border-radius-lg: 12px;
  27 │     --transition: all 0.2s ease-in-out;
  28 │     --sidebar-width: 280px;
  29 │     --header-height: 70px;
  30 │ }
  31 │ 
  32 │ /* ===== RESET & BASE ===== */
  33 │ * {
  34 │     margin: 0;
  35 │     padding: 0;
  36 │     box-sizing: border-box;
  37 │ }
  38 │ 
  39 │ body {
  40 │     font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  41 │     line-height: 1.6;
  42 │     color: var(--text-primary);
  43 │     background-color: var(--background-secondary);
  44 │     overflow-x: hidden;
  45 │ }
  46 │ 
  47 │ /* ===== UTILITIES ===== */
  48 │ .spinning {
  49 │     animation: spin 1s linear infinite;
  50 │ }
  51 │ 
  52 │ @keyframes spin {
  53 │     from { transform: rotate(0deg); }
  54 │     to { transform: rotate(360deg); }
  55 │ }
  56 │ 
  57 │ .fade-in {
  58 │     animation: fadeIn 0.3s ease-in-out;
  59 │ }
  60 │ 
  61 │ @keyframes fadeIn {
  62 │     from { opacity: 0; transform: translateY(10px); }
  63 │     to { opacity: 1; transform: translateY(0); }
  64 │ }
  65 │ 
  66 │ .slide-in {
  67 │     animation: slideIn 0.3s ease-in-out;
  68 │ }
  69 │ 
  70 │ @keyframes slideIn {
  71 │     from { opacity: 0; transform: translateX(-20px); }
  72 │     to { opacity: 1; transform: translateX(0); }
  73 │ }
  74 │ 
  75 │ /* ===== LOGIN STYLES ===== */
  76 │ .login-container {
  77 │     min-height: 100vh;
  78 │     display: flex;
  79 │     align-items: center;
  80 │     justify-content: center;
  81 │     background: linear-gradient(135deg, var(--primary-red) 0%, var(--primary-blue) 100%);
  82 │     padding: 2rem;
  83 │ }
  84 │ 
  85 │ .login-box {
  86 │     background: var(--card-background);
  87 │     padding: 3rem;
  88 │     border-radius: var(--border-radius-lg);
  89 │     box-shadow: var(--shadow-strong);
  90 │     width: 100%;
  91 │     max-width: 420px;
  92 │     text-align: center;
  93 │ }
  94 │ 
  95 │ .login-logo {
  96 │     margin-bottom: 2rem;
  97 │ }
  98 │ 
  99 │ .login-logo img {
 100 │     width: 80px;
 101 │     height: 80px;
 102 │     border-radius: 50%;
 103 │     border: 3px solid var(--primary-red);
 104 │     object-fit: cover;
 105 │ }
 106 │ 
 107 │ .login-title {
 108 │     color: var(--text-primary);
 109 │     margin-bottom: 2rem;
 110 │     font-size: 1.5rem;
 111 │     font-weight: 600;
 112 │ }
 113 │ 
 114 │ .form-group {
 115 │     margin-bottom: 1.5rem;
 116 │     text-align: left;
 117 │ }
 118 │ 
 119 │ .form-group label {
 120 │     display: block;
 121 │     margin-bottom: 0.5rem;
 122 │     color: var(--text-secondary);
 123 │     font-weight: 500;
 124 │     font-size: 0.9rem;
 125 │ }
 126 │ 
 127 │ .form-control {
 128 │     width: 100%;
 129 │     padding: 0.875rem 1rem;
 130 │     border: 2px solid var(--border-color);
 131 │     border-radius: var(--border-radius);
 132 │     font-size: 1rem;
 133 │     transition: var(--transition);
 134 │     background: var(--background-primary);
 135 │     color: var(--text-primary);
 136 │ }
 137 │ 
 138 │ .form-control:focus {
 139 │     outline: none;
 140 │     border-color: var(--primary-red);
 141 │     box-shadow: 0 0 0 3px rgba(220, 20, 60, 0.1);
 142 │ }
 143 │ 
 144 │ .checkbox-label {
 145 │     display: flex;
 146 │     align-items: center;
 147 │     gap: 0.5rem;
 148 │     cursor: pointer;
 149 │     font-size: 0.9rem;
 150 │ }
 151 │ 
 152 │ .checkbox-label input[type="checkbox"] {
 153 │     width: auto;
 154 │ }
 155 │ 
 156 │ .btn-login {
 157 │     width: 100%;
 158 │     padding: 1rem;
 159 │     background: linear-gradient(135deg, var(--primary-red), var(--dark-red));
 160 │     color: white;
 161 │     border: none;
 162 │     border-radius: var(--border-radius);
 163 │     font-size: 1rem;
 164 │     font-weight: 600;
 165 │     cursor: pointer;
 166 │     transition: var(--transition);
 167 │     position: relative;
 168 │     overflow: hidden;
 169 │ }
 170 │ 
 171 │ .btn-login:hover:not(:disabled) {
 172 │     transform: translateY(-1px);
 173 │     box-shadow: 0 8px 25px rgba(220, 20, 60, 0.3);
 174 │ }
 175 │ 
 176 │ .btn-login:disabled {
 177 │     opacity: 0.7;
 178 │     cursor: not-allowed;
 179 │     transform: none;
 180 │ }
 181 │ 
 182 │ .btn-loading {
 183 │     display: flex;
 184 │     align-items: center;
 185 │     justify-content: center;
 186 │     gap: 0.5rem;
 187 │ }
 188 │ 
 189 │ .error-message {
 190 │     background: #fef2f2;
 191 │     color: #dc2626;
 192 │     padding: 0.875rem;
 193 │     border-radius: var(--border-radius);
 194 │     margin-bottom: 1rem;
 195 │     border: 1px solid #fecaca;
 196 │     font-size: 0.9rem;
 197 │     display: none;
 198 │ }
 199 │ 
 200 │ .login-help {
 201 │     margin-top: 2rem;
 202 │     padding-top: 1.5rem;
 203 │     border-top: 1px solid var(--border-color);
 204 │     font-size: 0.85rem;
 205 │     color: var(--text-light);
 206 │ }
 207 │ 
 208 │ /* ===== CMS INTERFACE ===== */
 209 │ .cms-container {
 210 │     display: none;
 211 │     min-height: 100vh;
 212 │     background: var(--background-secondary);
 213 │ }
 214 │ 
 215 │ /* ===== HEADER ===== */
 216 │ .cms-header {
 217 │     background: var(--card-background);
 218 │     border-bottom: 1px solid var(--border-color);
 219 │     padding: 0 2rem;
 220 │     height: var(--header-height);
 221 │     display: flex;
 222 │     justify-content: space-between;
 223 │     align-items: center;
 224 │     box-shadow: var(--shadow-light);
 225 │     position: sticky;
 226 │     top: 0;
 227 │     z-index: 1000;
 228 │ }
 229 │ 
 230 │ .cms-logo {
 231 │     display: flex;
 232 │     align-items: center;
 233 │     gap: 1rem;
 234 │ }
 235 │ 
 236 │ .cms-logo-img {
 237 │     width: 45px;
 238 │     height: 45px;
 239 │     border-radius: 8px;
 240 │     object-fit: cover;
 241 │ }
 242 │ 
 243 │ .cms-title h1 {
 244 │     font-size: 1.25rem;
 245 │     font-weight: 700;
 246 │     color: var(--text-primary);
 247 │     margin: 0;
 248 │ }
 249 │ 
 250 │ .cms-title span {
 251 │     font-size: 0.8rem;
 252 │     color: var(--text-secondary);
 253 │ }
 254 │ 
 255 │ .cms-nav {
 256 │     display: flex;
 257 │     align-items: center;
 258 │     gap: 1rem;
 259 │ }
 260 │ 
 261 │ .user-info {
 262 │     display: flex;
 263 │     align-items: center;
 264 │     gap: 0.75rem;
 265 │     padding: 0.5rem 1rem;
 266 │     background: var(--background-secondary);
 267 │     border-radius: 25px;
 268 │     border: 1px solid var(--border-color);
 269 │ }
 270 │ 
 271 │ .user-avatar {
 272 │     width: 36px;
 273 │     height: 36px;
 274 │     background: var(--primary-red);
 275 │     border-radius: 50%;
 276 │     display: flex;
 277 │     align-items: center;
 278 │     justify-content: center;
 279 │     color: white;
 280 │     font-weight: 600;
 281 │     font-size: 0.9rem;
 282 │ }
 283 │ 
 284 │ .user-details {
 285 │     display: flex;
 286 │     flex-direction: column;
 287 │     line-height: 1.2;
 288 │ }
 289 │ 
 290 │ .user-name {
 291 │     font-size: 0.9rem;
 292 │     font-weight: 600;
 293 │     color: var(--text-primary);
 294 │ }
 295 │ 
 296 │ .user-role {
 297 │     font-size: 0.75rem;
 298 │     color: var(--text-light);
 299 │ }
 300 │ 
 301 │ /* ===== BUTTONS ===== */
 302 │ .btn {
 303 │     display: inline-flex;
 304 │     align-items: center;
 305 │     gap: 0.5rem;
 306 │     padding: 0.625rem 1rem;
 307 │     border: 1px solid transparent;
 308 │     border-radius: var(--border-radius);
 309 │     font-size: 0.875rem;
 310 │     font-weight: 500;
 311 │     cursor: pointer;
 312 │     transition: var(--transition);
 313 │     text-decoration: none;
 314 │     white-space: nowrap;
 315 │ }
 316 │ 
 317 │ .btn-primary {
 318 │     background: var(--primary-red);
 319 │     color: white;
 320 │     border-color: var(--primary-red);
 321 │ }
 322 │ 
 323 │ .btn-primary:hover {
 324 │     background: var(--dark-red);
 325 │     border-color: var(--dark-red);
 326 │     transform: translateY(-1px);
 327 │     box-shadow: var(--shadow-medium);
 328 │ }
 329 │ 
 330 │ .btn-secondary {
 331 │     background: var(--background-primary);
 332 │     color: var(--text-secondary);
 333 │     border-color: var(--border-color);
 334 │ }
 335 │ 
 336 │ .btn-secondary:hover {
 337 │     background: var(--background-tertiary);
 338 │     color: var(--text-primary);
 339 │ }
 340 │ 
 341 │ .btn-success {
 342 │     background: var(--success-green);
 343 │     color: white;
 344 │     border-color: var(--success-green);
 345 │ }
 346 │ 
 347 │ .btn-success:hover {
 348 │     background: #059669;
 349 │     transform: translateY(-1px);
 350 │ }
 351 │ 
 352 │ .btn-close {
 353 │     background: none;
 354 │     border: none;
 355 │     font-size: 1.5rem;
 356 │     cursor: pointer;
 357 │     color: var(--text-light);
 358 │     padding: 0.25rem;
 359 │     border-radius: 4px;
 360 │     transition: var(--transition);
 361 │ }
 362 │ 
 363 │ .btn-close:hover {
 364 │     background: var(--background-tertiary);
 365 │     color: var(--text-primary);
 366 │ }
 367 │ 
 368 │ /* ===== DROPDOWN ===== */
 369 │ .dropdown {
 370 │     position: relative;
 371 │ }
 372 │ 
 373 │ .dropdown-toggle::after {
 374 │     content: '';
 375 │     display: inline-block;
 376 │     margin-left: 0.5rem;
 377 │     vertical-align: 0.125rem;
 378 │     border-top: 0.3rem solid;
 379 │     border-right: 0.3rem solid transparent;
 380 │     border-bottom: 0;
 381 │     border-left: 0.3rem solid transparent;
 382 │ }
 383 │ 
 384 │ .dropdown-menu {
 385 │     position: absolute;
 386 │     top: 100%;
 387 │     right: 0;
 388 │     z-index: 1000;
 389 │     display: none;
 390 │     min-width: 180px;
 391 │     padding: 0.5rem 0;
 392 │     margin: 0.125rem 0 0;
 393 │     background: var(--card-background);
 394 │     border: 1px solid var(--border-color);
 395 │     border-radius: var(--border-radius);
 396 │     box-shadow: var(--shadow-medium);
 397 │ }
 398 │ 
 399 │ .dropdown-menu.show {
 400 │     display: block;
 401 │ }
 402 │ 
 403 │ .dropdown-menu a {
 404 │     display: flex;
 405 │     align-items: center;
 406 │     gap: 0.5rem;
 407 │     padding: 0.5rem 1rem;
 408 │     color: var(--text-secondary);
 409 │     text-decoration: none;
 410 │     font-size: 0.875rem;
 411 │     transition: var(--transition);
 412 │ }
 413 │ 
 414 │ .dropdown-menu a:hover {
 415 │     background: var(--background-secondary);
 416 │     color: var(--text-primary);
 417 │ }
 418 │ 
 419 │ .dropdown-menu hr {
 420 │     margin: 0.5rem 0;
 421 │     border: none;
 422 │     border-top: 1px solid var(--border-color);
 423 │ }
 424 │ 
 425 │ /* ===== MAIN LAYOUT ===== */
 426 │ .cms-main {
 427 │     display: flex;
 428 │     min-height: calc(100vh - var(--header-height));
 429 │ }
 430 │ 
 431 │ /* ===== SIDEBAR ===== */
 432 │ .cms-sidebar {
 433 │     width: var(--sidebar-width);
 434 │     background: var(--card-background);
 435 │     border-right: 1px solid var(--border-color);
 436 │     overflow-y: auto;
 437 │     height: calc(100vh - var(--header-height));
 438 │ }
 439 │ 
 440 │ .sidebar-nav {
 441 │     padding: 1.5rem 0;
 442 │ }
 443 │ 
 444 │ .sidebar-section {
 445 │     margin-bottom: 2rem;
 446 │ }
 447 │ 
 448 │ .sidebar-title {
 449 │     display: flex;
 450 │     align-items: center;
 451 │     gap: 0.5rem;
 452 │     padding: 0 1.5rem 0.75rem;
 453 │     margin-bottom: 0.5rem;
 454 │     font-size: 0.75rem;
 455 │     font-weight: 600;
 456 │     color: var(--text-light);
 457 │     text-transform: uppercase;
 458 │     letter-spacing: 0.5px;
 459 │     border-bottom: 1px solid var(--border-color);
 460 │ }
 461 │ 
 462 │ .sidebar-item {
 463 │     display: flex;
 464 │     align-items: center;
 465 │     gap: 0.75rem;
 466 │     padding: 0.75rem 1.5rem;
 467 │     margin: 0.125rem 0.75rem;
 468 │     border-radius: var(--border-radius);
 469 │     color: var(--text-secondary);
 470 │     cursor: pointer;
 471 │     transition: var(--transition);
 472 │     font-size: 0.9rem;
 473 │     font-weight: 500;
 474 │ }
 475 │ 
 476 │ .sidebar-item:hover {
 477 │     background: var(--background-secondary);
 478 │     color: var(--text-primary);
 479 │ }
 480 │ 
 481 │ .sidebar-item.active {
 482 │     background: linear-gradient(135deg, var(--primary-red), var(--dark-red));
 483 │     color: white;
 484 │     box-shadow: var(--shadow-light);
 485 │ }
 486 │ 
 487 │ .sidebar-item.active:hover {
 488 │     background: linear-gradient(135deg, var(--dark-red), var(--primary-red));
 489 │ }
 490 │ 
 491 │ .sidebar-item i {
 492 │     width: 18px;
 493 │     text-align: center;
 494 │     flex-shrink: 0;
 495 │ }
 496 │ 
 497 │ /* ===== CONTENT AREA ===== */
 498 │ .cms-content {
 499 │     flex: 1;
 500 │     padding: 2rem;
 501 │     overflow-y: auto;
 502 │     height: calc(100vh - var(--header-height));
 503 │ }
 504 │ 
 505 │ .alert-container {
 506 │     position: fixed;
 507 │     top: calc(var(--header-height) + 1rem);
 508 │     right: 1rem;
 509 │     z-index: 1050;
 510 │     display: flex;
 511 │     flex-direction: column;
 512 │     gap: 0.5rem;
 513 │ }
 514 │ 
 515 │ .alert {
 516 │     padding: 1rem 1.25rem;
 517 │     border-radius: var(--border-radius);
 518 │     font-size: 0.9rem;
 519 │     box-shadow: var(--shadow-medium);
 520 │     min-width: 300px;
 521 │     display: flex;
 522 │     align-items: center;
 523 │     gap: 0.5rem;
 524 │     animation: slideIn 0.3s ease-out;
 525 │ }
 526 │ 
 527 │ .alert-success {
 528 │     background: #d1fae5;
 529 │     color: #065f46;
 530 │     border: 1px solid #a7f3d0;
 531 │ }
 532 │ 
 533 │ .alert-error {
 534 │     background: #fef2f2;
 535 │     color: #dc2626;
 536 │     border: 1px solid #fecaca;
 537 │ }
 538 │ 
 539 │ .alert-warning {
 540 │     background: #fef3c7;
 541 │     color: #92400e;
 542 │     border: 1px solid #fde68a;
 543 │ }
 544 │ 
 545 │ .alert-info {
 546 │     background: #dbeafe;
 547 │     color: #1e40af;
 548 │     border: 1px solid #93c5fd;
 549 │ }
 550 │ 
 551 │ .content-area {
 552 │     max-width: 100%;
 553 │ }
 554 │ 
 555 │ .welcome-screen {
 556 │     text-align: center;
 557 │     padding: 4rem 2rem;
 558 │     background: var(--card-background);
 559 │     border-radius: var(--border-radius-lg);
 560 │     box-shadow: var(--shadow-light);
 561 │ }
 562 │ 
 563 │ .welcome-icon {
 564 │     font-size: 4rem;
 565 │     color: var(--primary-red);
 566 │     margin-bottom: 1.5rem;
 567 │ }
 568 │ 
 569 │ .welcome-screen h2 {
 570 │     font-size: 2rem;
 571 │     font-weight: 700;
 572 │     color: var(--text-primary);
 573 │     margin-bottom: 1rem;
 574 │ }
 575 │ 
 576 │ .welcome-screen p {
 577 │     font-size: 1.1rem;
 578 │     color: var(--text-secondary);
 579 │     margin-bottom: 2rem;
 580 │     max-width: 600px;
 581 │     margin-left: auto;
 582 │     margin-right: auto;
 583 │ }
 584 │ 
 585 │ .quick-actions {
 586 │     display: flex;
 587 │     gap: 1rem;
 588 │     justify-content: center;
 589 │     flex-wrap: wrap;
 590 │ }
 591 │ 
 592 │ /* ===== FORM STYLES ===== */
 593 │ .form-section {
 594 │     background: var(--card-background);
 595 │     border: 1px solid var(--border-color);
 596 │     border-radius: var(--border-radius-lg);
 597 │     padding: 2rem;
 598 │     margin-bottom: 2rem;
 599 │     box-shadow: var(--shadow-light);
 600 │ }
 601 │ 
 602 │ .form-section-title {
 603 │     color: var(--primary-red);
 604 │     font-size: 1.25rem;
 605 │     font-weight: 600;
 606 │     margin-bottom: 1.5rem;
 607 │     padding-bottom: 0.75rem;
 608 │     border-bottom: 1px solid var(--border-color);
 609 │     display: flex;
 610 │     align-items: center;
 611 │     gap: 0.5rem;
 612 │ }
 613 │ 
 614 │ .form-row {
 615 │     display: grid;
 616 │     grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
 617 │     gap: 1.5rem;
 618 │     margin-bottom: 1.5rem;
 619 │ }
 620 │ 
 621 │ .form-field {
 622 │     display: flex;
 623 │     flex-direction: column;
 624 │ }
 625 │ 
 626 │ .form-field label {
 627 │     margin-bottom: 0.5rem;
 628 │     color: var(--text-secondary);
 629 │     font-weight: 500;
 630 │     font-size: 0.9rem;
 631 │ }
 632 │ 
 633 │ .form-field input,
 634 │ .form-field textarea,
 635 │ .form-field select {
 636 │     padding: 0.75rem;
 637 │     border: 1px solid var(--border-color);
 638 │     border-radius: var(--border-radius);
 639 │     font-size: 0.9rem;
 640 │     transition: var(--transition);
 641 │     background: var(--background-primary);
 642 │     color: var(--text-primary);
 643 │ }
 644 │ 
 645 │ .form-field textarea {
 646 │     min-height: 120px;
 647 │     resize: vertical;
 648 │     font-family: inherit;
 649 │ }
 650 │ 
 651 │ .form-field input:focus,
 652 │ .form-field textarea:focus,
 653 │ .form-field select:focus {
 654 │     outline: none;
 655 │     border-color: var(--primary-red);
 656 │     box-shadow: 0 0 0 3px rgba(220, 20, 60, 0.1);
 657 │ }
 658 │ 
 659 │ .form-actions {
 660 │     display: flex;
 661 │     gap: 1rem;
 662 │     margin-top: 2rem;
 663 │     flex-wrap: wrap;
 664 │ }
 665 │ 
 666 │ /* ===== UPLOAD STYLES ===== */
 667 │ .upload-area {
 668 │     border: 2px dashed var(--border-color);
 669 │     border-radius: var(--border-radius-lg);
 670 │     padding: 3rem 2rem;
 671 │     text-align: center;
 672 │     transition: var(--transition);
 673 │     cursor: pointer;
 674 │ }
 675 │ 
 676 │ .upload-area:hover {
 677 │     border-color: var(--primary-red);
 678 │     background: rgba(220, 20, 60, 0.02);
 679 │ }
 680 │ 
 681 │ .upload-area.dragover {
 682 │     border-color: var(--primary-red);
 683 │     background: rgba(220, 20, 60, 0.05);
 684 │ }
 685 │ 
 686 │ .upload-icon {
 687 │     font-size: 3rem;
 688 │     color: var(--primary-red);
 689 │     margin-bottom: 1rem;
 690 │ }
 691 │ 
 692 │ .upload-area h4 {
 693 │     color: var(--text-primary);
 694 │     margin-bottom: 0.5rem;
 695 │ }
 696 │ 
 697 │ .upload-area p {
 698 │     color: var(--text-secondary);
 699 │     margin-bottom: 1.5rem;
 700 │     font-size: 0.9rem;
 701 │ }
 702 │ 
 703 │ .progress-bar {
 704 │     width: 100%;
 705 │     height: 8px;
 706 │     background: var(--background-tertiary);
 707 │     border-radius: 4px;
 708 │     overflow: hidden;
 709 │     margin-bottom: 1rem;
 710 │ }
 711 │ 
 712 │ .progress-fill {
 713 │     height: 100%;
 714 │     background: linear-gradient(135deg, var(--primary-red), var(--dark-red));
 715 │     border-radius: 4px;
 716 │     transition: width 0.3s ease;
 717 │     width: 0%;
 718 │ }
 719 │ 
 720 │ /* ===== MODAL STYLES ===== */
 721 │ .modal {
 722 │     display: none;
 723 │     position: fixed;
 724 │     z-index: 2000;
 725 │     left: 0;
 726 │     top: 0;
 727 │     width: 100%;
 728 │     height: 100%;
 729 │     background-color: rgba(0, 0, 0, 0.5);
 730 │     backdrop-filter: blur(4px);
 731 │ }
 732 │ 
 733 │ .modal.show {
 734 │     display: flex;
 735 │     align-items: center;
 736 │     justify-content: center;
 737 │ }
 738 │ 
 739 │ .modal-content {
 740 │     background: var(--card-background);
 741 │     border-radius: var(--border-radius-lg);
 742 │     box-shadow: var(--shadow-strong);
 743 │     width: 90%;
 744 │     max-width: 600px;
 745 │     max-height: 90%;
 746 │     overflow: hidden;
 747 │     position: relative;
 748 │ }
 749 │ 
 750 │ .modal-fullscreen {
 751 │     width: 95%;
 752 │     max-width: 1200px;
 753 │     height: 90%;
 754 │     max-height: 90%;
 755 │ }
 756 │ 
 757 │ .modal-header {
 758 │     display: flex;
 759 │     justify-content: space-between;
 760 │     align-items: center;
 761 │     padding: 1.5rem 2rem;
 762 │     border-bottom: 1px solid var(--border-color);
 763 │ }
 764 │ 
 765 │ .modal-header h3 {
 766 │     margin: 0;
 767 │     color: var(--text-primary);
 768 │     font-size: 1.25rem;
 769 │     font-weight: 600;
 770 │ }
 771 │ 
 772 │ .modal-body {
 773 │     padding: 2rem;
 774 │     overflow-y: auto;
 775 │ }
 776 │ 
 777 │ .modal-fullscreen .modal-body {
 778 │     padding: 0;
 779 │     height: calc(100% - 70px);
 780 │ }
 781 │ 
 782 │ .modal-fullscreen iframe {
 783 │     width: 100%;
 784 │     height: 100%;
 785 │     border: none;
 786 │ }
 787 │ 
 788 │ /* ===== LOADING OVERLAY ===== */
 789 │ .loading-overlay {
 790 │     display: none;
 791 │     position: fixed;
 792 │     top: 0;
 793 │     left: 0;
 794 │     width: 100%;
 795 │     height: 100%;
 796 │     background: rgba(255, 255, 255, 0.9);
 797 │     z-index: 3000;
 798 │     backdrop-filter: blur(2px);
 799 │ }
 800 │ 
 801 │ .loading-overlay.show {
 802 │     display: flex;
 803 │     align-items: center;
 804 │     justify-content: center;
 805 │ }
 806 │ 
 807 │ .loading-spinner {
 808 │     text-align: center;
 809 │     color: var(--primary-red);
 810 │ }
 811 │ 
 812 │ .loading-spinner i {
 813 │     font-size: 3rem;
 814 │     margin-bottom: 1rem;
 815 │ }
 816 │ 
 817 │ .loading-spinner p {
 818 │     font-size: 1.1rem;
 819 │     font-weight: 500;
 820 │     color: var(--text-secondary);
 821 │ }
 822 │ 
 823 │ /* ===== RESPONSIVE DESIGN ===== */
 824 │ @media (max-width: 1024px) {
 825 │     .cms-main {
 826 │         flex-direction: column;
 827 │     }
 828 │     
 829 │     .cms-sidebar {
 830 │         width: 100%;
 831 │         height: auto;
 832 │         border-right: none;
 833 │         border-bottom: 1px solid var(--border-color);
 834 │     }
 835 │     
 836 │     .sidebar-nav {
 837 │         display: flex;
 838 │         overflow-x: auto;
 839 │         padding: 1rem;
 840 │         gap: 1rem;
 841 │     }
 842 │     
 843 │     .sidebar-section {
 844 │         margin-bottom: 0;
 845 │         min-width: max-content;
 846 │     }
 847 │     
 848 │     .sidebar-title {
 849 │         padding: 0 0 0.5rem;
 850 │         margin-bottom: 0.5rem;
 851 │     }
 852 │     
 853 │     .sidebar-item {
 854 │         margin: 0;
 855 │         white-space: nowrap;
 856 │     }
 857 │ }
 858 │ 
 859 │ @media (max-width: 768px) {
 860 │     .cms-header {
 861 │         padding: 0 1rem;
 862 │         flex-wrap: wrap;
 863 │         height: auto;
 864 │         min-height: var(--header-height);
 865 │     }
 866 │     
 867 │     .cms-nav {
 868 │         width: 100%;
 869 │         justify-content: space-between;
 870 │         margin-top: 1rem;
 871 │     }
 872 │     
 873 │     .cms-content {
 874 │         padding: 1rem;
 875 │     }
 876 │     
 877 │     .form-row {
 878 │         grid-template-columns: 1fr;
 879 │     }
 880 │     
 881 │     .quick-actions {
 882 │         flex-direction: column;
 883 │         align-items: center;
 884 │     }
 885 │     
 886 │     .user-details {
 887 │         display: none;
 888 │     }
 889 │     
 890 │     .modal-content {
 891 │         width: 95%;
 892 │         margin: 1rem;
 893 │     }
 894 │     
 895 │     .modal-fullscreen {
 896 │         width: 98%;
 897 │         height: 95%;
 898 │     }
 899 │ }
 900 │ 
 901 │ @media (max-width: 480px) {
 902 │     .login-box {
 903 │         padding: 2rem 1.5rem;
 904 │         margin: 1rem;
 905 │     }
 906 │     
 907 │     .cms-logo .cms-title {
 908 │         display: none;
 909 │     }
 910 │     
 911 │     .sidebar-nav {
 912 │         padding: 0.5rem;
 913 │     }
 914 │     
 915 │     .form-section {
 916 │         padding: 1.5rem;
 917 │     }
 918 │     
 919 │     .welcome-screen {
 920 │         padding: 2rem 1rem;
 921 │     }
 922 │     
 923 │     .welcome-screen h2 {
 924 │         font-size: 1.5rem;
 925 │     }
 926 │ }

═══════════════════════════════════════════════════════════════
ARQUIVO: public\admin\js\admin.js
Tamanho: 33.28KB
Modificado: 07/07/2025 11:59:30
═══════════════════════════════════════════════════════════════
   1 │ /**
   2 │  * Sistema de AdministraÃ§Ã£o - Gracie Barra CMS
   3 │  * Arquivo: public/admin/js/admin.js
   4 │  */
   5 │ 
   6 │ 'use strict';
   7 │ 
   8 │ // ===== CONFIGURAÃ‡Ã•ES GLOBAIS =====
   9 │ const CONFIG = {
  10 │     API_BASE: '../api/',
  11 │     SITE_URL: '../',
  12 │     PREVIEW_URL: '../preview.php',
  13 │     MAX_FILE_SIZE: 5 * 1024 * 1024, // 5MB
  14 │     ALLOWED_EXTENSIONS: ['jpg', 'jpeg', 'png', 'gif', 'webp'],
  15 │     AUTO_SAVE_INTERVAL: 30000, // 30 segundos
  16 │ };
  17 │ 
  18 │ // ===== SISTEMA PRINCIPAL =====
  19 │ class AdminSystem {
  20 │     static currentUser = null;
  21 │     static currentSection = 'dashboard';
  22 │     static contentData = {};
  23 │     static autoSaveInterval = null;
  24 │     static isOnline = navigator.onLine;
  25 │ 
  26 │     static async init() {
  27 │         try {
  28 │             // Configurar listeners bÃ¡sicos
  29 │             this.setupEventListeners();
  30 │             
  31 │             // Verificar conexÃ£o
  32 │             this.monitorConnection();
  33 │             
  34 │             // Verificar autenticaÃ§Ã£o
  35 │             const isAuthenticated = await AuthManager.checkAuth();
  36 │             
  37 │             if (isAuthenticated) {
  38 │                 this.currentUser = AuthManager.getCurrentUser();
  39 │                 await this.showCMS();
  40 │             } else {
  41 │                 this.showLogin();
  42 │             }
  43 │             
  44 │             console.log('ðŸŽ‰ Sistema CMS inicializado com sucesso!');
  45 │             
  46 │         } catch (error) {
  47 │             console.error('âŒ Erro ao inicializar sistema:', error);
  48 │             this.showError('Erro ao inicializar sistema. Recarregue a pÃ¡gina.');
  49 │         }
  50 │     }
  51 │ 
  52 │     static setupEventListeners() {
  53 │         // Form de login
  54 │         const loginForm = document.getElementById('loginForm');
  55 │         if (loginForm) {
  56 │             loginForm.addEventListener('submit', this.handleLogin.bind(this));
  57 │         }
  58 │ 
  59 │         // BotÃµes da interface
  60 │         document.addEventListener('click', (e) => {
  61 │             const target = e.target;
  62 │             
  63 │             // Sidebar navigation
  64 │             if (target.closest('.sidebar-item')) {
  65 │                 const section = target.closest('.sidebar-item').dataset.section;
  66 │                 if (section) {
  67 │                     this.loadSection(section);
  68 │                 }
  69 │             }
  70 │             
  71 │             // User menu toggle
  72 │             if (target.closest('#userMenuBtn')) {
  73 │                 this.toggleUserMenu();
  74 │             }
  75 │             
  76 │             // Logout
  77 │             if (target.closest('#logoutBtn')) {
  78 │                 this.handleLogout();
  79 │             }
  80 │             
  81 │             // Preview
  82 │             if (target.closest('#previewBtn')) {
  83 │                 this.openPreview();
  84 │             }
  85 │             
  86 │             // Save all
  87 │             if (target.closest('#saveAllBtn')) {
  88 │                 this.saveAllChanges();
  89 │             }
  90 │         });
  91 │ 
  92 │         // Fechar dropdown ao clicar fora
  93 │         document.addEventListener('click', (e) => {
  94 │             if (!e.target.closest('.dropdown')) {
  95 │                 document.querySelectorAll('.dropdown-menu').forEach(menu => {
  96 │                     menu.classList.remove('show');
  97 │                 });
  98 │             }
  99 │         });
 100 │ 
 101 │         // Atalhos de teclado
 102 │         document.addEventListener('keydown', (e) => {
 103 │             // Ctrl/Cmd + S para salvar
 104 │             if ((e.ctrlKey || e.metaKey) && e.key === 's') {
 105 │                 e.preventDefault();
 106 │                 this.saveCurrentSection();
 107 │             }
 108 │             
 109 │             // Escape para fechar modais
 110 │             if (e.key === 'Escape') {
 111 │                 this.closeAllModals();
 112 │             }
 113 │         });
 114 │ 
 115 │         // Monitor de conexÃ£o
 116 │         window.addEventListener('online', () => {
 117 │             this.isOnline = true;
 118 │             this.showAlert('ConexÃ£o restaurada', 'success');
 119 │         });
 120 │ 
 121 │         window.addEventListener('offline', () => {
 122 │             this.isOnline = false;
 123 │             this.showAlert('Sem conexÃ£o com a internet', 'warning');
 124 │         });
 125 │     }
 126 │ 
 127 │     static monitorConnection() {
 128 │         setInterval(() => {
 129 │             if (!this.isOnline) {
 130 │                 fetch(CONFIG.API_BASE + 'auth/check')
 131 │                     .then(() => {
 132 │                         this.isOnline = true;
 133 │                         this.showAlert('ConexÃ£o restaurada', 'success');
 134 │                     })
 135 │                     .catch(() => {
 136 │                         // Ainda offline
 137 │                     });
 138 │             }
 139 │         }, 5000);
 140 │     }
 141 │ 
 142 │     static showLogin() {
 143 │         document.getElementById('loginSection').style.display = 'flex';
 144 │         document.getElementById('cmsSection').style.display = 'none';
 145 │         
 146 │         // Focus no campo username
 147 │         setTimeout(() => {
 148 │             const usernameField = document.getElementById('username');
 149 │             if (usernameField) usernameField.focus();
 150 │         }, 100);
 151 │     }
 152 │ 
 153 │     static async showCMS() {
 154 │         document.getElementById('loginSection').style.display = 'none';
 155 │         document.getElementById('cmsSection').style.display = 'block';
 156 │         
 157 │         // Atualizar informaÃ§Ãµes do usuÃ¡rio
 158 │         this.updateUserInfo();
 159 │         
 160 │         // Carregar conteÃºdo inicial
 161 │         await this.loadInitialData();
 162 │         
 163 │         // Configurar auto-save
 164 │         this.setupAutoSave();
 165 │         
 166 │         // Carregar dashboard por padrÃ£o
 167 │         this.loadSection('dashboard');
 168 │     }
 169 │ 
 170 │     static updateUserInfo() {
 171 │         if (!this.currentUser) return;
 172 │         
 173 │         const elements = {
 174 │             avatar: document.getElementById('userAvatar'),
 175 │             name: document.getElementById('userName'),
 176 │             role: document.getElementById('userRole')
 177 │         };
 178 │         
 179 │         if (elements.avatar) {
 180 │             elements.avatar.textContent = this.currentUser.first_name?.charAt(0).toUpperCase() || 'U';
 181 │         }
 182 │         
 183 │         if (elements.name) {
 184 │             elements.name.textContent = this.currentUser.full_name || this.currentUser.username;
 185 │         }
 186 │         
 187 │         if (elements.role) {
 188 │             const roleMap = {
 189 │                 'admin': 'Administrador',
 190 │                 'editor': 'Editor',
 191 │                 'viewer': 'Visualizador'
 192 │             };
 193 │             elements.role.textContent = roleMap[this.currentUser.role] || this.currentUser.role;
 194 │         }
 195 │     }
 196 │ 
 197 │     static async loadInitialData() {
 198 │         try {
 199 │             this.showLoading('Carregando dados...');
 200 │             
 201 │             // Carregar todo o conteÃºdo
 202 │             this.contentData = await ContentManager.getAllContent();
 203 │             
 204 │             // Verificar permissÃµes e esconder itens nÃ£o permitidos
 205 │             this.updateUIPermissions();
 206 │             
 207 │         } catch (error) {
 208 │             console.error('Erro ao carregar dados iniciais:', error);
 209 │             this.showError('Erro ao carregar dados. Algumas funcionalidades podem nÃ£o funcionar.');
 210 │         } finally {
 211 │             this.hideLoading();
 212 │         }
 213 │     }
 214 │ 
 215 │     static updateUIPermissions() {
 216 │         const userRole = this.currentUser?.role;
 217 │         
 218 │         // Esconder itens que requerem permissÃ£o admin
 219 │         document.querySelectorAll('[data-permission="admin"]').forEach(item => {
 220 │             if (userRole !== 'admin') {
 221 │                 item.style.display = 'none';
 222 │             }
 223 │         });
 224 │     }
 225 │ 
 226 │     static setupAutoSave() {
 227 │         if (this.autoSaveInterval) {
 228 │             clearInterval(this.autoSaveInterval);
 229 │         }
 230 │         
 231 │         // Auto-save a cada 30 segundos se houver mudanÃ§as
 232 │         this.autoSaveInterval = setInterval(() => {
 233 │             if (this.hasUnsavedChanges()) {
 234 │                 this.saveCurrentSection(true); // true = silent save
 235 │             }
 236 │         }, CONFIG.AUTO_SAVE_INTERVAL);
 237 │     }
 238 │ 
 239 │     static hasUnsavedChanges() {
 240 │         // Verificar se hÃ¡ campos modificados
 241 │         const forms = document.querySelectorAll('#dynamicContent form, #dynamicContent input, #dynamicContent textarea');
 242 │         return Array.from(forms).some(form => form.dataset.modified === 'true');
 243 │     }
 244 │ 
 245 │     static async loadSection(section) {
 246 │         if (section === this.currentSection) return;
 247 │         
 248 │         try {
 249 │             // Verificar mudanÃ§as nÃ£o salvas
 250 │             if (this.hasUnsavedChanges()) {
 251 │                 const shouldContinue = confirm('VocÃª tem alteraÃ§Ãµes nÃ£o salvas. Deseja continuar?');
 252 │                 if (!shouldContinue) return;
 253 │             }
 254 │             
 255 │             this.currentSection = section;
 256 │             
 257 │             // Atualizar sidebar
 258 │             this.updateSidebarSelection(section);
 259 │             
 260 │             // Carregar conteÃºdo da seÃ§Ã£o
 261 │             await this.renderSection(section);
 262 │             
 263 │         } catch (error) {
 264 │             console.error(`Erro ao carregar seÃ§Ã£o ${section}:`, error);
 265 │             this.showError(`Erro ao carregar seÃ§Ã£o: ${error.message}`);
 266 │         }
 267 │     }
 268 │ 
 269 │     static updateSidebarSelection(section) {
 270 │         // Remover seleÃ§Ã£o atual
 271 │         document.querySelectorAll('.sidebar-item').forEach(item => {
 272 │             item.classList.remove('active');
 273 │         });
 274 │         
 275 │         // Adicionar seleÃ§Ã£o na nova seÃ§Ã£o
 276 │         const targetItem = document.querySelector(`[data-section="${section}"]`);
 277 │         if (targetItem) {
 278 │             targetItem.classList.add('active');
 279 │         }
 280 │     }
 281 │ 
 282 │     static async renderSection(section) {
 283 │         const contentArea = document.getElementById('dynamicContent');
 284 │         
 285 │         try {
 286 │             let html = '';
 287 │             
 288 │             switch (section) {
 289 │                 case 'dashboard':
 290 │                     html = await this.renderDashboard();
 291 │                     break;
 292 │                 case 'header':
 293 │                     html = await this.renderHeaderForm();
 294 │                     break;
 295 │                 case 'hero':
 296 │                     html = await this.renderHeroForm();
 297 │                     break;
 298 │                 case 'about':
 299 │                     html = await this.renderAboutForm();
 300 │                     break;
 301 │                 case 'contact':
 302 │                     html = await this.renderContactForm();
 303 │                     break;
 304 │                 case 'media':
 305 │                     html = await this.renderMediaManager();
 306 │                     break;
 307 │                 case 'settings':
 308 │                     html = await this.renderSettingsForm();
 309 │                     break;
 310 │                 case 'users':
 311 │                     html = await this.renderUsersManager();
 312 │                     break;
 313 │                 default:
 314 │                     html = await this.renderGenericForm(section);
 315 │             }
 316 │             
 317 │             contentArea.innerHTML = html;
 318 │             contentArea.classList.add('fade-in');
 319 │             
 320 │             // Configurar eventos especÃ­ficos da seÃ§Ã£o
 321 │             this.bindSectionEvents(section);
 322 │             
 323 │         } catch (error) {
 324 │             console.error(`Erro ao renderizar seÃ§Ã£o ${section}:`, error);
 325 │             contentArea.innerHTML = `
 326 │                 <div class="error-state">
 327 │                     <i class="bi bi-exclamation-triangle"></i>
 328 │                     <h3>Erro ao carregar seÃ§Ã£o</h3>
 329 │                     <p>${error.message}</p>
 330 │                     <button class="btn btn-primary" onclick="AdminSystem.loadSection('${section}')">
 331 │                         Tentar Novamente
 332 │                     </button>
 333 │                 </div>
 334 │             `;
 335 │         }
 336 │     }
 337 │ 
 338 │     static async renderDashboard() {
 339 │         try {
 340 │             // Carregar estatÃ­sticas
 341 │             const stats = await this.loadDashboardStats();
 342 │             
 343 │             return `
 344 │                 <div class="dashboard-header">
 345 │                     <h1><i class="bi bi-speedometer2"></i> Dashboard</h1>
 346 │                     <p>VisÃ£o geral do sistema e atividades recentes</p>
 347 │                 </div>
 348 │ 
 349 │                 <div class="dashboard-grid">
 350 │                     <div class="stat-card">
 351 │                         <div class="stat-icon primary">
 352 │                             <i class="bi bi-file-text"></i>
 353 │                         </div>
 354 │                         <div class="stat-content">
 355 │                             <h3>${stats.content?.total_sections || 0}</h3>
 356 │                             <p>SeÃ§Ãµes de ConteÃºdo</p>
 357 │                         </div>
 358 │                     </div>
 359 │ 
 360 │                     <div class="stat-card">
 361 │                         <div class="stat-icon success">
 362 │                             <i class="bi bi-images"></i>
 363 │                         </div>
 364 │                         <div class="stat-content">
 365 │                             <h3>${stats.files?.total_files || 0}</h3>
 366 │                             <p>Arquivos de MÃ­dia</p>
 367 │                         </div>
 368 │                     </div>
 369 │ 
 370 │                     <div class="stat-card">
 371 │                         <div class="stat-icon warning">
 372 │                             <i class="bi bi-people"></i>
 373 │                         </div>
 374 │                         <div class="stat-content">
 375 │                             <h3>${stats.users || 0}</h3>
 376 │                             <p>UsuÃ¡rios do Sistema</p>
 377 │                         </div>
 378 │                     </div>
 379 │ 
 380 │                     <div class="stat-card">
 381 │                         <div class="stat-icon info">
 382 │                             <i class="bi bi-activity"></i>
 383 │                         </div>
 384 │                         <div class="stat-content">
 385 │                             <h3>${stats.recent_activity?.length || 0}</h3>
 386 │                             <p>AÃ§Ãµes Recentes</p>
 387 │                         </div>
 388 │                     </div>
 389 │                 </div>
 390 │ 
 391 │                 <div class="dashboard-content">
 392 │                     <div class="dashboard-section">
 393 │                         <h2><i class="bi bi-lightning"></i> AÃ§Ãµes RÃ¡pidas</h2>
 394 │                         <div class="quick-actions-grid">
 395 │                             <button class="action-card" onclick="AdminSystem.loadSection('hero')">
 396 │                                 <i class="bi bi-star"></i>
 397 │                                 <span>Editar PÃ¡gina Principal</span>
 398 │                             </button>
 399 │                             <button class="action-card" onclick="AdminSystem.loadSection('media')">
 400 │                                 <i class="bi bi-images"></i>
 401 │                                 <span>Gerenciar MÃ­dia</span>
 402 │                             </button>
 403 │                             <button class="action-card" onclick="AdminSystem.openPreview()">
 404 │                                 <i class="bi bi-eye"></i>
 405 │                                 <span>Visualizar Site</span>
 406 │                             </button>
 407 │                             <button class="action-card" onclick="AdminSystem.loadSection('contact')">
 408 │                                 <i class="bi bi-telephone"></i>
 409 │                                 <span>Editar Contato</span>
 410 │                             </button>
 411 │                         </div>
 412 │                     </div>
 413 │ 
 414 │                     <div class="dashboard-section">
 415 │                         <h2><i class="bi bi-clock-history"></i> Atividade Recente</h2>
 416 │                         <div class="activity-list">
 417 │                             ${this.renderActivityList(stats.recent_activity || [])}
 418 │                         </div>
 419 │                     </div>
 420 │                 </div>
 421 │             `;
 422 │             
 423 │         } catch (error) {
 424 │             console.error('Erro ao carregar dashboard:', error);
 425 │             return this.renderErrorState('Erro ao carregar dashboard', error.message);
 426 │         }
 427 │     }
 428 │ 
 429 │     static async loadDashboardStats() {
 430 │         try {
 431 │             const response = await fetch(CONFIG.API_BASE + 'dashboard/stats');
 432 │             const data = await response.json();
 433 │             
 434 │             if (data.success) {
 435 │                 return data.stats;
 436 │             }
 437 │             
 438 │             throw new Error(data.message || 'Erro ao carregar estatÃ­sticas');
 439 │         } catch (error) {
 440 │             console.error('Erro ao carregar estatÃ­sticas:', error);
 441 │             return {};
 442 │         }
 443 │     }
 444 │ 
 445 │     static renderActivityList(activities) {
 446 │         if (!activities.length) {
 447 │             return '<p class="no-activity">Nenhuma atividade recente</p>';
 448 │         }
 449 │         
 450 │         return activities.map(activity => `
 451 │             <div class="activity-item">
 452 │                 <div class="activity-icon">
 453 │                     <i class="bi bi-${this.getActivityIcon(activity.action)}"></i>
 454 │                 </div>
 455 │                 <div class="activity-content">
 456 │                     <p><strong>${activity.username}</strong> ${this.getActivityDescription(activity.action)}</p>
 457 │                     <small>${this.formatDate(activity.created_at)}</small>
 458 │                 </div>
 459 │             </div>
 460 │         `).join('');
 461 │     }
 462 │ 
 463 │     static getActivityIcon(action) {
 464 │         const iconMap = {
 465 │             'login': 'box-arrow-in-right',
 466 │             'logout': 'box-arrow-left',
 467 │             'update_content': 'pencil-square',
 468 │             'upload_file': 'cloud-upload',
 469 │             'create_user': 'person-plus',
 470 │             'update_user': 'person-gear',
 471 │             'delete_file': 'trash'
 472 │         };
 473 │         return iconMap[action] || 'activity';
 474 │     }
 475 │ 
 476 │     static getActivityDescription(action) {
 477 │         const descriptionMap = {
 478 │             'login': 'fez login no sistema',
 479 │             'logout': 'fez logout do sistema',
 480 │             'update_content': 'atualizou conteÃºdo',
 481 │             'upload_file': 'fez upload de arquivo',
 482 │             'create_user': 'criou novo usuÃ¡rio',
 483 │             'update_user': 'atualizou usuÃ¡rio',
 484 │             'delete_file': 'removeu arquivo'
 485 │         };
 486 │         return descriptionMap[action] || 'realizou uma aÃ§Ã£o';
 487 │     }
 488 │ 
 489 │     static formatDate(dateString) {
 490 │         const date = new Date(dateString);
 491 │         const now = new Date();
 492 │         const diffTime = Math.abs(now - date);
 493 │         const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
 494 │         
 495 │         if (diffDays === 1) {
 496 │             return 'hÃ¡ 1 dia';
 497 │         } else if (diffDays < 7) {
 498 │             return `hÃ¡ ${diffDays} dias`;
 499 │         } else {
 500 │             return date.toLocaleDateString('pt-BR');
 501 │         }
 502 │     }
 503 │ 
 504 │     static async renderHeaderForm() {
 505 │         const content = this.contentData.header || {};
 506 │         
 507 │         return `
 508 │             <div class="content-header">
 509 │                 <h1><i class="bi bi-layout-text-window"></i> Header & Logo</h1>
 510 │                 <p>Configure o cabeÃ§alho e logo do site</p>
 511 │             </div>
 512 │ 
 513 │             <form class="section-form" data-section="header">
 514 │                 <div class="form-section">
 515 │                     <h3 class="form-section-title">
 516 │                         <i class="bi bi-image"></i> Logo e Identidade
 517 │                     </h3>
 518 │                     <div class="form-row">
 519 │                         <div class="form-field">
 520 │                             <label for="logo_main">Nome Principal</label>
 521 │                             <input type="text" id="logo_main" name="logo_main" 
 522 │                                    value="${content.logo_main || 'Gracie Barra'}" required>
 523 │                         </div>
 524 │                         <div class="form-field">
 525 │                             <label for="logo_sub">SubtÃ­tulo</label>
 526 │                             <input type="text" id="logo_sub" name="logo_sub" 
 527 │                                    value="${content.logo_sub || 'Cidade Nova'}">
 528 │                         </div>
 529 │                     </div>
 530 │                 </div>
 531 │ 
 532 │                 <div class="form-section">
 533 │                     <h3 class="form-section-title">
 534 │                         <i class="bi bi-list"></i> Menu de NavegaÃ§Ã£o
 535 │                     </h3>
 536 │                     <div class="form-row">
 537 │                         <div class="form-field">
 538 │                             <label for="menu_items">Itens do Menu (um por linha)</label>
 539 │                             <textarea id="menu_items" name="menu_items" rows="8">${
 540 │                                 Array.isArray(content.menu_items) 
 541 │                                     ? content.menu_items.join('\n') 
 542 │                                     : 'InÃ­cio\nSobre\nProgramas\nBenefÃ­cios\nFilosofia\nProfessores\nHorÃ¡rios\nContato'
 543 │                             }</textarea>
 544 │                         </div>
 545 │                     </div>
 546 │                 </div>
 547 │ 
 548 │                 <div class="form-actions">
 549 │                     <button type="submit" class="btn btn-primary">
 550 │                         <i class="bi bi-check"></i> Salvar Header
 551 │                     </button>
 552 │                     <button type="button" class="btn btn-secondary" onclick="AdminSystem.openPreview()">
 553 │                         <i class="bi bi-eye"></i> Visualizar
 554 │                     </button>
 555 │                 </div>
 556 │             </form>
 557 │         `;
 558 │     }
 559 │ 
 560 │     static async renderHeroForm() {
 561 │         const content = this.contentData.hero || {};
 562 │         
 563 │         return `
 564 │             <div class="content-header">
 565 │                 <h1><i class="bi bi-star-fill"></i> SeÃ§Ã£o Principal</h1>
 566 │                 <p>Configure o banner principal do site</p>
 567 │             </div>
 568 │ 
 569 │             <form class="section-form" data-section="hero">
 570 │                 <div class="form-section">
 571 │                     <h3 class="form-section-title">
 572 │                         <i class="bi bi-type"></i> ConteÃºdo Principal
 573 │                     </h3>
 574 │                     <div class="form-row">
 575 │                         <div class="form-field">
 576 │                             <label for="title">TÃ­tulo Principal</label>
 577 │                             <input type="text" id="title" name="title" 
 578 │                                    value="${content.title || 'Gracie Barra Cidade Nova'}" required>
 579 │                         </div>
 580 │                         <div class="form-field">
 581 │                             <label for="subtitle">SubtÃ­tulo</label>
 582 │                             <input type="text" id="subtitle" name="subtitle" 
 583 │                                    value="${content.subtitle || 'Jiu-Jitsu para Todos'}">
 584 │                         </div>
 585 │                     </div>
 586 │                     <div class="form-row">
 587 │                         <div class="form-field">
 588 │                             <label for="button_text">Texto do BotÃ£o</label>
 589 │                             <input type="text" id="button_text" name="button_text" 
 590 │                                    value="${content.button_text || 'ComeÃ§ar a Treinar'}">
 591 │                         </div>
 592 │                         <div class="form-field">
 593 │                             <label for="button_link">Link do BotÃ£o</label>
 594 │                             <input type="url" id="button_link" name="button_link" 
 595 │                                    value="${content.button_link || 'https://wa.me/559281136742'}">
 596 │                         </div>
 597 │                     </div>
 598 │                 </div>
 599 │ 
 600 │                 <div class="form-section">
 601 │                     <h3 class="form-section-title">
 602 │                         <i class="bi bi-image"></i> Imagem de Fundo
 603 │                     </h3>
 604 │                     <div class="form-row">
 605 │                         <div class="form-field">
 606 │                             <label>Imagem Atual</label>
 607 │                             <div class="current-image">
 608 │                                 ${content.background_image ? 
 609 │                                     `<img src="${content.background_image}" alt="Imagem atual" style="max-width: 300px; border-radius: 8px;">` :
 610 │                                     '<p>Nenhuma imagem selecionada</p>'
 611 │                                 }
 612 │                             </div>
 613 │                             <input type="hidden" id="background_image" name="background_image" value="${content.background_image || ''}">
 614 │                             <button type="button" class="btn btn-secondary" onclick="AdminSystem.selectImage('background_image')">
 615 │                                 <i class="bi bi-image"></i> Selecionar Nova Imagem
 616 │                             </button>
 617 │                         </div>
 618 │                     </div>
 619 │                 </div>
 620 │ 
 621 │                 <div class="form-actions">
 622 │                     <button type="submit" class="btn btn-primary">
 623 │                         <i class="bi bi-check"></i> Salvar SeÃ§Ã£o Principal
 624 │                     </button>
 625 │                     <button type="button" class="btn btn-secondary" onclick="AdminSystem.openPreview()">
 626 │                         <i class="bi bi-eye"></i> Visualizar
 627 │                     </button>
 628 │                 </div>
 629 │             </form>
 630 │         `;
 631 │     }
 632 │ 
 633 │     static bindSectionEvents(section) {
 634 │         // Bind form submissions
 635 │         const forms = document.querySelectorAll('.section-form');
 636 │         forms.forEach(form => {
 637 │             form.addEventListener('submit', this.handleFormSubmit.bind(this));
 638 │         });
 639 │ 
 640 │         // Bind input changes for auto-save detection
 641 │         const inputs = document.querySelectorAll('#dynamicContent input, #dynamicContent textarea, #dynamicContent select');
 642 │         inputs.forEach(input => {
 643 │             input.addEventListener('input', () => {
 644 │                 input.closest('form').dataset.modified = 'true';
 645 │             });
 646 │         });
 647 │ 
 648 │         // Bind eventos especÃ­ficos por seÃ§Ã£o
 649 │         switch (section) {
 650 │             case 'media':
 651 │                 this.bindMediaEvents();
 652 │                 break;
 653 │             case 'users':
 654 │                 this.bindUserEvents();
 655 │                 break;
 656 │         }
 657 │     }
 658 │ 
 659 │     static async handleFormSubmit(e) {
 660 │         e.preventDefault();
 661 │         
 662 │         const form = e.target;
 663 │         const section = form.dataset.section;
 664 │         
 665 │         if (!section) {
 666 │             this.showError('Erro: seÃ§Ã£o nÃ£o identificada');
 667 │             return;
 668 │         }
 669 │ 
 670 │         try {
 671 │             this.showLoading('Salvando...');
 672 │             
 673 │             const formData = new FormData(form);
 674 │             const data = {};
 675 │             
 676 │             // Converter FormData para objeto
 677 │             for (const [key, value] of formData.entries()) {
 678 │                 if (key === 'menu_items') {
 679 │                     // Processar menu items como array
 680 │                     data[key] = value.split('\n').map(item => item.trim()).filter(item => item.length > 0);
 681 │                 } else {
 682 │                     data[key] = value;
 683 │                 }
 684 │             }
 685 │             
 686 │             const success = await ContentManager.updateSection(section, data);
 687 │             
 688 │             if (success) {
 689 │                 form.dataset.modified = 'false';
 690 │                 this.showAlert('SeÃ§Ã£o salva com sucesso!', 'success');
 691 │             }
 692 │             
 693 │         } catch (error) {
 694 │             console.error('Erro ao salvar seÃ§Ã£o:', error);
 695 │             this.showError('Erro ao salvar: ' + error.message);
 696 │         } finally {
 697 │             this.hideLoading();
 698 │         }
 699 │     }
 700 │ 
 701 │     static async saveCurrentSection(silent = false) {
 702 │         const form = document.querySelector('.section-form');
 703 │         if (!form) return;
 704 │         
 705 │         if (!silent) {
 706 │             const submitEvent = new Event('submit', { bubbles: true, cancelable: true });
 707 │             form.dispatchEvent(submitEvent);
 708 │         } else {
 709 │             // Silent save para auto-save
 710 │             this.handleFormSubmit({ target: form, preventDefault: () => {} });
 711 │         }
 712 │     }
 713 │ 
 714 │     static async saveAllChanges() {
 715 │         try {
 716 │             this.showLoading('Salvando todas as alteraÃ§Ãµes...');
 717 │             
 718 │             // Salvar seÃ§Ã£o atual primeiro
 719 │             await this.saveCurrentSection(true);
 720 │             
 721 │             this.showAlert('Todas as alteraÃ§Ãµes foram salvas!', 'success');
 722 │             
 723 │         } catch (error) {
 724 │             console.error('Erro ao salvar tudo:', error);
 725 │             this.showError('Erro ao salvar alteraÃ§Ãµes: ' + error.message);
 726 │         } finally {
 727 │             this.hideLoading();
 728 │         }
 729 │     }
 730 │ 
 731 │     static async handleLogin(e) {
 732 │         e.preventDefault();
 733 │         
 734 │         const form = e.target;
 735 │         const loginBtn = document.getElementById('loginBtn');
 736 │         const errorMessage = document.getElementById('errorMessage');
 737 │         
 738 │         const formData = new FormData(form);
 739 │         const credentials = {
 740 │             username: formData.get('username'),
 741 │             password: formData.get('password'),
 742 │             remember_me: formData.get('rememberMe') === 'on'
 743 │         };
 744 │         
 745 │         try {
 746 │             // UI Loading state
 747 │             loginBtn.disabled = true;
 748 │             document.querySelector('.btn-text').style.display = 'none';
 749 │             document.querySelector('.btn-loading').style.display = 'flex';
 750 │             errorMessage.style.display = 'none';
 751 │             
 752 │             const result = await AuthManager.login(credentials.username, credentials.password, credentials.remember_me);
 753 │             
 754 │             if (result.success) {
 755 │                 this.currentUser = result.user;
 756 │                 await this.showCMS();
 757 │             } else {
 758 │                 errorMessage.textContent = result.message;
 759 │                 errorMessage.style.display = 'block';
 760 │             }
 761 │             
 762 │         } catch (error) {
 763 │             console.error('Erro no login:', error);
 764 │             errorMessage.textContent = 'Erro de conexÃ£o. Tente novamente.';
 765 │             errorMessage.style.display = 'block';
 766 │         } finally {
 767 │             // Reset UI
 768 │             loginBtn.disabled = false;
 769 │             document.querySelector('.btn-text').style.display = 'inline';
 770 │             document.querySelector('.btn-loading').style.display = 'none';
 771 │         }
 772 │     }
 773 │ 
 774 │     static async handleLogout() {
 775 │         const confirmed = confirm('Tem certeza que deseja sair?');
 776 │         if (!confirmed) return;
 777 │         
 778 │         try {
 779 │             await AuthManager.logout();
 780 │             
 781 │             // Clear data
 782 │             this.currentUser = null;
 783 │             this.contentData = {};
 784 │             
 785 │             // Clear auto-save
 786 │             if (this.autoSaveInterval) {
 787 │                 clearInterval(this.autoSaveInterval);
 788 │                 this.autoSaveInterval = null;
 789 │             }
 790 │             
 791 │             this.showLogin();
 792 │             this.showAlert('Logout realizado com sucesso', 'success');
 793 │             
 794 │         } catch (error) {
 795 │             console.error('Erro no logout:', error);
 796 │             this.showError('Erro ao fazer logout');
 797 │         }
 798 │     }
 799 │ 
 800 │     static toggleUserMenu() {
 801 │         const menu = document.getElementById('userMenu');
 802 │         if (menu) {
 803 │             menu.classList.toggle('show');
 804 │         }
 805 │     }
 806 │ 
 807 │     static openPreview() {
 808 │         const modal = document.getElementById('previewModal');
 809 │         const frame = document.getElementById('previewFrame');
 810 │         
 811 │         if (modal && frame) {
 812 │             frame.src = CONFIG.PREVIEW_URL;
 813 │             modal.classList.add('show');
 814 │         }
 815 │     }
 816 │ 
 817 │     static closePreview() {
 818 │         const modal = document.getElementById('previewModal');
 819 │         if (modal) {
 820 │             modal.classList.remove('show');
 821 │         }
 822 │     }
 823 │ 
 824 │     static closeAllModals() {
 825 │         document.querySelectorAll('.modal').forEach(modal => {
 826 │             modal.classList.remove('show');
 827 │         });
 828 │     }
 829 │ 
 830 │     // ===== UTILITY METHODS =====
 831 │     
 832 │     static showLoading(message = 'Carregando...') {
 833 │         const overlay = document.getElementById('loadingOverlay');
 834 │         const text = overlay?.querySelector('p');
 835 │         
 836 │         if (overlay) {
 837 │             if (text) text.textContent = message;
 838 │             overlay.classList.add('show');
 839 │         }
 840 │     }
 841 │ 
 842 │     static hideLoading() {
 843 │         const overlay = document.getElementById('loadingOverlay');
 844 │         if (overlay) {
 845 │             overlay.classList.remove('show');
 846 │         }
 847 │     }
 848 │ 
 849 │     static showAlert(message, type = 'info', duration = 4000) {
 850 │         const container = document.getElementById('alertContainer');
 851 │         if (!container) return;
 852 │         
 853 │         const alert = document.createElement('div');
 854 │         alert.className = `alert alert-${type}`;
 855 │         
 856 │         const icons = {
 857 │             success: 'check-circle',
 858 │             error: 'x-circle',
 859 │             warning: 'exclamation-triangle',
 860 │             info: 'info-circle'
 861 │         };
 862 │         
 863 │         alert.innerHTML = `
 864 │             <i class="bi bi-${icons[type] || icons.info}"></i>
 865 │             <span>${message}</span>
 866 │         `;
 867 │         
 868 │         container.appendChild(alert);
 869 │         
 870 │         // Auto remove
 871 │         setTimeout(() => {
 872 │             if (alert.parentNode) {
 873 │                 alert.remove();
 874 │             }
 875 │         }, duration);
 876 │     }
 877 │ 
 878 │     static showError(message) {
 879 │         this.showAlert(message, 'error');
 880 │     }
 881 │ 
 882 │     static showSuccess(message) {
 883 │         this.showAlert(message, 'success');
 884 │     }
 885 │ 
 886 │     static renderErrorState(title, message) {
 887 │         return `
 888 │             <div class="error-state" style="text-align: center; padding: 3rem; background: var(--card-background); border-radius: var(--border-radius-lg);">
 889 │                 <i class="bi bi-exclamation-triangle" style="font-size: 3rem; color: var(--danger-red); margin-bottom: 1rem;"></i>
 890 │                 <h3 style="margin-bottom: 0.5rem;">${title}</h3>
 891 │                 <p style="color: var(--text-secondary); margin-bottom: 1.5rem;">${message}</p>
 892 │                 <button class="btn btn-primary" onclick="window.location.reload()">
 893 │                     <i class="bi bi-arrow-clockwise"></i> Recarregar PÃ¡gina
 894 │                 </button>
 895 │             </div>
 896 │         `;
 897 │     }
 898 │ }
 899 │ 
 900 │ // ===== FUNÃ‡Ã•ES GLOBAIS PARA O HTML =====
 901 │ 
 902 │ function loadSection(section) {
 903 │     AdminSystem.loadSection(section);
 904 │ }
 905 │ 
 906 │ function closePreview() {
 907 │     AdminSystem.closePreview();
 908 │ }
 909 │ 
 910 │ function closeUploadModal() {
 911 │     AdminSystem.closeAllModals();
 912 │ }
 913 │ 
 914 │ // ===== EXPORT PARA OUTROS MÃ“DULOS =====
 915 │ window.AdminSystem = AdminSystem;

═══════════════════════════════════════════════════════════════
ARQUIVO: public\admin\js\auth.js
Tamanho: 14.11KB
Modificado: 07/07/2025 16:08:02
═══════════════════════════════════════════════════════════════
   1 │ /**
   2 │  * Gerenciador de AutenticaÃ§Ã£o - Gracie Barra CMS
   3 │  * Arquivo: public/admin/js/auth.js
   4 │  */
   5 │ 
   6 │ 'use strict';
   7 │ 
   8 │ class AuthManager {
   9 │     static API_BASE = '../api/';
  10 │     static currentUser = null;
  11 │     static authToken = null;
  12 │     static refreshInterval = null;
  13 │     
  14 │     /**
  15 │      * Realiza login do usuÃ¡rio
  16 │      */
  17 │     static async login(username, password, rememberMe = false) {
  18 │         try {
  19 │             const response = await this.apiRequest('auth/login', {
  20 │                 method: 'POST',
  21 │                 body: JSON.stringify({
  22 │                     username: username.trim(),
  23 │                     password: password,
  24 │                     remember_me: rememberMe
  25 │                 })
  26 │             });
  27 │             
  28 │             if (response.success) {
  29 │                 this.currentUser = response.user;
  30 │                 this.setupAutoRefresh();
  31 │                 this.saveAuthState(rememberMe);
  32 │                 
  33 │                 return {
  34 │                     success: true,
  35 │                     user: response.user,
  36 │                     message: response.message || 'Login realizado com sucesso'
  37 │                 };
  38 │             } else {
  39 │                 return {
  40 │                     success: false,
  41 │                     message: response.message || 'Credenciais invÃ¡lidas'
  42 │                 };
  43 │             }
  44 │             
  45 │         } catch (error) {
  46 │             console.error('Erro no login:', error);
  47 │             return {
  48 │                 success: false,
  49 │                 message: 'Erro de conexÃ£o. Verifique sua internet e tente novamente.'
  50 │             };
  51 │         }
  52 │     }
  53 │     
  54 │     /**
  55 │      * Realiza logout do usuÃ¡rio
  56 │      */
  57 │     static async logout() {
  58 │         try {
  59 │             // Tentar fazer logout no servidor
  60 │             await this.apiRequest('auth/logout', {
  61 │                 method: 'POST'
  62 │             });
  63 │         } catch (error) {
  64 │             console.warn('Erro ao fazer logout no servidor:', error);
  65 │         } finally {
  66 │             // Limpar estado local independentemente do resultado do servidor
  67 │             this.clearAuthState();
  68 │             return true;
  69 │         }
  70 │     }
  71 │     
  72 │     /**
  73 │      * Verifica se usuÃ¡rio estÃ¡ autenticado
  74 │      */
  75 │     static async checkAuth() {
  76 │         try {
  77 │             // Primeiro, verificar se hÃ¡ dados salvos localmente
  78 │             if (!this.hasLocalAuthData()) {
  79 │                 return false;
  80 │             }
  81 │             
  82 │             // Verificar com o servidor
  83 │             const response = await this.apiRequest('auth/me', {
  84 │                 method: 'GET'
  85 │             });
  86 │             
  87 │             if (response.success && response.user) {
  88 │                 this.currentUser = response.user;
  89 │                 this.setupAutoRefresh();
  90 │                 return true;
  91 │             } else {
  92 │                 this.clearAuthState();
  93 │                 return false;
  94 │             }
  95 │             
  96 │         } catch (error) {
  97 │             console.error('Erro ao verificar autenticaÃ§Ã£o:', error);
  98 │             
  99 │             // Em caso de erro de rede, manter autenticaÃ§Ã£o local se existir
 100 │             if (this.hasLocalAuthData()) {
 101 │                 return true;
 102 │             }
 103 │             
 104 │             this.clearAuthState();
 105 │             return false;
 106 │         }
 107 │     }
 108 │     
 109 │     /**
 110 │      * ObtÃ©m usuÃ¡rio atual
 111 │      */
 112 │     static getCurrentUser() {
 113 │         return this.currentUser;
 114 │     }
 115 │     
 116 │     /**
 117 │      * Verifica se usuÃ¡rio tem permissÃ£o especÃ­fica
 118 │      */
 119 │     static hasPermission(action) {
 120 │         if (!this.currentUser) {
 121 │             return false;
 122 │         }
 123 │         
 124 │         const role = this.currentUser.role;
 125 │         
 126 │         // Admin tem todas as permissÃµes
 127 │         if (role === 'admin') {
 128 │             return true;
 129 │         }
 130 │         
 131 │         // Editor tem permissÃµes de visualizaÃ§Ã£o e ediÃ§Ã£o
 132 │         if (role === 'editor') {
 133 │             const editorPermissions = ['view', 'edit', 'create', 'upload', 'update_content'];
 134 │             return editorPermissions.includes(action);
 135 │         }
 136 │         
 137 │         // Viewer sÃ³ pode visualizar
 138 │         if (role === 'viewer') {
 139 │             return action === 'view';
 140 │         }
 141 │         
 142 │         return false;
 143 │     }
 144 │     
 145 │     /**
 146 │      * Verifica se usuÃ¡rio Ã© admin
 147 │      */
 148 │     static isAdmin() {
 149 │         return this.currentUser?.role === 'admin';
 150 │     }
 151 │     
 152 │     /**
 153 │      * Verifica se usuÃ¡rio pode editar
 154 │      */
 155 │     static canEdit() {
 156 │         return this.hasPermission('edit');
 157 │     }
 158 │     
 159 │     /**
 160 │      * Atualiza dados do usuÃ¡rio atual
 161 │      */
 162 │     static async refreshUserData() {
 163 │         try {
 164 │             const response = await this.apiRequest('auth/me', {
 165 │                 method: 'GET'
 166 │             });
 167 │             
 168 │             if (response.success && response.user) {
 169 │                 this.currentUser = response.user;
 170 │                 this.saveAuthState();
 171 │                 return response.user;
 172 │             }
 173 │             
 174 │             return null;
 175 │             
 176 │         } catch (error) {
 177 │             console.error('Erro ao atualizar dados do usuÃ¡rio:', error);
 178 │             return null;
 179 │         }
 180 │     }
 181 │     
 182 │     /**
 183 │      * Altera senha do usuÃ¡rio
 184 │      */
 185 │     static async changePassword(userId, currentPassword, newPassword) {
 186 │         try {
 187 │             const response = await this.apiRequest('users/password', {
 188 │                 method: 'PUT',
 189 │                 body: JSON.stringify({
 190 │                     user_id: userId,
 191 │                     current_password: currentPassword,
 192 │                     new_password: newPassword
 193 │                 })
 194 │             });
 195 │             
 196 │             return response;
 197 │             
 198 │         } catch (error) {
 199 │             console.error('Erro ao alterar senha:', error);
 200 │             return {
 201 │                 success: false,
 202 │                 message: 'Erro de conexÃ£o ao alterar senha'
 203 │             };
 204 │         }
 205 │     }
 206 │     
 207 │     /**
 208 │      * Solicita redefiniÃ§Ã£o de senha (se implementado)
 209 │      */
 210 │     static async requestPasswordReset(email) {
 211 │         try {
 212 │             const response = await this.apiRequest('auth/forgot-password', {
 213 │                 method: 'POST',
 214 │                 body: JSON.stringify({ email })
 215 │             });
 216 │             
 217 │             return response;
 218 │             
 219 │         } catch (error) {
 220 │             console.error('Erro ao solicitar redefiniÃ§Ã£o de senha:', error);
 221 │             return {
 222 │                 success: false,
 223 │                 message: 'Erro de conexÃ£o'
 224 │             };
 225 │         }
 226 │     }
 227 │     
 228 │     /**
 229 │      * Atualiza perfil do usuÃ¡rio
 230 │      */
 231 │     static async updateProfile(userId, userData) {
 232 │         try {
 233 │             const response = await this.apiRequest(`users/update/${userId}`, {
 234 │                 method: 'PUT',
 235 │                 body: JSON.stringify(userData)
 236 │             });
 237 │             
 238 │             if (response.success) {
 239 │                 // Atualizar dados locais se foi o prÃ³prio usuÃ¡rio
 240 │                 if (this.currentUser && this.currentUser.id === userId) {
 241 │                     await this.refreshUserData();
 242 │                 }
 243 │             }
 244 │             
 245 │             return response;
 246 │             
 247 │         } catch (error) {
 248 │             console.error('Erro ao atualizar perfil:', error);
 249 │             return {
 250 │                 success: false,
 251 │                 message: 'Erro de conexÃ£o ao atualizar perfil'
 252 │             };
 253 │         }
 254 │     }
 255 │     
 256 │     /**
 257 │      * Configura renovaÃ§Ã£o automÃ¡tica da sessÃ£o
 258 │      */
 259 │     static setupAutoRefresh() {
 260 │         // Limpar intervalo anterior se existir
 261 │         if (this.refreshInterval) {
 262 │             clearInterval(this.refreshInterval);
 263 │         }
 264 │         
 265 │         // Renovar sessÃ£o a cada 30 minutos
 266 │         this.refreshInterval = setInterval(async () => {
 267 │             try {
 268 │                 await this.apiRequest('auth/refresh', {
 269 │                     method: 'POST'
 270 │                 });
 271 │                 
 272 │                 this.saveAuthState();
 273 │                 
 274 │             } catch (error) {
 275 │                 console.warn('Erro ao renovar sessÃ£o:', error);
 276 │                 
 277 │                 // Se falhar muito, fazer logout
 278 │                 this.clearAuthState();
 279 │                 window.location.reload();
 280 │             }
 281 │         }, 30 * 60 * 1000); // 30 minutos
 282 │     }
 283 │     
 284 │     /**
 285 │      * Salva estado de autenticaÃ§Ã£o no localStorage
 286 │      */
 287 │     static saveAuthState(persistent = false) {
 288 │         const authData = {
 289 │             user: this.currentUser,
 290 │             timestamp: Date.now(),
 291 │             persistent: persistent
 292 │         };
 293 │         
 294 │         try {
 295 │             if (persistent) {
 296 │                 localStorage.setItem('gb_auth', JSON.stringify(authData));
 297 │             } else {
 298 │                 sessionStorage.setItem('gb_auth', JSON.stringify(authData));
 299 │             }
 300 │         } catch (error) {
 301 │             console.warn('Erro ao salvar estado de autenticaÃ§Ã£o:', error);
 302 │         }
 303 │     }
 304 │     
 305 │     /**
 306 │      * Carrega estado de autenticaÃ§Ã£o do localStorage
 307 │      */
 308 │     static loadAuthState() {
 309 │         try {
 310 │             // Tentar carregar do localStorage primeiro (lembrar-me)
 311 │             let authData = localStorage.getItem('gb_auth');
 312 │             
 313 │             // Se nÃ£o encontrar, tentar sessionStorage
 314 │             if (!authData) {
 315 │                 authData = sessionStorage.getItem('gb_auth');
 316 │             }
 317 │             
 318 │             if (authData) {
 319 │                 const parsed = JSON.parse(authData);
 320 │                 
 321 │                 // Verificar se nÃ£o expirou (7 dias mÃ¡ximo)
 322 │                 const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 dias
 323 │                 if (Date.now() - parsed.timestamp < maxAge) {
 324 │                     this.currentUser = parsed.user;
 325 │                     return true;
 326 │                 }
 327 │             }
 328 │             
 329 │             return false;
 330 │             
 331 │         } catch (error) {
 332 │             console.warn('Erro ao carregar estado de autenticaÃ§Ã£o:', error);
 333 │             return false;
 334 │         }
 335 │     }
 336 │     
 337 │     /**
 338 │      * Limpa estado de autenticaÃ§Ã£o
 339 │      */
 340 │     static clearAuthState() {
 341 │         this.currentUser = null;
 342 │         this.authToken = null;
 343 │         
 344 │         // Limpar intervalos
 345 │         if (this.refreshInterval) {
 346 │             clearInterval(this.refreshInterval);
 347 │             this.refreshInterval = null;
 348 │         }
 349 │         
 350 │         // Limpar storage
 351 │         try {
 352 │             localStorage.removeItem('gb_auth');
 353 │             sessionStorage.removeItem('gb_auth');
 354 │         } catch (error) {
 355 │             console.warn('Erro ao limpar storage:', error);
 356 │         }
 357 │     }
 358 │     
 359 │     /**
 360 │      * Verifica se hÃ¡ dados de autenticaÃ§Ã£o locais
 361 │      */
 362 │     static hasLocalAuthData() {
 363 │         return !!(localStorage.getItem('gb_auth') || sessionStorage.getItem('gb_auth'));
 364 │     }
 365 │     
 366 │     /**
 367 │      * Faz requisiÃ§Ã£o para API com autenticaÃ§Ã£o
 368 │      */
 369 │     static async apiRequest(endpoint, options = {}) {
 370 │         const url = this.API_BASE + endpoint;
 371 │         
 372 │         const defaultOptions = {
 373 │             headers: {
 374 │                 'Content-Type': 'application/json',
 375 │                 'X-Requested-With': 'XMLHttpRequest'
 376 │             },
 377 │             credentials: 'same-origin'
 378 │         };
 379 │         
 380 │         // Adicionar token se disponÃ­vel
 381 │         if (this.authToken) {
 382 │             defaultOptions.headers['Authorization'] = `Bearer ${this.authToken}`;
 383 │         }
 384 │         
 385 │         const finalOptions = {
 386 │             ...defaultOptions,
 387 │             ...options,
 388 │             headers: {
 389 │                 ...defaultOptions.headers,
 390 │                 ...(options.headers || {})
 391 │             }
 392 │         };
 393 │         
 394 │         const response = await fetch(url, finalOptions);
 395 │         
 396 │         // Verificar se a resposta Ã© JSON
 397 │         const contentType = response.headers.get('content-type');
 398 │         if (!contentType || !contentType.includes('application/json')) {
 399 │             throw new Error('Resposta invÃ¡lida do servidor');
 400 │         }
 401 │         
 402 │         const data = await response.json();
 403 │         
 404 │         // Se receber 401, limpar autenticaÃ§Ã£o
 405 │         if (response.status === 401) {
 406 │             this.clearAuthState();
 407 │             
 408 │             // Redirecionar para login se nÃ£o estiver na pÃ¡gina de login
 409 │             if (!window.location.pathname.includes('login')) {
 410 │                 window.location.reload();
 411 │             }
 412 │         }
 413 │         
 414 │         // Se nÃ£o foi successful mas a requisiÃ§Ã£o passou, retornar os dados mesmo assim
 415 │         if (!response.ok && !data.success) {
 416 │             throw new Error(data.message || `Erro HTTP ${response.status}`);
 417 │         }
 418 │         
 419 │         return data;
 420 │     }
 421 │     
 422 │     /**
 423 │      * Monitora estado de conexÃ£o
 424 │      */
 425 │     static setupConnectionMonitoring() {
 426 │         window.addEventListener('online', () => {
 427 │             console.log('ConexÃ£o restaurada');
 428 │             
 429 │             // Tentar verificar autenticaÃ§Ã£o quando voltar online
 430 │             if (this.currentUser) {
 431 │                 this.checkAuth();
 432 │             }
 433 │         });
 434 │         
 435 │         window.addEventListener('offline', () => {
 436 │             console.log('ConexÃ£o perdida');
 437 │         });
 438 │     }
 439 │     
 440 │     /**
 441 │      * Inicializa o gerenciador de autenticaÃ§Ã£o
 442 │      */
 443 │     static init() {
 444 │         // Carregar estado salvo
 445 │         this.loadAuthState();
 446 │         
 447 │         // Configurar monitoramento de conexÃ£o
 448 │         this.setupConnectionMonitoring();
 449 │         
 450 │         // Se hÃ¡ usuÃ¡rio carregado, configurar auto-refresh
 451 │         if (this.currentUser) {
 452 │             this.setupAutoRefresh();
 453 │         }
 454 │         
 455 │         console.log('AuthManager inicializado');
 456 │     }
 457 │     
 458 │     /**
 459 │      * Limpa todos os dados ao destruir
 460 │      */
 461 │     static destroy() {
 462 │         this.clearAuthState();
 463 │         
 464 │         // Remover event listeners se necessÃ¡rio
 465 │         window.removeEventListener('beforeunload', this.handleBeforeUnload);
 466 │     }
 467 │     
 468 │     /**
 469 │      * Handler para antes de sair da pÃ¡gina
 470 │      */
 471 │     static handleBeforeUnload = () => {
 472 │         // Salvar estado se necessÃ¡rio
 473 │         if (this.currentUser) {
 474 │             this.saveAuthState();
 475 │         }
 476 │     }
 477 │ }
 478 │ 
 479 │ // Event listeners globais
 480 │ document.addEventListener('DOMContentLoaded', () => {
 481 │     AuthManager.init();
 482 │ });
 483 │ 
 484 │ window.addEventListener('beforeunload', AuthManager.handleBeforeUnload);
 485 │ 
 486 │ // Export para outros mÃ³dulos
 487 │ window.AuthManager = AuthManager;

═══════════════════════════════════════════════════════════════
ARQUIVO: public\admin\js\content.js
Tamanho: 18.84KB
Modificado: 07/07/2025 16:08:18
═══════════════════════════════════════════════════════════════
   1 │ /**
   2 │  * Gerenciador de ConteÃºdo - Gracie Barra CMS
   3 │  * Arquivo: public/admin/js/content.js
   4 │  */
   5 │ 
   6 │ 'use strict';
   7 │ 
   8 │ class ContentManager {
   9 │     static API_BASE = '../api/';
  10 │     static cache = new Map();
  11 │     static cacheTimeout = 5 * 60 * 1000; // 5 minutos
  12 │     static autoSaveDelay = 3000; // 3 segundos
  13 │     static autoSaveTimeouts = new Map();
  14 │     
  15 │     /**
  16 │      * ObtÃ©m todo o conteÃºdo do site
  17 │      */
  18 │     static async getAllContent(useCache = true) {
  19 │         const cacheKey = 'all_content';
  20 │         
  21 │         // Verificar cache
  22 │         if (useCache && this.isCacheValid(cacheKey)) {
  23 │             return this.cache.get(cacheKey).data;
  24 │         }
  25 │         
  26 │         try {
  27 │             const response = await this.apiRequest('content/sections');
  28 │             
  29 │             if (response.success) {
  30 │                 // Salvar no cache
  31 │                 this.setCache(cacheKey, response.content);
  32 │                 return response.content;
  33 │             } else {
  34 │                 throw new Error(response.message || 'Erro ao carregar conteÃºdo');
  35 │             }
  36 │             
  37 │         } catch (error) {
  38 │             console.error('Erro ao carregar todo o conteÃºdo:', error);
  39 │             
  40 │             // Retornar cache se disponÃ­vel em caso de erro
  41 │             if (this.cache.has(cacheKey)) {
  42 │                 console.warn('Usando conteÃºdo do cache devido a erro');
  43 │                 return this.cache.get(cacheKey).data;
  44 │             }
  45 │             
  46 │             throw error;
  47 │         }
  48 │     }
  49 │     
  50 │     /**
  51 │      * ObtÃ©m conteÃºdo de uma seÃ§Ã£o especÃ­fica
  52 │      */
  53 │     static async getSectionContent(section, useCache = true) {
  54 │         const cacheKey = `section_${section}`;
  55 │         
  56 │         // Verificar cache
  57 │         if (useCache && this.isCacheValid(cacheKey)) {
  58 │             return this.cache.get(cacheKey).data;
  59 │         }
  60 │         
  61 │         try {
  62 │             const response = await this.apiRequest(`content/sections/${encodeURIComponent(section)}`);
  63 │             
  64 │             if (response.success) {
  65 │                 // Salvar no cache
  66 │                 this.setCache(cacheKey, response.content);
  67 │                 return response.content;
  68 │             } else {
  69 │                 throw new Error(response.message || 'Erro ao carregar seÃ§Ã£o');
  70 │             }
  71 │             
  72 │         } catch (error) {
  73 │             console.error(`Erro ao carregar seÃ§Ã£o ${section}:`, error);
  74 │             
  75 │             // Retornar cache se disponÃ­vel
  76 │             if (this.cache.has(cacheKey)) {
  77 │                 console.warn('Usando conteÃºdo do cache devido a erro');
  78 │                 return this.cache.get(cacheKey).data;
  79 │             }
  80 │             
  81 │             throw error;
  82 │         }
  83 │     }
  84 │     
  85 │     /**
  86 │      * Atualiza conteÃºdo de uma seÃ§Ã£o
  87 │      */
  88 │     static async updateSectionContent(section, data, options = {}) {
  89 │         try {
  90 │             // Verificar permissÃµes
  91 │             if (!AuthManager.canEdit()) {
  92 │                 throw new Error('Sem permissÃ£o para editar conteÃºdo');
  93 │             }
  94 │             
  95 │             const response = await this.apiRequest(`content/sections/${encodeURIComponent(section)}`, {
  96 │                 method: 'PUT',
  97 │                 body: JSON.stringify(data)
  98 │             });
  99 │             
 100 │             if (response.success) {
 101 │                 // Invalidar cache relacionado
 102 │                 this.invalidateCache(`section_${section}`);
 103 │                 this.invalidateCache('all_content');
 104 │                 
 105 │                 // Mostrar sucesso se nÃ£o for silencioso
 106 │                 if (!options.silent) {
 107 │                     this.showSuccessMessage(response.message || 'SeÃ§Ã£o atualizada com sucesso');
 108 │                 }
 109 │                 
 110 │                 // Emitir evento personalizado
 111 │                 this.emitContentUpdated(section, data);
 112 │                 
 113 │                 return response;
 114 │             } else {
 115 │                 throw new Error(response.message || 'Erro ao atualizar seÃ§Ã£o');
 116 │             }
 117 │             
 118 │         } catch (error) {
 119 │             console.error(`Erro ao atualizar seÃ§Ã£o ${section}:`, error);
 120 │             
 121 │             if (!options.silent) {
 122 │                 this.showErrorMessage('Erro ao salvar: ' + error.message);
 123 │             }
 124 │             
 125 │             throw error;
 126 │         }
 127 │     }
 128 │     
 129 │     /**
 130 │      * Remove um campo especÃ­fico
 131 │      */
 132 │     static async removeField(section, fieldName) {
 133 │         try {
 134 │             if (!AuthManager.canEdit()) {
 135 │                 throw new Error('Sem permissÃ£o para editar conteÃºdo');
 136 │             }
 137 │             
 138 │             const response = await this.apiRequest('content/field', {
 139 │                 method: 'DELETE',
 140 │                 body: JSON.stringify({
 141 │                     section: section,
 142 │                     field_name: fieldName
 143 │                 })
 144 │             });
 145 │             
 146 │             if (response.success) {
 147 │                 // Invalidar cache
 148 │                 this.invalidateCache(`section_${section}`);
 149 │                 this.invalidateCache('all_content');
 150 │                 
 151 │                 this.showSuccessMessage(response.message || 'Campo removido com sucesso');
 152 │                 return response;
 153 │             } else {
 154 │                 throw new Error(response.message || 'Erro ao remover campo');
 155 │             }
 156 │             
 157 │         } catch (error) {
 158 │             console.error(`Erro ao remover campo ${fieldName}:`, error);
 159 │             this.showErrorMessage('Erro ao remover campo: ' + error.message);
 160 │             throw error;
 161 │         }
 162 │     }
 163 │     
 164 │     /**
 165 │      * Busca conteÃºdo por termo
 166 │      */
 167 │     static async searchContent(term, sections = null) {
 168 │         try {
 169 │             const params = new URLSearchParams({ q: term });
 170 │             
 171 │             if (sections && Array.isArray(sections)) {
 172 │                 params.append('sections', sections.join(','));
 173 │             }
 174 │             
 175 │             const response = await this.apiRequest(`content/search?${params}`);
 176 │             
 177 │             if (response.success) {
 178 │                 return {
 179 │                     results: response.results,
 180 │                     count: response.count,
 181 │                     query: response.query
 182 │                 };
 183 │             } else {
 184 │                 throw new Error(response.message || 'Erro na busca');
 185 │             }
 186 │             
 187 │         } catch (error) {
 188 │             console.error('Erro na busca:', error);
 189 │             throw error;
 190 │         }
 191 │     }
 192 │     
 193 │     /**
 194 │      * Cria backup de uma seÃ§Ã£o
 195 │      */
 196 │     static async createBackup(section) {
 197 │         try {
 198 │             if (!AuthManager.canEdit()) {
 199 │                 throw new Error('Sem permissÃ£o para criar backups');
 200 │             }
 201 │             
 202 │             const response = await this.apiRequest('content/backup', {
 203 │                 method: 'POST',
 204 │                 body: JSON.stringify({ section })
 205 │             });
 206 │             
 207 │             if (response.success) {
 208 │                 this.showSuccessMessage('Backup criado com sucesso');
 209 │                 return response;
 210 │             } else {
 211 │                 throw new Error(response.message || 'Erro ao criar backup');
 212 │             }
 213 │             
 214 │         } catch (error) {
 215 │             console.error(`Erro ao criar backup da seÃ§Ã£o ${section}:`, error);
 216 │             this.showErrorMessage('Erro ao criar backup: ' + error.message);
 217 │             throw error;
 218 │         }
 219 │     }
 220 │     
 221 │     /**
 222 │      * Lista backups disponÃ­veis
 223 │      */
 224 │     static async getBackups(section = null, limit = 50) {
 225 │         try {
 226 │             const params = new URLSearchParams();
 227 │             
 228 │             if (section) {
 229 │                 params.append('section', section);
 230 │             }
 231 │             
 232 │             if (limit) {
 233 │                 params.append('limit', limit.toString());
 234 │             }
 235 │             
 236 │             const response = await this.apiRequest(`content/backup?${params}`);
 237 │             
 238 │             if (response.success) {
 239 │                 return response.backups;
 240 │             } else {
 241 │                 throw new Error(response.message || 'Erro ao listar backups');
 242 │             }
 243 │             
 244 │         } catch (error) {
 245 │             console.error('Erro ao listar backups:', error);
 246 │             throw error;
 247 │         }
 248 │     }
 249 │     
 250 │     /**
 251 │      * Restaura backup
 252 │      */
 253 │     static async restoreBackup(backupId) {
 254 │         try {
 255 │             if (!AuthManager.canEdit()) {
 256 │                 throw new Error('Sem permissÃ£o para restaurar backups');
 257 │             }
 258 │             
 259 │             const confirmed = confirm('Tem certeza que deseja restaurar este backup? As alteraÃ§Ãµes atuais serÃ£o perdidas.');
 260 │             if (!confirmed) {
 261 │                 return { success: false, message: 'OperaÃ§Ã£o cancelada' };
 262 │             }
 263 │             
 264 │             const response = await this.apiRequest('content/restore', {
 265 │                 method: 'POST',
 266 │                 body: JSON.stringify({ backup_id: backupId })
 267 │             });
 268 │             
 269 │             if (response.success) {
 270 │                 // Invalidar todo o cache
 271 │                 this.clearCache();
 272 │                 
 273 │                 this.showSuccessMessage('Backup restaurado com sucesso');
 274 │                 
 275 │                 // Recarregar pÃ¡gina para refletir mudanÃ§as
 276 │                 setTimeout(() => {
 277 │                     window.location.reload();
 278 │                 }, 1500);
 279 │                 
 280 │                 return response;
 281 │             } else {
 282 │                 throw new Error(response.message || 'Erro ao restaurar backup');
 283 │             }
 284 │             
 285 │         } catch (error) {
 286 │             console.error('Erro ao restaurar backup:', error);
 287 │             this.showErrorMessage('Erro ao restaurar backup: ' + error.message);
 288 │             throw error;
 289 │         }
 290 │     }
 291 │     
 292 │     /**
 293 │      * ObtÃ©m estatÃ­sticas do conteÃºdo
 294 │      */
 295 │     static async getStats() {
 296 │         try {
 297 │             const response = await this.apiRequest('content/stats');
 298 │             
 299 │             if (response.success) {
 300 │                 return response.stats;
 301 │             } else {
 302 │                 throw new Error(response.message || 'Erro ao obter estatÃ­sticas');
 303 │             }
 304 │             
 305 │         } catch (error) {
 306 │             console.error('Erro ao obter estatÃ­sticas:', error);
 307 │             throw error;
 308 │         }
 309 │     }
 310 │     
 311 │     /**
 312 │      * Configura auto-save para um formulÃ¡rio
 313 │      */
 314 │     static setupAutoSave(form, section) {
 315 │         if (!form || !section) return;
 316 │         
 317 │         const inputs = form.querySelectorAll('input, textarea, select');
 318 │         
 319 │         inputs.forEach(input => {
 320 │             ['input', 'change', 'paste'].forEach(eventType => {
 321 │                 input.addEventListener(eventType, () => {
 322 │                     this.scheduleAutoSave(form, section);
 323 │                 });
 324 │             });
 325 │         });
 326 │     }
 327 │     
 328 │     /**
 329 │      * Agenda auto-save com delay
 330 │      */
 331 │     static scheduleAutoSave(form, section) {
 332 │         // Cancelar auto-save anterior se existir
 333 │         if (this.autoSaveTimeouts.has(section)) {
 334 │             clearTimeout(this.autoSaveTimeouts.get(section));
 335 │         }
 336 │         
 337 │         // Agendar novo auto-save
 338 │         const timeoutId = setTimeout(async () => {
 339 │             try {
 340 │                 const formData = this.extractFormData(form);
 341 │                 await this.updateSectionContent(section, formData, { silent: true });
 342 │                 
 343 │                 this.showAutoSaveIndicator(true);
 344 │                 
 345 │             } catch (error) {
 346 │                 console.warn('Erro no auto-save:', error);
 347 │                 this.showAutoSaveIndicator(false);
 348 │             }
 349 │         }, this.autoSaveDelay);
 350 │         
 351 │         this.autoSaveTimeouts.set(section, timeoutId);
 352 │     }
 353 │     
 354 │     /**
 355 │      * Extrai dados do formulÃ¡rio
 356 │      */
 357 │     static extractFormData(form) {
 358 │         const formData = new FormData(form);
 359 │         const data = {};
 360 │         
 361 │         for (const [key, value] of formData.entries()) {
 362 │             // Processar tipos especiais
 363 │             if (key === 'menu_items') {
 364 │                 // Converter textarea de menu em array
 365 │                 data[key] = value.split('\n')
 366 │                     .map(item => item.trim())
 367 │                     .filter(item => item.length > 0);
 368 │             } else if (key.endsWith('_json')) {
 369 │                 // Tentar fazer parse de campos JSON
 370 │                 try {
 371 │                     data[key] = JSON.parse(value);
 372 │                 } catch (e) {
 373 │                     data[key] = value;
 374 │                 }
 375 │             } else {
 376 │                 data[key] = value;
 377 │             }
 378 │         }
 379 │         
 380 │         return data;
 381 │     }
 382 │     
 383 │     /**
 384 │      * Mostra indicador de auto-save
 385 │      */
 386 │     static showAutoSaveIndicator(success) {
 387 │         const indicator = this.getOrCreateAutoSaveIndicator();
 388 │         
 389 │         indicator.textContent = success ? 'âœ“ Auto-salvo' : 'âš  Erro no auto-save';
 390 │         indicator.className = `auto-save-indicator ${success ? 'success' : 'error'}`;
 391 │         indicator.style.display = 'block';
 392 │         
 393 │         // Esconder apÃ³s 3 segundos
 394 │         setTimeout(() => {
 395 │             indicator.style.display = 'none';
 396 │         }, 3000);
 397 │     }
 398 │     
 399 │     /**
 400 │      * Cria ou obtÃ©m indicador de auto-save
 401 │      */
 402 │     static getOrCreateAutoSaveIndicator() {
 403 │         let indicator = document.getElementById('autoSaveIndicator');
 404 │         
 405 │         if (!indicator) {
 406 │             indicator = document.createElement('div');
 407 │             indicator.id = 'autoSaveIndicator';
 408 │             indicator.className = 'auto-save-indicator';
 409 │             indicator.style.cssText = `
 410 │                 position: fixed;
 411 │                 top: 80px;
 412 │                 right: 20px;
 413 │                 padding: 8px 12px;
 414 │                 border-radius: 4px;
 415 │                 font-size: 12px;
 416 │                 font-weight: 500;
 417 │                 z-index: 9999;
 418 │                 display: none;
 419 │                 transition: all 0.3s ease;
 420 │             `;
 421 │             
 422 │             document.body.appendChild(indicator);
 423 │             
 424 │             // Adicionar estilos CSS
 425 │             if (!document.getElementById('autoSaveStyles')) {
 426 │                 const style = document.createElement('style');
 427 │                 style.id = 'autoSaveStyles';
 428 │                 style.textContent = `
 429 │                     .auto-save-indicator.success {
 430 │                         background: #d1fae5;
 431 │                         color: #065f46;
 432 │                         border: 1px solid #a7f3d0;
 433 │                     }
 434 │                     .auto-save-indicator.error {
 435 │                         background: #fef2f2;
 436 │                         color: #dc2626;
 437 │                         border: 1px solid #fecaca;
 438 │                     }
 439 │                 `;
 440 │                 document.head.appendChild(style);
 441 │             }
 442 │         }
 443 │         
 444 │         return indicator;
 445 │     }
 446 │     
 447 │     /**
 448 │      * Emite evento personalizado quando conteÃºdo Ã© atualizado
 449 │      */
 450 │     static emitContentUpdated(section, data) {
 451 │         const event = new CustomEvent('contentUpdated', {
 452 │             detail: { section, data }
 453 │         });
 454 │         
 455 │         document.dispatchEvent(event);
 456 │     }
 457 │     
 458 │     // ===== MÃ‰TODOS DE CACHE =====
 459 │     
 460 │     static setCache(key, data) {
 461 │         this.cache.set(key, {
 462 │             data: data,
 463 │             timestamp: Date.now()
 464 │         });
 465 │     }
 466 │     
 467 │     static isCacheValid(key) {
 468 │         const cached = this.cache.get(key);
 469 │         if (!cached) return false;
 470 │         
 471 │         return (Date.now() - cached.timestamp) < this.cacheTimeout;
 472 │     }
 473 │     
 474 │     static invalidateCache(key) {
 475 │         this.cache.delete(key);
 476 │     }
 477 │     
 478 │     static clearCache() {
 479 │         this.cache.clear();
 480 │     }
 481 │     
 482 │     // ===== MÃ‰TODOS DE UI =====
 483 │     
 484 │     static showSuccessMessage(message) {
 485 │         if (window.AdminSystem && window.AdminSystem.showSuccess) {
 486 │             window.AdminSystem.showSuccess(message);
 487 │         } else {
 488 │             console.log('âœ“', message);
 489 │         }
 490 │     }
 491 │     
 492 │     static showErrorMessage(message) {
 493 │         if (window.AdminSystem && window.AdminSystem.showError) {
 494 │             window.AdminSystem.showError(message);
 495 │         } else {
 496 │             console.error('âœ—', message);
 497 │         }
 498 │     }
 499 │     
 500 │     // ===== MÃ‰TODO DE API =====
 501 │     
 502 │     static async apiRequest(endpoint, options = {}) {
 503 │         if (window.AuthManager && window.AuthManager.apiRequest) {
 504 │             return await window.AuthManager.apiRequest(`content/${endpoint}`, options);
 505 │         } else {
 506 │             // Fallback se AuthManager nÃ£o estiver disponÃ­vel
 507 │             const url = this.API_BASE + 'content/' + endpoint;
 508 │             
 509 │             const defaultOptions = {
 510 │                 headers: {
 511 │                     'Content-Type': 'application/json',
 512 │                     'X-Requested-With': 'XMLHttpRequest'
 513 │                 },
 514 │                 credentials: 'same-origin'
 515 │             };
 516 │             
 517 │             const finalOptions = {
 518 │                 ...defaultOptions,
 519 │                 ...options,
 520 │                 headers: {
 521 │                     ...defaultOptions.headers,
 522 │                     ...(options.headers || {})
 523 │                 }
 524 │             };
 525 │             
 526 │             const response = await fetch(url, finalOptions);
 527 │             
 528 │             if (!response.ok) {
 529 │                 throw new Error(`HTTP ${response.status}`);
 530 │             }
 531 │             
 532 │             return await response.json();
 533 │         }
 534 │     }
 535 │     
 536 │     /**
 537 │      * Inicializa o gerenciador de conteÃºdo
 538 │      */
 539 │     static init() {
 540 │         // Configurar limpeza de cache periÃ³dica
 541 │         setInterval(() => {
 542 │             this.cleanupExpiredCache();
 543 │         }, 60000); // A cada minuto
 544 │         
 545 │         // Listener para eventos de conteÃºdo atualizado
 546 │         document.addEventListener('contentUpdated', (event) => {
 547 │             console.log('ConteÃºdo atualizado:', event.detail);
 548 │         });
 549 │         
 550 │         console.log('ContentManager inicializado');
 551 │     }
 552 │     
 553 │     /**
 554 │      * Remove itens expirados do cache
 555 │      */
 556 │     static cleanupExpiredCache() {
 557 │         const now = Date.now();
 558 │         
 559 │         for (const [key, cached] of this.cache.entries()) {
 560 │             if ((now - cached.timestamp) > this.cacheTimeout) {
 561 │                 this.cache.delete(key);
 562 │             }
 563 │         }
 564 │     }
 565 │     
 566 │     /**
 567 │      * Destroi o gerenciador e limpa recursos
 568 │      */
 569 │     static destroy() {
 570 │         // Cancelar todos os auto-saves pendentes
 571 │         for (const timeoutId of this.autoSaveTimeouts.values()) {
 572 │             clearTimeout(timeoutId);
 573 │         }
 574 │         this.autoSaveTimeouts.clear();
 575 │         
 576 │         // Limpar cache
 577 │         this.clearCache();
 578 │         
 579 │         // Remover indicador de auto-save
 580 │         const indicator = document.getElementById('autoSaveIndicator');
 581 │         if (indicator) {
 582 │             indicator.remove();
 583 │         }
 584 │     }
 585 │ }
 586 │ 
 587 │ // Inicializar quando DOM estiver pronto
 588 │ document.addEventListener('DOMContentLoaded', () => {
 589 │     ContentManager.init();
 590 │ });
 591 │ 
 592 │ // Cleanup ao sair da pÃ¡gina
 593 │ window.addEventListener('beforeunload', () => {
 594 │     ContentManager.destroy();
 595 │ });
 596 │ 
 597 │ // Export para outros mÃ³dulos
 598 │ window.ContentManager = ContentManager;

═══════════════════════════════════════════════════════════════
ARQUIVO: public\admin\js\file.js
Tamanho: 25.71KB
Modificado: 07/07/2025 16:09:15
═══════════════════════════════════════════════════════════════
   1 │ /**
   2 │  * Gerenciador de Arquivos - Gracie Barra CMS
   3 │  * Arquivo: public/admin/js/files.js
   4 │  */
   5 │ 
   6 │ 'use strict';
   7 │ 
   8 │ class FileManager {
   9 │     static API_BASE = '../api/';
  10 │     static allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml'];
  11 │     static maxFileSize = 5 * 1024 * 1024; // 5MB
  12 │     static uploadQueue = [];
  13 │     static isUploading = false;
  14 │     
  15 │     /**
  16 │      * Faz upload de um arquivo
  17 │      */
  18 │     static async uploadFile(file, options = {}) {
  19 │         try {
  20 │             // Validar arquivo
  21 │             this.validateFile(file);
  22 │             
  23 │             // Verificar permissÃµes
  24 │             if (!AuthManager.hasPermission('upload')) {
  25 │                 throw new Error('Sem permissÃ£o para fazer upload de arquivos');
  26 │             }
  27 │             
  28 │             const formData = new FormData();
  29 │             formData.append('file', file);
  30 │             
  31 │             if (options.altText) {
  32 │                 formData.append('alt_text', options.altText);
  33 │             }
  34 │             
  35 │             if (options.description) {
  36 │                 formData.append('description', options.description);
  37 │             }
  38 │             
  39 │             const response = await this.apiRequest('files/upload', {
  40 │                 method: 'POST',
  41 │                 body: formData,
  42 │                 // NÃ£o definir Content-Type para FormData
  43 │                 headers: {}
  44 │             });
  45 │             
  46 │             if (response.success) {
  47 │                 this.showSuccessMessage(`Arquivo ${file.name} enviado com sucesso`);
  48 │                 
  49 │                 // Emitir evento de upload concluÃ­do
  50 │                 this.emitFileUploaded(response);
  51 │                 
  52 │                 return response;
  53 │             } else {
  54 │                 throw new Error(response.message || 'Erro no upload');
  55 │             }
  56 │             
  57 │         } catch (error) {
  58 │             console.error('Erro no upload:', error);
  59 │             this.showErrorMessage(`Erro ao enviar ${file.name}: ${error.message}`);
  60 │             throw error;
  61 │         }
  62 │     }
  63 │     
  64 │     /**
  65 │      * Faz upload de mÃºltiplos arquivos
  66 │      */
  67 │     static async uploadMultipleFiles(files, options = {}) {
  68 │         const results = [];
  69 │         let successCount = 0;
  70 │         
  71 │         // Adicionar Ã  fila de upload
  72 │         for (const file of files) {
  73 │             this.uploadQueue.push({ file, options });
  74 │         }
  75 │         
  76 │         // Processar fila se nÃ£o estiver processando
  77 │         if (!this.isUploading) {
  78 │             this.processUploadQueue();
  79 │         }
  80 │         
  81 │         return {
  82 │             success: true,
  83 │             message: `${files.length} arquivos adicionados Ã  fila de upload`
  84 │         };
  85 │     }
  86 │     
  87 │     /**
  88 │      * Processa fila de upload
  89 │      */
  90 │     static async processUploadQueue() {
  91 │         if (this.isUploading || this.uploadQueue.length === 0) {
  92 │             return;
  93 │         }
  94 │         
  95 │         this.isUploading = true;
  96 │         const totalFiles = this.uploadQueue.length;
  97 │         let processedFiles = 0;
  98 │         let successCount = 0;
  99 │         
 100 │         this.showUploadProgress(0, totalFiles);
 101 │         
 102 │         while (this.uploadQueue.length > 0) {
 103 │             const { file, options } = this.uploadQueue.shift();
 104 │             
 105 │             try {
 106 │                 await this.uploadFile(file, options);
 107 │                 successCount++;
 108 │             } catch (error) {
 109 │                 console.error(`Erro no upload de ${file.name}:`, error);
 110 │             }
 111 │             
 112 │             processedFiles++;
 113 │             this.showUploadProgress(processedFiles, totalFiles);
 114 │         }
 115 │         
 116 │         this.isUploading = false;
 117 │         this.hideUploadProgress();
 118 │         
 119 │         this.showSuccessMessage(`Upload concluÃ­do: ${successCount}/${totalFiles} arquivos enviados`);
 120 │     }
 121 │     
 122 │     /**
 123 │      * Lista arquivos com filtros
 124 │      */
 125 │     static async getFiles(filters = {}) {
 126 │         try {
 127 │             const params = new URLSearchParams();
 128 │             
 129 │             Object.entries(filters).forEach(([key, value]) => {
 130 │                 if (value !== null && value !== undefined && value !== '') {
 131 │                     params.append(key, value.toString());
 132 │                 }
 133 │             });
 134 │             
 135 │             const response = await this.apiRequest(`files/list?${params}`);
 136 │             
 137 │             if (response.success) {
 138 │                 return response.files;
 139 │             } else {
 140 │                 throw new Error(response.message || 'Erro ao listar arquivos');
 141 │             }
 142 │             
 143 │         } catch (error) {
 144 │             console.error('Erro ao listar arquivos:', error);
 145 │             throw error;
 146 │         }
 147 │     }
 148 │     
 149 │     /**
 150 │      * ObtÃ©m detalhes de um arquivo
 151 │      */
 152 │     static async getFileDetails(fileId) {
 153 │         try {
 154 │             const response = await this.apiRequest(`files/details/${fileId}`);
 155 │             
 156 │             if (response.success) {
 157 │                 return response.file;
 158 │             } else {
 159 │                 throw new Error(response.message || 'Arquivo nÃ£o encontrado');
 160 │             }
 161 │             
 162 │         } catch (error) {
 163 │             console.error(`Erro ao obter detalhes do arquivo ${fileId}:`, error);
 164 │             throw error;
 165 │         }
 166 │     }
 167 │     
 168 │     /**
 169 │      * Atualiza informaÃ§Ãµes de um arquivo
 170 │      */
 171 │     static async updateFile(fileId, data) {
 172 │         try {
 173 │             if (!AuthManager.canEdit()) {
 174 │                 throw new Error('Sem permissÃ£o para editar arquivos');
 175 │             }
 176 │             
 177 │             const response = await this.apiRequest(`files/details/${fileId}`, {
 178 │                 method: 'PUT',
 179 │                 body: JSON.stringify(data)
 180 │             });
 181 │             
 182 │             if (response.success) {
 183 │                 this.showSuccessMessage('Arquivo atualizado com sucesso');
 184 │                 
 185 │                 // Emitir evento de arquivo atualizado
 186 │                 this.emitFileUpdated(fileId, data);
 187 │                 
 188 │                 return response;
 189 │             } else {
 190 │                 throw new Error(response.message || 'Erro ao atualizar arquivo');
 191 │             }
 192 │             
 193 │         } catch (error) {
 194 │             console.error(`Erro ao atualizar arquivo ${fileId}:`, error);
 195 │             this.showErrorMessage('Erro ao atualizar arquivo: ' + error.message);
 196 │             throw error;
 197 │         }
 198 │     }
 199 │     
 200 │     /**
 201 │      * Remove um arquivo
 202 │      */
 203 │     static async deleteFile(fileId, fileName = '') {
 204 │         try {
 205 │             if (!AuthManager.canEdit()) {
 206 │                 throw new Error('Sem permissÃ£o para remover arquivos');
 207 │             }
 208 │             
 209 │             const confirmed = confirm(`Tem certeza que deseja remover o arquivo${fileName ? ` "${fileName}"` : ''}? Esta aÃ§Ã£o nÃ£o pode ser desfeita.`);
 210 │             if (!confirmed) {
 211 │                 return { success: false, message: 'OperaÃ§Ã£o cancelada' };
 212 │             }
 213 │             
 214 │             const response = await this.apiRequest(`files/details/${fileId}`, {
 215 │                 method: 'DELETE'
 216 │             });
 217 │             
 218 │             if (response.success) {
 219 │                 this.showSuccessMessage('Arquivo removido com sucesso');
 220 │                 
 221 │                 // Emitir evento de arquivo removido
 222 │                 this.emitFileDeleted(fileId);
 223 │                 
 224 │                 return response;
 225 │             } else {
 226 │                 throw new Error(response.message || 'Erro ao remover arquivo');
 227 │             }
 228 │             
 229 │         } catch (error) {
 230 │             console.error(`Erro ao remover arquivo ${fileId}:`, error);
 231 │             this.showErrorMessage('Erro ao remover arquivo: ' + error.message);
 232 │             throw error;
 233 │         }
 234 │     }
 235 │     
 236 │     /**
 237 │      * ObtÃ©m estatÃ­sticas de arquivos
 238 │      */
 239 │     static async getStats() {
 240 │         try {
 241 │             const response = await this.apiRequest('files/stats');
 242 │             
 243 │             if (response.success) {
 244 │                 return response.stats;
 245 │             } else {
 246 │                 throw new Error(response.message || 'Erro ao obter estatÃ­sticas');
 247 │             }
 248 │             
 249 │         } catch (error) {
 250 │             console.error('Erro ao obter estatÃ­sticas de arquivos:', error);
 251 │             throw error;
 252 │         }
 253 │     }
 254 │     
 255 │     /**
 256 │      * Limpa arquivos Ã³rfÃ£os
 257 │      */
 258 │     static async cleanupOrphanFiles() {
 259 │         try {
 260 │             if (!AuthManager.isAdmin()) {
 261 │                 throw new Error('Apenas administradores podem fazer limpeza de arquivos');
 262 │             }
 263 │             
 264 │             const confirmed = confirm('Tem certeza que deseja limpar arquivos Ã³rfÃ£os? Esta operaÃ§Ã£o remove arquivos que nÃ£o estÃ£o sendo utilizados.');
 265 │             if (!confirmed) {
 266 │                 return { success: false, message: 'OperaÃ§Ã£o cancelada' };
 267 │             }
 268 │             
 269 │             const response = await this.apiRequest('files/cleanup', {
 270 │                 method: 'POST'
 271 │             });
 272 │             
 273 │             if (response.success) {
 274 │                 this.showSuccessMessage(`Limpeza concluÃ­da: ${response.orphan_count} arquivos removidos`);
 275 │                 return response;
 276 │             } else {
 277 │                 throw new Error(response.message || 'Erro na limpeza');
 278 │             }
 279 │             
 280 │         } catch (error) {
 281 │             console.error('Erro na limpeza de arquivos:', error);
 282 │             this.showErrorMessage('Erro na limpeza: ' + error.message);
 283 │             throw error;
 284 │         }
 285 │     }
 286 │     
 287 │     /**
 288 │      * Configura drag and drop para upload
 289 │      */
 290 │     static setupDragAndDrop(dropZone, options = {}) {
 291 │         if (!dropZone) return;
 292 │         
 293 │         const defaultOptions = {
 294 │             allowMultiple: true,
 295 │             showPreview: true,
 296 │             onFilesAdded: null,
 297 │             ...options
 298 │         };
 299 │         
 300 │         // Prevenir comportamento padrÃ£o
 301 │         ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
 302 │             dropZone.addEventListener(eventName, (e) => {
 303 │                 e.preventDefault();
 304 │                 e.stopPropagation();
 305 │             });
 306 │         });
 307 │         
 308 │         // Visual feedback
 309 │         ['dragenter', 'dragover'].forEach(eventName => {
 310 │             dropZone.addEventListener(eventName, () => {
 311 │                 dropZone.classList.add('dragover');
 312 │             });
 313 │         });
 314 │         
 315 │         ['dragleave', 'drop'].forEach(eventName => {
 316 │             dropZone.addEventListener(eventName, () => {
 317 │                 dropZone.classList.remove('dragover');
 318 │             });
 319 │         });
 320 │         
 321 │         // Handle drop
 322 │         dropZone.addEventListener('drop', (e) => {
 323 │             const files = Array.from(e.dataTransfer.files);
 324 │             
 325 │             if (files.length > 0) {
 326 │                 this.handleFilesAdded(files, defaultOptions);
 327 │             }
 328 │         });
 329 │         
 330 │         // Handle click to select files
 331 │         dropZone.addEventListener('click', () => {
 332 │             const input = document.createElement('input');
 333 │             input.type = 'file';
 334 │             input.multiple = defaultOptions.allowMultiple;
 335 │             input.accept = this.allowedTypes.join(',');
 336 │             
 337 │             input.addEventListener('change', () => {
 338 │                 if (input.files.length > 0) {
 339 │                     const files = Array.from(input.files);
 340 │                     this.handleFilesAdded(files, defaultOptions);
 341 │                 }
 342 │             });
 343 │             
 344 │             input.click();
 345 │         });
 346 │     }
 347 │     
 348 │     /**
 349 │      * Manipula arquivos adicionados
 350 │      */
 351 │     static handleFilesAdded(files, options) {
 352 │         const validFiles = [];
 353 │         const invalidFiles = [];
 354 │         
 355 │         files.forEach(file => {
 356 │             try {
 357 │                 this.validateFile(file);
 358 │                 validFiles.push(file);
 359 │             } catch (error) {
 360 │                 invalidFiles.push({ file, error: error.message });
 361 │             }
 362 │         });
 363 │         
 364 │         // Mostrar erros para arquivos invÃ¡lidos
 365 │         if (invalidFiles.length > 0) {
 366 │             invalidFiles.forEach(({ file, error }) => {
 367 │                 this.showErrorMessage(`${file.name}: ${error}`);
 368 │             });
 369 │         }
 370 │         
 371 │         // Processar arquivos vÃ¡lidos
 372 │         if (validFiles.length > 0) {
 373 │             if (options.onFilesAdded) {
 374 │                 options.onFilesAdded(validFiles);
 375 │             } else {
 376 │                 this.uploadMultipleFiles(validFiles);
 377 │             }
 378 │             
 379 │             if (options.showPreview) {
 380 │                 this.showUploadPreview(validFiles);
 381 │             }
 382 │         }
 383 │     }
 384 │     
 385 │     /**
 386 │      * Mostra preview dos arquivos antes do upload
 387 │      */
 388 │     static showUploadPreview(files) {
 389 │         const container = this.getOrCreatePreviewContainer();
 390 │         container.innerHTML = '';
 391 │         
 392 │         files.forEach((file, index) => {
 393 │             const preview = this.createFilePreview(file, index);
 394 │             container.appendChild(preview);
 395 │         });
 396 │         
 397 │         container.style.display = 'block';
 398 │     }
 399 │     
 400 │     /**
 401 │      * Cria preview de um arquivo
 402 │      */
 403 │     static createFilePreview(file, index) {
 404 │         const preview = document.createElement('div');
 405 │         preview.className = 'file-preview';
 406 │         preview.dataset.index = index;
 407 │         
 408 │         let content = '';
 409 │         
 410 │         if (file.type.startsWith('image/')) {
 411 │             const url = URL.createObjectURL(file);
 412 │             content = `
 413 │                 <img src="${url}" alt="${file.name}" style="width: 100px; height: 100px; object-fit: cover; border-radius: 4px;">
 414 │             `;
 415 │         } else {
 416 │             content = `
 417 │                 <div style="width: 100px; height: 100px; background: #f0f0f0; display: flex; align-items: center; justify-content: center; border-radius: 4px;">
 418 │                     <i class="bi bi-file-earmark" style="font-size: 2rem; color: #666;"></i>
 419 │                 </div>
 420 │             `;
 421 │         }
 422 │         
 423 │         preview.innerHTML = `
 424 │             ${content}
 425 │             <div style="margin-top: 8px; text-align: center;">
 426 │                 <div style="font-size: 12px; font-weight: 500; margin-bottom: 4px;">${file.name}</div>
 427 │                 <div style="font-size: 11px; color: #666;">${this.formatFileSize(file.size)}</div>
 428 │             </div>
 429 │             <button type="button" onclick="FileManager.removeFromPreview(${index})" style="position: absolute; top: 4px; right: 4px; background: rgba(0,0,0,0.6); color: white; border: none; border-radius: 50%; width: 20px; height: 20px; font-size: 12px; cursor: pointer;">Ã—</button>
 430 │         `;
 431 │         
 432 │         preview.style.cssText = `
 433 │             position: relative;
 434 │             display: inline-block;
 435 │             margin: 8px;
 436 │             padding: 8px;
 437 │             border: 1px solid #ddd;
 438 │             border-radius: 8px;
 439 │             background: white;
 440 │             box-shadow: 0 2px 4px rgba(0,0,0,0.1);
 441 │         `;
 442 │         
 443 │         return preview;
 444 │     }
 445 │     
 446 │     /**
 447 │      * Remove arquivo do preview
 448 │      */
 449 │     static removeFromPreview(index) {
 450 │         const preview = document.querySelector(`[data-index="${index}"]`);
 451 │         if (preview) {
 452 │             preview.remove();
 453 │         }
 454 │         
 455 │         // Remover da fila de upload se ainda nÃ£o foi processado
 456 │         this.uploadQueue = this.uploadQueue.filter((item, i) => i !== index);
 457 │     }
 458 │     
 459 │     /**
 460 │      * Copia URL do arquivo para clipboard
 461 │      */
 462 │     static async copyFileUrl(url, fileName = '') {
 463 │         try {
 464 │             await navigator.clipboard.writeText(url);
 465 │             this.showSuccessMessage(`URL${fileName ? ` de ${fileName}` : ''} copiada para a Ã¡rea de transferÃªncia`);
 466 │         } catch (error) {
 467 │             console.error('Erro ao copiar URL:', error);
 468 │             
 469 │             // Fallback para navegadores que nÃ£o suportam clipboard API
 470 │             const textarea = document.createElement('textarea');
 471 │             textarea.value = url;
 472 │             document.body.appendChild(textarea);
 473 │             textarea.select();
 474 │             document.execCommand('copy');
 475 │             document.body.removeChild(textarea);
 476 │             
 477 │             this.showSuccessMessage(`URL${fileName ? ` de ${fileName}` : ''} copiada para a Ã¡rea de transferÃªncia`);
 478 │         }
 479 │     }
 480 │     
 481 │     /**
 482 │      * Valida arquivo para upload
 483 │      */
 484 │     static validateFile(file) {
 485 │         // Verificar tipo
 486 │         if (!this.allowedTypes.includes(file.type)) {
 487 │             throw new Error(`Tipo de arquivo nÃ£o permitido. Tipos aceitos: ${this.allowedTypes.join(', ')}`);
 488 │         }
 489 │         
 490 │         // Verificar tamanho
 491 │         if (file.size > this.maxFileSize) {
 492 │             throw new Error(`Arquivo muito grande. Tamanho mÃ¡ximo: ${this.formatFileSize(this.maxFileSize)}`);
 493 │         }
 494 │         
 495 │         if (file.size === 0) {
 496 │             throw new Error('Arquivo vazio');
 497 │         }
 498 │         
 499 │         // Verificar nome
 500 │         if (!file.name || file.name.trim() === '') {
 501 │             throw new Error('Nome de arquivo invÃ¡lido');
 502 │         }
 503 │     }
 504 │     
 505 │     /**
 506 │      * Formata tamanho do arquivo
 507 │      */
 508 │     static formatFileSize(bytes) {
 509 │         if (bytes === 0) return '0 Bytes';
 510 │         
 511 │         const k = 1024;
 512 │         const sizes = ['Bytes', 'KB', 'MB', 'GB'];
 513 │         const i = Math.floor(Math.log(bytes) / Math.log(k));
 514 │         
 515 │         return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
 516 │     }
 517 │     
 518 │     /**
 519 │      * Mostra progresso de upload
 520 │      */
 521 │     static showUploadProgress(current, total) {
 522 │         const progress = this.getOrCreateProgressIndicator();
 523 │         const percentage = Math.round((current / total) * 100);
 524 │         
 525 │         progress.querySelector('.progress-fill').style.width = `${percentage}%`;
 526 │         progress.querySelector('.progress-text').textContent = `Enviando ${current}/${total} arquivos (${percentage}%)`;
 527 │         progress.style.display = 'block';
 528 │     }
 529 │     
 530 │     /**
 531 │      * Esconde progresso de upload
 532 │      */
 533 │     static hideUploadProgress() {
 534 │         const progress = document.getElementById('uploadProgress');
 535 │         if (progress) {
 536 │             progress.style.display = 'none';
 537 │         }
 538 │     }
 539 │     
 540 │     /**
 541 │      * Cria ou obtÃ©m indicador de progresso
 542 │      */
 543 │     static getOrCreateProgressIndicator() {
 544 │         let progress = document.getElementById('uploadProgress');
 545 │         
 546 │         if (!progress) {
 547 │             progress = document.createElement('div');
 548 │             progress.id = 'uploadProgress';
 549 │             progress.style.cssText = `
 550 │                 position: fixed;
 551 │                 top: 80px;
 552 │                 left: 50%;
 553 │                 transform: translateX(-50%);
 554 │                 background: white;
 555 │                 border: 1px solid #ddd;
 556 │                 border-radius: 8px;
 557 │                 padding: 16px;
 558 │                 box-shadow: 0 4px 12px rgba(0,0,0,0.15);
 559 │                 z-index: 9999;
 560 │                 display: none;
 561 │                 min-width: 300px;
 562 │             `;
 563 │             
 564 │             progress.innerHTML = `
 565 │                 <div class="progress-text" style="margin-bottom: 8px; font-size: 14px; font-weight: 500;">Preparando upload...</div>
 566 │                 <div style="width: 100%; height: 6px; background: #f0f0f0; border-radius: 3px; overflow: hidden;">
 567 │                     <div class="progress-fill" style="height: 100%; background: linear-gradient(90deg, #dc143c, #b91c3c); width: 0%; transition: width 0.3s ease;"></div>
 568 │                 </div>
 569 │             `;
 570 │             
 571 │             document.body.appendChild(progress);
 572 │         }
 573 │         
 574 │         return progress;
 575 │     }
 576 │     
 577 │     /**
 578 │      * Cria ou obtÃ©m container de preview
 579 │      */
 580 │     static getOrCreatePreviewContainer() {
 581 │         let container = document.getElementById('uploadPreviewContainer');
 582 │         
 583 │         if (!container) {
 584 │             container = document.createElement('div');
 585 │             container.id = 'uploadPreviewContainer';
 586 │             container.style.cssText = `
 587 │                 position: fixed;
 588 │                 bottom: 20px;
 589 │                 right: 20px;
 590 │                 background: white;
 591 │                 border: 1px solid #ddd;
 592 │                 border-radius: 8px;
 593 │                 padding: 16px;
 594 │                 box-shadow: 0 4px 12px rgba(0,0,0,0.15);
 595 │                 z-index: 9998;
 596 │                 display: none;
 597 │                 max-width: 400px;
 598 │                 max-height: 300px;
 599 │                 overflow-y: auto;
 600 │             `;
 601 │             
 602 │             // Adicionar tÃ­tulo e botÃ£o fechar
 603 │             container.innerHTML = `
 604 │                 <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px; padding-bottom: 8px; border-bottom: 1px solid #eee;">
 605 │                     <h4 style="margin: 0; font-size: 14px; font-weight: 600;">Arquivos para Upload</h4>
 606 │                     <button onclick="this.parentElement.parentElement.style.display='none'" style="background: none; border: none; font-size: 18px; cursor: pointer; color: #666;">Ã—</button>
 607 │                 </div>
 608 │                 <div class="preview-files"></div>
 609 │             `;
 610 │             
 611 │             document.body.appendChild(container);
 612 │         }
 613 │         
 614 │         return container.querySelector('.preview-files');
 615 │     }
 616 │     
 617 │     // ===== EVENTOS =====
 618 │     
 619 │     static emitFileUploaded(response) {
 620 │         const event = new CustomEvent('fileUploaded', {
 621 │             detail: response
 622 │         });
 623 │         document.dispatchEvent(event);
 624 │     }
 625 │     
 626 │     static emitFileUpdated(fileId, data) {
 627 │         const event = new CustomEvent('fileUpdated', {
 628 │             detail: { fileId, data }
 629 │         });
 630 │         document.dispatchEvent(event);
 631 │     }
 632 │     
 633 │     static emitFileDeleted(fileId) {
 634 │         const event = new CustomEvent('fileDeleted', {
 635 │             detail: { fileId }
 636 │         });
 637 │         document.dispatchEvent(event);
 638 │     }
 639 │     
 640 │     // ===== MÃ‰TODOS DE UI =====
 641 │     
 642 │     static showSuccessMessage(message) {
 643 │         if (window.AdminSystem && window.AdminSystem.showSuccess) {
 644 │             window.AdminSystem.showSuccess(message);
 645 │         } else {
 646 │             console.log('âœ“', message);
 647 │         }
 648 │     }
 649 │     
 650 │     static showErrorMessage(message) {
 651 │         if (window.AdminSystem && window.AdminSystem.showError) {
 652 │             window.AdminSystem.showError(message);
 653 │         } else {
 654 │             console.error('âœ—', message);
 655 │         }
 656 │     }
 657 │     
 658 │     // ===== MÃ‰TODO DE API =====
 659 │     
 660 │     static async apiRequest(endpoint, options = {}) {
 661 │         if (window.AuthManager && window.AuthManager.apiRequest) {
 662 │             return await window.AuthManager.apiRequest(`files/${endpoint}`, options);
 663 │         } else {
 664 │             // Fallback se AuthManager nÃ£o estiver disponÃ­vel
 665 │             const url = this.API_BASE + 'files/' + endpoint;
 666 │             
 667 │             const defaultOptions = {
 668 │                 credentials: 'same-origin'
 669 │             };
 670 │             
 671 │             // Para FormData, nÃ£o definir Content-Type
 672 │             if (!(options.body instanceof FormData)) {
 673 │                 defaultOptions.headers = {
 674 │                     'Content-Type': 'application/json',
 675 │                     'X-Requested-With': 'XMLHttpRequest'
 676 │                 };
 677 │             }
 678 │             
 679 │             const finalOptions = {
 680 │                 ...defaultOptions,
 681 │                 ...options
 682 │             };
 683 │             
 684 │             if (options.headers && Object.keys(options.headers).length === 0) {
 685 │                 delete finalOptions.headers;
 686 │             }
 687 │             
 688 │             const response = await fetch(url, finalOptions);
 689 │             
 690 │             if (!response.ok) {
 691 │                 throw new Error(`HTTP ${response.status}`);
 692 │             }
 693 │             
 694 │             return await response.json();
 695 │         }
 696 │     }
 697 │     
 698 │     /**
 699 │      * Inicializa o gerenciador de arquivos
 700 │      */
 701 │     static init() {
 702 │         // Adicionar estilos CSS para drag and drop
 703 │         this.addDragDropStyles();
 704 │         
 705 │         // Listeners para eventos de arquivo
 706 │         document.addEventListener('fileUploaded', (event) => {
 707 │             console.log('Arquivo enviado:', event.detail);
 708 │         });
 709 │         
 710 │         document.addEventListener('fileUpdated', (event) => {
 711 │             console.log('Arquivo atualizado:', event.detail);
 712 │         });
 713 │         
 714 │         document.addEventListener('fileDeleted', (event) => {
 715 │             console.log('Arquivo removido:', event.detail);
 716 │         });
 717 │         
 718 │         console.log('FileManager inicializado');
 719 │     }
 720 │     
 721 │     /**
 722 │      * Adiciona estilos CSS para drag and drop
 723 │      */
 724 │     static addDragDropStyles() {
 725 │         if (document.getElementById('dragDropStyles')) return;
 726 │         
 727 │         const style = document.createElement('style');
 728 │         style.id = 'dragDropStyles';
 729 │         style.textContent = `
 730 │             .upload-area.dragover {
 731 │                 border-color: var(--primary-red) !important;
 732 │                 background: rgba(220, 20, 60, 0.05) !important;
 733 │                 transform: scale(1.02);
 734 │             }
 735 │             
 736 │             .file-preview {
 737 │                 transition: all 0.3s ease;
 738 │             }
 739 │             
 740 │             .file-preview:hover {
 741 │                 transform: translateY(-2px);
 742 │                 box-shadow: 0 4px 8px rgba(0,0,0,0.15) !important;
 743 │             }
 744 │         `;
 745 │         
 746 │         document.head.appendChild(style);
 747 │     }
 748 │     
 749 │     /**
 750 │      * Destroi o gerenciador e limpa recursos
 751 │      */
 752 │     static destroy() {
 753 │         // Cancelar uploads pendentes
 754 │         this.uploadQueue = [];
 755 │         this.isUploading = false;
 756 │         
 757 │         // Remover indicadores de progresso
 758 │         const progress = document.getElementById('uploadProgress');
 759 │         if (progress) progress.remove();
 760 │         
 761 │         const preview = document.getElementById('uploadPreviewContainer');
 762 │         if (preview) preview.remove();
 763 │     }
 764 │ }
 765 │ 
 766 │ // Inicializar quando DOM estiver pronto
 767 │ document.addEventListener('DOMContentLoaded', () => {
 768 │     FileManager.init();
 769 │ });
 770 │ 
 771 │ // Cleanup ao sair da pÃ¡gina
 772 │ window.addEventListener('beforeunload', () => {
 773 │     FileManager.destroy();
 774 │ });
 775 │ 
 776 │ // Export para outros mÃ³dulos
 777 │ window.FileManager = FileManager;

═══════════════════════════════════════════════════════════════
ARQUIVO: public\api\index.php
Tamanho: 27.79KB
Modificado: 07/07/2025 16:07:23
═══════════════════════════════════════════════════════════════
   1 │ <?php
   2 │ /**
   3 │  * Roteador Principal da API - Gracie Barra CMS
   4 │  * Arquivo: public/api/index.php
   5 │  */
   6 │ 
   7 │ // Headers de seguranÃ§a e CORS
   8 │ header('Content-Type: application/json; charset=utf-8');
   9 │ header('Access-Control-Allow-Origin: *');
  10 │ header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
  11 │ header('Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With, X-CSRF-Token');
  12 │ header('X-Content-Type-Options: nosniff');
  13 │ header('X-Frame-Options: DENY');
  14 │ header('X-XSS-Protection: 1; mode=block');
  15 │ 
  16 │ // Responder a requisiÃ§Ãµes OPTIONS (CORS preflight)
  17 │ if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
  18 │     http_response_code(200);
  19 │     exit();
  20 │ }
  21 │ 
  22 │ // Incluir dependÃªncias
  23 │ require_once __DIR__ . '/config/database.php';
  24 │ require_once __DIR__ . '/classes/Auth.php';
  25 │ require_once __DIR__ . '/classes/ContentManager.php';
  26 │ require_once __DIR__ . '/classes/FileManager.php';
  27 │ 
  28 │ // Iniciar sessÃ£o
  29 │ if (session_status() === PHP_SESSION_NONE) {
  30 │     session_start();
  31 │ }
  32 │ 
  33 │ // Configurar tratamento de erros
  34 │ set_error_handler('handleError');
  35 │ set_exception_handler('handleException');
  36 │ 
  37 │ /**
  38 │  * FunÃ§Ã£o para resposta JSON padronizada
  39 │  */
  40 │ function jsonResponse($data, $statusCode = 200, $headers = []) {
  41 │     http_response_code($statusCode);
  42 │     
  43 │     foreach ($headers as $header => $value) {
  44 │         header("$header: $value");
  45 │     }
  46 │     
  47 │     // Adicionar metadados da resposta
  48 │     if (is_array($data)) {
  49 │         $data['timestamp'] = date('c');
  50 │         $data['status_code'] = $statusCode;
  51 │         
  52 │         if (DEBUG_MODE) {
  53 │             $data['debug'] = [
  54 │                 'memory_usage' => memory_get_usage(true),
  55 │                 'execution_time' => microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'],
  56 │                 'php_version' => PHP_VERSION
  57 │             ];
  58 │         }
  59 │     }
  60 │     
  61 │     echo json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
  62 │     exit();
  63 │ }
  64 │ 
  65 │ /**
  66 │  * FunÃ§Ã£o para verificar autenticaÃ§Ã£o
  67 │  */
  68 │ function requireAuth() {
  69 │     $auth = new Auth();
  70 │     if (!$auth->isAuthenticated()) {
  71 │         jsonResponse([
  72 │             'success' => false,
  73 │             'error' => 'Acesso negado',
  74 │             'message' => 'UsuÃ¡rio nÃ£o autenticado'
  75 │         ], 401);
  76 │     }
  77 │     return $auth->getCurrentUser();
  78 │ }
  79 │ 
  80 │ /**
  81 │  * FunÃ§Ã£o para verificar permissÃ£o especÃ­fica
  82 │  */
  83 │ function requirePermission($action, $section = null) {
  84 │     $auth = new Auth();
  85 │     $user = requireAuth();
  86 │     
  87 │     if (!$auth->hasPermission($action, $section)) {
  88 │         jsonResponse([
  89 │             'success' => false,
  90 │             'error' => 'PermissÃ£o insuficiente',
  91 │             'message' => 'VocÃª nÃ£o tem permissÃ£o para esta aÃ§Ã£o'
  92 │         ], 403);
  93 │     }
  94 │     
  95 │     return $user;
  96 │ }
  97 │ 
  98 │ /**
  99 │  * FunÃ§Ã£o para validar mÃ©todo HTTP
 100 │  */
 101 │ function validateMethod($allowedMethods) {
 102 │     $method = $_SERVER['REQUEST_METHOD'];
 103 │     if (!in_array($method, $allowedMethods)) {
 104 │         jsonResponse([
 105 │             'success' => false,
 106 │             'error' => 'MÃ©todo nÃ£o permitido',
 107 │             'message' => "MÃ©todo $method nÃ£o Ã© permitido para este endpoint"
 108 │         ], 405);
 109 │     }
 110 │     return $method;
 111 │ }
 112 │ 
 113 │ /**
 114 │  * FunÃ§Ã£o para obter dados do corpo da requisiÃ§Ã£o
 115 │  */
 116 │ function getRequestData() {
 117 │     $contentType = $_SERVER['CONTENT_TYPE'] ?? '';
 118 │     
 119 │     if (strpos($contentType, 'application/json') !== false) {
 120 │         $input = file_get_contents('php://input');
 121 │         $data = json_decode($input, true);
 122 │         
 123 │         if (json_last_error() !== JSON_ERROR_NONE) {
 124 │             jsonResponse([
 125 │                 'success' => false,
 126 │                 'error' => 'JSON invÃ¡lido',
 127 │                 'message' => 'Dados JSON malformados'
 128 │             ], 400);
 129 │         }
 130 │         
 131 │         return $data ?: [];
 132 │     }
 133 │     
 134 │     return $_POST;
 135 │ }
 136 │ 
 137 │ /**
 138 │  * FunÃ§Ã£o para validar parÃ¢metros obrigatÃ³rios
 139 │  */
 140 │ function validateRequired($data, $requiredFields) {
 141 │     $missing = [];
 142 │     
 143 │     foreach ($requiredFields as $field) {
 144 │         if (!isset($data[$field]) || $data[$field] === '' || $data[$field] === null) {
 145 │             $missing[] = $field;
 146 │         }
 147 │     }
 148 │     
 149 │     if (!empty($missing)) {
 150 │         jsonResponse([
 151 │             'success' => false,
 152 │             'error' => 'Campos obrigatÃ³rios ausentes',
 153 │             'message' => 'Os seguintes campos sÃ£o obrigatÃ³rios: ' . implode(', ', $missing),
 154 │             'missing_fields' => $missing
 155 │         ], 400);
 156 │     }
 157 │ }
 158 │ 
 159 │ /**
 160 │  * Tratamento de erros personalizado
 161 │  */
 162 │ function handleError($severity, $message, $file, $line) {
 163 │     if (error_reporting() & $severity) {
 164 │         $error = [
 165 │             'type' => 'PHP Error',
 166 │             'message' => $message,
 167 │             'file' => $file,
 168 │             'line' => $line,
 169 │             'severity' => $severity
 170 │         ];
 171 │         
 172 │         error_log(json_encode($error));
 173 │         
 174 │         if (DEBUG_MODE) {
 175 │             jsonResponse([
 176 │                 'success' => false,
 177 │                 'error' => 'Erro interno',
 178 │                 'debug' => $error
 179 │             ], 500);
 180 │         }
 181 │     }
 182 │ }
 183 │ 
 184 │ /**
 185 │  * Tratamento de exceÃ§Ãµes
 186 │  */
 187 │ function handleException($exception) {
 188 │     $error = [
 189 │         'type' => get_class($exception),
 190 │         'message' => $exception->getMessage(),
 191 │         'file' => $exception->getFile(),
 192 │         'line' => $exception->getLine(),
 193 │         'trace' => $exception->getTraceAsString()
 194 │     ];
 195 │     
 196 │     error_log(json_encode($error));
 197 │     
 198 │     jsonResponse([
 199 │         'success' => false,
 200 │         'error' => 'Erro interno do servidor',
 201 │         'message' => DEBUG_MODE ? $exception->getMessage() : 'Ocorreu um erro interno'
 202 │     ], 500);
 203 │ }
 204 │ 
 205 │ // Obter rota da URL
 206 │ $requestUri = $_SERVER['REQUEST_URI'] ?? '/';
 207 │ $scriptName = $_SERVER['SCRIPT_NAME'] ?? '';
 208 │ $basePath = dirname($scriptName);
 209 │ 
 210 │ // Remover base path e query string
 211 │ $route = str_replace($basePath, '', $requestUri);
 212 │ $route = strtok($route, '?'); // Remove query string
 213 │ $route = trim($route, '/');
 214 │ 
 215 │ // Se nÃ£o hÃ¡ rota, definir como vazia
 216 │ if (empty($route) || $route === 'index.php') {
 217 │     $route = '';
 218 │ }
 219 │ 
 220 │ // Dividir rota em segmentos
 221 │ $segments = $route ? explode('/', $route) : [];
 222 │ 
 223 │ try {
 224 │     // Roteamento principal
 225 │     switch ($segments[0] ?? '') {
 226 │         case 'auth':
 227 │             handleAuthRoutes($segments);
 228 │             break;
 229 │             
 230 │         case 'content':
 231 │             handleContentRoutes($segments);
 232 │             break;
 233 │             
 234 │         case 'files':
 235 │             handleFileRoutes($segments);
 236 │             break;
 237 │             
 238 │         case 'users':
 239 │             handleUserRoutes($segments);
 240 │             break;
 241 │             
 242 │         case 'settings':
 243 │             handleSettingsRoutes($segments);
 244 │             break;
 245 │             
 246 │         case 'dashboard':
 247 │             handleDashboardRoutes($segments);
 248 │             break;
 249 │             
 250 │         case 'system':
 251 │             handleSystemRoutes($segments);
 252 │             break;
 253 │             
 254 │         case '':
 255 │             // Rota raiz - informaÃ§Ãµes da API
 256 │             jsonResponse([
 257 │                 'success' => true,
 258 │                 'message' => 'Gracie Barra CMS API',
 259 │                 'version' => '1.0.0',
 260 │                 'endpoints' => [
 261 │                     'auth' => 'AutenticaÃ§Ã£o de usuÃ¡rios',
 262 │                     'content' => 'Gerenciamento de conteÃºdo',
 263 │                     'files' => 'Gerenciamento de arquivos',
 264 │                     'users' => 'Gerenciamento de usuÃ¡rios',
 265 │                     'settings' => 'ConfiguraÃ§Ãµes do sistema',
 266 │                     'dashboard' => 'Dados do dashboard'
 267 │                 ]
 268 │             ]);
 269 │             break;
 270 │             
 271 │         default:
 272 │             jsonResponse([
 273 │                 'success' => false,
 274 │                 'error' => 'Endpoint nÃ£o encontrado',
 275 │                 'message' => "Endpoint '/{$segments[0]}' nÃ£o existe"
 276 │             ], 404);
 277 │     }
 278 │     
 279 │ } catch (Exception $e) {
 280 │     handleException($e);
 281 │ }
 282 │ 
 283 │ /**
 284 │  * Rotas de autenticaÃ§Ã£o
 285 │  */
 286 │ function handleAuthRoutes($segments) {
 287 │     $auth = new Auth();
 288 │     $action = $segments[1] ?? '';
 289 │     
 290 │     switch ($action) {
 291 │         case 'login':
 292 │             validateMethod(['POST']);
 293 │             
 294 │             $data = getRequestData();
 295 │             validateRequired($data, ['username', 'password']);
 296 │             
 297 │             $result = $auth->login(
 298 │                 $data['username'],
 299 │                 $data['password'],
 300 │                 $data['remember_me'] ?? false
 301 │             );
 302 │             
 303 │             jsonResponse($result, $result['success'] ? 200 : 401);
 304 │             break;
 305 │             
 306 │         case 'logout':
 307 │             validateMethod(['POST']);
 308 │             
 309 │             $result = $auth->logout();
 310 │             jsonResponse($result);
 311 │             break;
 312 │             
 313 │         case 'me':
 314 │             validateMethod(['GET']);
 315 │             
 316 │             $user = $auth->getCurrentUser();
 317 │             if ($user) {
 318 │                 jsonResponse([
 319 │                     'success' => true,
 320 │                     'user' => $user
 321 │                 ]);
 322 │             } else {
 323 │                 jsonResponse([
 324 │                     'success' => false,
 325 │                     'message' => 'UsuÃ¡rio nÃ£o autenticado'
 326 │                 ], 401);
 327 │             }
 328 │             break;
 329 │             
 330 │         case 'check':
 331 │             validateMethod(['GET']);
 332 │             
 333 │             jsonResponse([
 334 │                 'success' => true,
 335 │                 'authenticated' => $auth->isAuthenticated()
 336 │             ]);
 337 │             break;
 338 │             
 339 │         case 'refresh':
 340 │             validateMethod(['POST']);
 341 │             
 342 │             $user = requireAuth();
 343 │             jsonResponse([
 344 │                 'success' => true,
 345 │                 'message' => 'SessÃ£o renovada',
 346 │                 'user' => $user
 347 │             ]);
 348 │             break;
 349 │             
 350 │         default:
 351 │             jsonResponse([
 352 │                 'success' => false,
 353 │                 'error' => 'AÃ§Ã£o de autenticaÃ§Ã£o nÃ£o encontrada',
 354 │                 'message' => "AÃ§Ã£o '/auth/$action' nÃ£o existe"
 355 │             ], 404);
 356 │     }
 357 │ }
 358 │ 
 359 │ /**
 360 │  * Rotas de conteÃºdo
 361 │  */
 362 │ function handleContentRoutes($segments) {
 363 │     $contentManager = new ContentManager();
 364 │     $action = $segments[1] ?? '';
 365 │     
 366 │     switch ($action) {
 367 │         case 'sections':
 368 │             if ($_SERVER['REQUEST_METHOD'] === 'GET') {
 369 │                 requireAuth();
 370 │                 
 371 │                 if (isset($segments[2])) {
 372 │                     // SeÃ§Ã£o especÃ­fica
 373 │                     $section = Utils::sanitize($segments[2]);
 374 │                     $content = $contentManager->getSectionContent($section);
 375 │                     jsonResponse([
 376 │                         'success' => true,
 377 │                         'section' => $section,
 378 │                         'content' => $content
 379 │                     ]);
 380 │                 } else {
 381 │                     // Todas as seÃ§Ãµes
 382 │                     $content = $contentManager->getAllContent();
 383 │                     jsonResponse([
 384 │                         'success' => true,
 385 │                         'content' => $content
 386 │                     ]);
 387 │                 }
 388 │                 
 389 │             } elseif ($_SERVER['REQUEST_METHOD'] === 'PUT') {
 390 │                 $user = requirePermission('edit');
 391 │                 
 392 │                 if (!isset($segments[2])) {
 393 │                     jsonResponse([
 394 │                         'success' => false,
 395 │                         'error' => 'SeÃ§Ã£o nÃ£o especificada'
 396 │                     ], 400);
 397 │                 }
 398 │                 
 399 │                 $section = Utils::sanitize($segments[2]);
 400 │                 $data = getRequestData();
 401 │                 
 402 │                 $result = $contentManager->updateSectionContent($section, $data, $user['id']);
 403 │                 jsonResponse($result, $result['success'] ? 200 : 400);
 404 │                 
 405 │             } else {
 406 │                 validateMethod(['GET', 'PUT']);
 407 │             }
 408 │             break;
 409 │             
 410 │         case 'field':
 411 │             validateMethod(['DELETE']);
 412 │             
 413 │             $user = requirePermission('edit');
 414 │             $data = getRequestData();
 415 │             validateRequired($data, ['section', 'field_name']);
 416 │             
 417 │             $result = $contentManager->removeField($data['section'], $data['field_name'], $user['id']);
 418 │             jsonResponse($result, $result['success'] ? 200 : 400);
 419 │             break;
 420 │             
 421 │         case 'search':
 422 │             validateMethod(['GET']);
 423 │             requireAuth();
 424 │             
 425 │             $term = $_GET['q'] ?? '';
 426 │             if (empty($term)) {
 427 │                 jsonResponse([
 428 │                     'success' => false,
 429 │                     'error' => 'Termo de busca obrigatÃ³rio'
 430 │                 ], 400);
 431 │             }
 432 │             
 433 │             $sections = isset($_GET['sections']) ? explode(',', $_GET['sections']) : null;
 434 │             $results = $contentManager->searchContent($term, $sections);
 435 │             
 436 │             jsonResponse([
 437 │                 'success' => true,
 438 │                 'query' => $term,
 439 │                 'results' => $results,
 440 │                 'count' => count($results)
 441 │             ]);
 442 │             break;
 443 │             
 444 │         case 'backup':
 445 │             if ($_SERVER['REQUEST_METHOD'] === 'POST') {
 446 │                 $user = requirePermission('edit');
 447 │                 
 448 │                 $data = getRequestData();
 449 │                 validateRequired($data, ['section']);
 450 │                 
 451 │                 $success = $contentManager->createBackup($data['section'], $user['id']);
 452 │                 jsonResponse([
 453 │                     'success' => $success,
 454 │                     'message' => $success ? 'Backup criado com sucesso' : 'Erro ao criar backup'
 455 │                 ]);
 456 │                 
 457 │             } elseif ($_SERVER['REQUEST_METHOD'] === 'GET') {
 458 │                 requireAuth();
 459 │                 
 460 │                 $section = $_GET['section'] ?? null;
 461 │                 $limit = (int)($_GET['limit'] ?? 50);
 462 │                 
 463 │                 $backups = $contentManager->getBackups($section, $limit);
 464 │                 jsonResponse([
 465 │                     'success' => true,
 466 │                     'backups' => $backups
 467 │                 ]);
 468 │                 
 469 │             } else {
 470 │                 validateMethod(['POST', 'GET']);
 471 │             }
 472 │             break;
 473 │             
 474 │         case 'restore':
 475 │             validateMethod(['POST']);
 476 │             
 477 │             $user = requirePermission('edit');
 478 │             $data = getRequestData();
 479 │             validateRequired($data, ['backup_id']);
 480 │             
 481 │             $result = $contentManager->restoreBackup($data['backup_id'], $user['id']);
 482 │             jsonResponse($result, $result['success'] ? 200 : 400);
 483 │             break;
 484 │             
 485 │         case 'stats':
 486 │             validateMethod(['GET']);
 487 │             requireAuth();
 488 │             
 489 │             $stats = $contentManager->getContentStats();
 490 │             jsonResponse([
 491 │                 'success' => true,
 492 │                 'stats' => $stats
 493 │             ]);
 494 │             break;
 495 │             
 496 │         default:
 497 │             jsonResponse([
 498 │                 'success' => false,
 499 │                 'error' => 'AÃ§Ã£o de conteÃºdo nÃ£o encontrada',
 500 │                 'message' => "AÃ§Ã£o '/content/$action' nÃ£o existe"
 501 │             ], 404);
 502 │     }
 503 │ }
 504 │ 
 505 │ /**
 506 │  * Rotas de arquivos
 507 │  */
 508 │ function handleFileRoutes($segments) {
 509 │     $fileManager = new FileManager();
 510 │     $action = $segments[1] ?? '';
 511 │     
 512 │     switch ($action) {
 513 │         case 'upload':
 514 │             validateMethod(['POST']);
 515 │             
 516 │             $user = requirePermission('upload');
 517 │             
 518 │             if (empty($_FILES['file'])) {
 519 │                 jsonResponse([
 520 │                     'success' => false,
 521 │                     'error' => 'Nenhum arquivo enviado'
 522 │                 ], 400);
 523 │             }
 524 │             
 525 │             $altText = $_POST['alt_text'] ?? '';
 526 │             $description = $_POST['description'] ?? '';
 527 │             
 528 │             // Upload mÃºltiplo ou Ãºnico
 529 │             if (is_array($_FILES['file']['name'])) {
 530 │                 $result = $fileManager->uploadMultipleFiles($_FILES['file'], $user['id']);
 531 │             } else {
 532 │                 $result = $fileManager->uploadFile($_FILES['file'], $user['id'], $altText, $description);
 533 │             }
 534 │             
 535 │             jsonResponse($result, $result['success'] ? 200 : 400);
 536 │             break;
 537 │             
 538 │         case 'list':
 539 │             validateMethod(['GET']);
 540 │             requireAuth();
 541 │             
 542 │             $filters = [
 543 │                 'type' => $_GET['type'] ?? null,
 544 │                 'user_id' => $_GET['user_id'] ?? null,
 545 │                 'search' => $_GET['search'] ?? null,
 546 │                 'limit' => (int)($_GET['limit'] ?? 50),
 547 │                 'offset' => (int)($_GET['offset'] ?? 0)
 548 │             ];
 549 │             
 550 │             $files = $fileManager->getFiles($filters);
 551 │             jsonResponse([
 552 │                 'success' => true,
 553 │                 'files' => $files,
 554 │                 'count' => count($files)
 555 │             ]);
 556 │             break;
 557 │             
 558 │         case 'details':
 559 │             $fileId = (int)($segments[2] ?? 0);
 560 │             
 561 │             if ($_SERVER['REQUEST_METHOD'] === 'GET') {
 562 │                 requireAuth();
 563 │                 
 564 │                 if (!$fileId) {
 565 │                     jsonResponse([
 566 │                         'success' => false,
 567 │                         'error' => 'ID do arquivo obrigatÃ³rio'
 568 │                     ], 400);
 569 │                 }
 570 │                 
 571 │                 $file = $fileManager->getFile($fileId);
 572 │                 if ($file) {
 573 │                     jsonResponse([
 574 │                         'success' => true,
 575 │                         'file' => $file
 576 │                     ]);
 577 │                 } else {
 578 │                     jsonResponse([
 579 │                         'success' => false,
 580 │                         'error' => 'Arquivo nÃ£o encontrado'
 581 │                     ], 404);
 582 │                 }
 583 │                 
 584 │             } elseif ($_SERVER['REQUEST_METHOD'] === 'PUT') {
 585 │                 $user = requirePermission('edit');
 586 │                 
 587 │                 if (!$fileId) {
 588 │                     jsonResponse([
 589 │                         'success' => false,
 590 │                         'error' => 'ID do arquivo obrigatÃ³rio'
 591 │                     ], 400);
 592 │                 }
 593 │                 
 594 │                 $data = getRequestData();
 595 │                 $result = $fileManager->updateFile($fileId, $data, $user['id']);
 596 │                 jsonResponse($result, $result['success'] ? 200 : 400);
 597 │                 
 598 │             } elseif ($_SERVER['REQUEST_METHOD'] === 'DELETE') {
 599 │                 $user = requirePermission('edit');
 600 │                 
 601 │                 if (!$fileId) {
 602 │                     jsonResponse([
 603 │                         'success' => false,
 604 │                         'error' => 'ID do arquivo obrigatÃ³rio'
 605 │                     ], 400);
 606 │                 }
 607 │                 
 608 │                 $result = $fileManager->deleteFile($fileId, $user['id']);
 609 │                 jsonResponse($result, $result['success'] ? 200 : 400);
 610 │                 
 611 │             } else {
 612 │                 validateMethod(['GET', 'PUT', 'DELETE']);
 613 │             }
 614 │             break;
 615 │             
 616 │         case 'stats':
 617 │             validateMethod(['GET']);
 618 │             requireAuth();
 619 │             
 620 │             $stats = $fileManager->getStats();
 621 │             jsonResponse([
 622 │                 'success' => true,
 623 │                 'stats' => $stats
 624 │             ]);
 625 │             break;
 626 │             
 627 │         case 'cleanup':
 628 │             validateMethod(['POST']);
 629 │             
 630 │             $user = requirePermission('edit');
 631 │             $result = $fileManager->cleanupOrphanFiles($user['id']);
 632 │             jsonResponse($result, $result['success'] ? 200 : 400);
 633 │             break;
 634 │             
 635 │         default:
 636 │             jsonResponse([
 637 │                 'success' => false,
 638 │                 'error' => 'AÃ§Ã£o de arquivo nÃ£o encontrada',
 639 │                 'message' => "AÃ§Ã£o '/files/$action' nÃ£o existe"
 640 │             ], 404);
 641 │     }
 642 │ }
 643 │ 
 644 │ /**
 645 │  * Rotas de usuÃ¡rios
 646 │  */
 647 │ function handleUserRoutes($segments) {
 648 │     $auth = new Auth();
 649 │     $action = $segments[1] ?? '';
 650 │     
 651 │     switch ($action) {
 652 │         case 'list':
 653 │             validateMethod(['GET']);
 654 │             requirePermission('*');
 655 │             
 656 │             $filters = [
 657 │                 'role' => $_GET['role'] ?? null,
 658 │                 'status' => $_GET['status'] ?? null,
 659 │                 'search' => $_GET['search'] ?? null,
 660 │                 'limit' => (int)($_GET['limit'] ?? 50)
 661 │             ];
 662 │             
 663 │             $users = $auth->getUsers($filters);
 664 │             jsonResponse([
 665 │                 'success' => true,
 666 │                 'users' => $users,
 667 │                 'count' => count($users)
 668 │             ]);
 669 │             break;
 670 │             
 671 │         case 'create':
 672 │             validateMethod(['POST']);
 673 │             requirePermission('*');
 674 │             
 675 │             $data = getRequestData();
 676 │             validateRequired($data, ['username', 'email', 'password', 'first_name', 'last_name']);
 677 │             
 678 │             $result = $auth->createUser($data);
 679 │             jsonResponse($result, $result['success'] ? 201 : 400);
 680 │             break;
 681 │             
 682 │         case 'update':
 683 │             validateMethod(['PUT']);
 684 │             
 685 │             $userId = (int)($segments[2] ?? 0);
 686 │             if (!$userId) {
 687 │                 jsonResponse([
 688 │                     'success' => false,
 689 │                     'error' => 'ID do usuÃ¡rio obrigatÃ³rio'
 690 │                 ], 400);
 691 │             }
 692 │             
 693 │             $data = getRequestData();
 694 │             $result = $auth->updateUser($userId, $data);
 695 │             jsonResponse($result, $result['success'] ? 200 : 400);
 696 │             break;
 697 │             
 698 │         case 'password':
 699 │             validateMethod(['PUT']);
 700 │             
 701 │             $data = getRequestData();
 702 │             validateRequired($data, ['user_id', 'new_password']);
 703 │             
 704 │             $currentPassword = $data['current_password'] ?? '';
 705 │             $result = $auth->changePassword($data['user_id'], $currentPassword, $data['new_password']);
 706 │             jsonResponse($result, $result['success'] ? 200 : 400);
 707 │             break;
 708 │             
 709 │         case 'toggle-status':
 710 │             validateMethod(['PUT']);
 711 │             requirePermission('*');
 712 │             
 713 │             $userId = (int)($segments[2] ?? 0);
 714 │             if (!$userId) {
 715 │                 jsonResponse([
 716 │                     'success' => false,
 717 │                     'error' => 'ID do usuÃ¡rio obrigatÃ³rio'
 718 │                 ], 400);
 719 │             }
 720 │             
 721 │             $result = $auth->toggleUserStatus($userId);
 722 │             jsonResponse($result, $result['success'] ? 200 : 400);
 723 │             break;
 724 │             
 725 │         default:
 726 │             jsonResponse([
 727 │                 'success' => false,
 728 │                 'error' => 'AÃ§Ã£o de usuÃ¡rio nÃ£o encontrada',
 729 │                 'message' => "AÃ§Ã£o '/users/$action' nÃ£o existe"
 730 │             ], 404);
 731 │     }
 732 │ }
 733 │ 
 734 │ /**
 735 │  * Rotas de configuraÃ§Ãµes
 736 │  */
 737 │ function handleSettingsRoutes($segments) {
 738 │     $contentManager = new ContentManager();
 739 │     $action = $segments[1] ?? '';
 740 │     
 741 │     switch ($action) {
 742 │         case 'get':
 743 │             validateMethod(['GET']);
 744 │             requireAuth();
 745 │             
 746 │             $settings = $contentManager->getSettings();
 747 │             jsonResponse([
 748 │                 'success' => true,
 749 │                 'settings' => $settings
 750 │             ]);
 751 │             break;
 752 │             
 753 │         case 'update':
 754 │             validateMethod(['PUT']);
 755 │             
 756 │             $user = requirePermission('edit', 'settings');
 757 │             $data = getRequestData();
 758 │             
 759 │             $result = $contentManager->updateSettings($data, $user['id']);
 760 │             jsonResponse($result, $result['success'] ? 200 : 400);
 761 │             break;
 762 │             
 763 │         default:
 764 │             jsonResponse([
 765 │                 'success' => false,
 766 │                 'error' => 'AÃ§Ã£o de configuraÃ§Ã£o nÃ£o encontrada',
 767 │                 'message' => "AÃ§Ã£o '/settings/$action' nÃ£o existe"
 768 │             ], 404);
 769 │     }
 770 │ }
 771 │ 
 772 │ /**
 773 │  * Rotas do dashboard
 774 │  */
 775 │ function handleDashboardRoutes($segments) {
 776 │     validateMethod(['GET']);
 777 │     requireAuth();
 778 │     
 779 │     $contentManager = new ContentManager();
 780 │     $fileManager = new FileManager();
 781 │     $auth = new Auth();
 782 │     $logger = new SecurityLogger();
 783 │     
 784 │     $action = $segments[1] ?? 'stats';
 785 │     
 786 │     switch ($action) {
 787 │         case 'stats':
 788 │             $stats = [
 789 │                 'content' => $contentManager->getContentStats(),
 790 │                 'files' => $fileManager->getStats(),
 791 │                 'recent_activity' => $logger->getRecentActivity(10)
 792 │             ];
 793 │             
 794 │             // Adicionar contagem de usuÃ¡rios se for admin
 795 │             $currentUser = $auth->getCurrentUser();
 796 │             if ($currentUser['role'] === 'admin') {
 797 │                 $users = $auth->getUsers(['limit' => 1000]);
 798 │                 $stats['users'] = count($users);
 799 │                 $stats['active_users'] = count(array_filter($users, function($u) {
 800 │                     return $u['status'] === 'active';
 801 │                 }));
 802 │             }
 803 │             
 804 │             jsonResponse([
 805 │                 'success' => true,
 806 │                 'stats' => $stats
 807 │             ]);
 808 │             break;
 809 │             
 810 │         case 'activity':
 811 │             $limit = (int)($_GET['limit'] ?? 50);
 812 │             $activity = $logger->getRecentActivity($limit);
 813 │             
 814 │             jsonResponse([
 815 │                 'success' => true,
 816 │                 'activity' => $activity,
 817 │                 'count' => count($activity)
 818 │             ]);
 819 │             break;
 820 │             
 821 │         default:
 822 │             jsonResponse([
 823 │                 'success' => false,
 824 │                 'error' => 'AÃ§Ã£o de dashboard nÃ£o encontrada',
 825 │                 'message' => "AÃ§Ã£o '/dashboard/$action' nÃ£o existe"
 826 │             ], 404);
 827 │     }
 828 │ }
 829 │ 
 830 │ /**
 831 │  * Rotas do sistema
 832 │  */
 833 │ function handleSystemRoutes($segments) {
 834 │     requirePermission('*'); // Apenas admin
 835 │     
 836 │     $action = $segments[1] ?? '';
 837 │     
 838 │     switch ($action) {
 839 │         case 'info':
 840 │             validateMethod(['GET']);
 841 │             
 842 │             jsonResponse([
 843 │                 'success' => true,
 844 │                 'system' => [
 845 │                     'php_version' => PHP_VERSION,
 846 │                     'mysql_version' => Database::getInstance()->getConnection()->query('SELECT VERSION()')->fetchColumn(),
 847 │                     'memory_limit' => ini_get('memory_limit'),
 848 │                     'max_execution_time' => ini_get('max_execution_time'),
 849 │                     'upload_max_filesize' => ini_get('upload_max_filesize'),
 850 │                     'post_max_size' => ini_get('post_max_size'),
 851 │                     'timezone' => date_default_timezone_get(),
 852 │                     'debug_mode' => DEBUG_MODE
 853 │                 ]
 854 │             ]);
 855 │             break;
 856 │             
 857 │         case 'health':
 858 │             validateMethod(['GET']);
 859 │             
 860 │             $health = [
 861 │                 'database' => true,
 862 │                 'uploads_dir' => is_writable(UPLOAD_DIR),
 863 │                 'logs_dir' => is_writable(__DIR__ . '/../../logs/'),
 864 │                 'sessions' => session_status() === PHP_SESSION_ACTIVE
 865 │             ];
 866 │             
 867 │             try {
 868 │                 Database::getInstance()->getConnection()->query('SELECT 1');
 869 │             } catch (Exception $e) {
 870 │                 $health['database'] = false;
 871 │             }
 872 │             
 873 │             $overall = array_reduce($health, function($carry, $item) {
 874 │                 return $carry && $item;
 875 │             }, true);
 876 │             
 877 │             jsonResponse([
 878 │                 'success' => true,
 879 │                 'health' => $health,
 880 │                 'status' => $overall ? 'healthy' : 'issues'
 881 │             ], $overall ? 200 : 503);
 882 │             break;
 883 │             
 884 │         default:
 885 │             jsonResponse([
 886 │                 'success' => false,
 887 │                 'error' => 'AÃ§Ã£o de sistema nÃ£o encontrada',
 888 │                 'message' => "AÃ§Ã£o '/system/$action' nÃ£o existe"
 889 │             ], 404);
 890 │     }
 891 │ }
 892 │ ?>

═══════════════════════════════════════════════════════════════
ARQUIVO: public\api\classes\Auth.php
Tamanho: 19.88KB
Modificado: 07/07/2025 12:00:23
═══════════════════════════════════════════════════════════════
   1 │ <?php
   2 │ /**
   3 │  * Sistema de AutenticaÃ§Ã£o - Gracie Barra CMS
   4 │  * Arquivo: public/api/classes/Auth.php
   5 │  */
   6 │ 
   7 │ require_once __DIR__ . '/../config/database.php';
   8 │ 
   9 │ class Auth {
  10 │     private $db;
  11 │     private $logger;
  12 │     private $sessionTimeout;
  13 │     
  14 │     public function __construct() {
  15 │         $this->db = Database::getInstance();
  16 │         $this->logger = new SecurityLogger();
  17 │         $this->sessionTimeout = COOKIE_LIFETIME;
  18 │         
  19 │         // Iniciar sessÃ£o se nÃ£o estiver ativa
  20 │         if (session_status() === PHP_SESSION_NONE) {
  21 │             session_start();
  22 │         }
  23 │     }
  24 │     
  25 │     /**
  26 │      * Realiza login do usuÃ¡rio
  27 │      */
  28 │     public function login($username, $password, $rememberMe = false) {
  29 │         try {
  30 │             // Verificar se IP estÃ¡ bloqueado
  31 │             if ($this->logger->isIPBlocked()) {
  32 │                 throw new Exception("Muitas tentativas de login. Tente novamente em 15 minutos.");
  33 │             }
  34 │             
  35 │             // Sanitizar entrada
  36 │             $username = Utils::sanitize(trim($username));
  37 │             
  38 │             if (empty($username) || empty($password)) {
  39 │                 throw new Exception("UsuÃ¡rio e senha sÃ£o obrigatÃ³rios");
  40 │             }
  41 │             
  42 │             // Buscar usuÃ¡rio no banco
  43 │             $sql = "SELECT * FROM cms_users 
  44 │                     WHERE (username = ? OR email = ?) 
  45 │                     AND status = 'active'";
  46 │             $user = $this->db->fetchOne($sql, [$username, $username]);
  47 │             
  48 │             if (!$user) {
  49 │                 $this->logger->logFailedLogin($username);
  50 │                 throw new Exception("Credenciais invÃ¡lidas");
  51 │             }
  52 │             
  53 │             // Verificar senha
  54 │             if (!Utils::verifyPassword($password, $user['password'])) {
  55 │                 $this->logger->logFailedLogin($username);
  56 │                 throw new Exception("Credenciais invÃ¡lidas");
  57 │             }
  58 │             
  59 │             // Login bem-sucedido - criar sessÃ£o
  60 │             $this->createSession($user, $rememberMe);
  61 │             $this->updateLastLogin($user['id']);
  62 │             
  63 │             // Log da atividade
  64 │             $this->logger->logActivity($user['id'], 'login', null, 'Login realizado com sucesso');
  65 │             
  66 │             return [
  67 │                 'success' => true,
  68 │                 'user' => $this->formatUserData($user),
  69 │                 'message' => 'Login realizado com sucesso'
  70 │             ];
  71 │             
  72 │         } catch (Exception $e) {
  73 │             return [
  74 │                 'success' => false,
  75 │                 'message' => $e->getMessage()
  76 │             ];
  77 │         }
  78 │     }
  79 │     
  80 │     /**
  81 │      * Realiza logout do usuÃ¡rio
  82 │      */
  83 │     public function logout() {
  84 │         try {
  85 │             // Log da atividade antes de destruir a sessÃ£o
  86 │             if (isset($_SESSION['user_id'])) {
  87 │                 $this->logger->logActivity($_SESSION['user_id'], 'logout', null, 'Logout realizado');
  88 │             }
  89 │             
  90 │             // Destruir dados da sessÃ£o
  91 │             $_SESSION = [];
  92 │             
  93 │             // Destruir cookie da sessÃ£o
  94 │             if (isset($_COOKIE[session_name()])) {
  95 │                 setcookie(session_name(), '', time() - 3600, '/');
  96 │             }
  97 │             
  98 │             // Destruir sessÃ£o
  99 │             session_destroy();
 100 │             
 101 │             return [
 102 │                 'success' => true,
 103 │                 'message' => 'Logout realizado com sucesso'
 104 │             ];
 105 │             
 106 │         } catch (Exception $e) {
 107 │             return [
 108 │                 'success' => false,
 109 │                 'message' => 'Erro ao fazer logout: ' . $e->getMessage()
 110 │             ];
 111 │         }
 112 │     }
 113 │     
 114 │     /**
 115 │      * Verifica se usuÃ¡rio estÃ¡ autenticado
 116 │      */
 117 │     public function isAuthenticated() {
 118 │         // Verificar se hÃ¡ dados de sessÃ£o
 119 │         if (!isset($_SESSION['user_id']) || !isset($_SESSION['login_time'])) {
 120 │             return false;
 121 │         }
 122 │         
 123 │         // Verificar timeout da sessÃ£o
 124 │         if (time() - $_SESSION['login_time'] > $this->sessionTimeout) {
 125 │             $this->logout();
 126 │             return false;
 127 │         }
 128 │         
 129 │         // Verificar se usuÃ¡rio ainda existe e estÃ¡ ativo
 130 │         $sql = "SELECT id, status FROM cms_users WHERE id = ? AND status = 'active'";
 131 │         $user = $this->db->fetchOne($sql, [$_SESSION['user_id']]);
 132 │         
 133 │         if (!$user) {
 134 │             $this->logout();
 135 │             return false;
 136 │         }
 137 │         
 138 │         // Renovar sessÃ£o
 139 │         $this->renewSession();
 140 │         
 141 │         return true;
 142 │     }
 143 │     
 144 │     /**
 145 │      * ObtÃ©m dados do usuÃ¡rio atual
 146 │      */
 147 │     public function getCurrentUser() {
 148 │         if (!$this->isAuthenticated()) {
 149 │             return null;
 150 │         }
 151 │         
 152 │         $sql = "SELECT id, username, email, first_name, last_name, role, avatar, last_login, created_at 
 153 │                 FROM cms_users WHERE id = ?";
 154 │         $user = $this->db->fetchOne($sql, [$_SESSION['user_id']]);
 155 │         
 156 │         return $user ? $this->formatUserData($user) : null;
 157 │     }
 158 │     
 159 │     /**
 160 │      * Verifica se usuÃ¡rio tem permissÃ£o para aÃ§Ã£o
 161 │      */
 162 │     public function hasPermission($action, $section = null) {
 163 │         $user = $this->getCurrentUser();
 164 │         
 165 │         if (!$user) {
 166 │             return false;
 167 │         }
 168 │         
 169 │         $role = $user['role'];
 170 │         
 171 │         // Definir matriz de permissÃµes
 172 │         $permissions = [
 173 │             'admin' => ['*'], // Admin tem acesso total
 174 │             'editor' => [
 175 │                 'view', 'edit', 'create', 'upload', 'update_content', 
 176 │                 'manage_media', 'backup_content'
 177 │             ],
 178 │             'viewer' => ['view']
 179 │         ];
 180 │         
 181 │         $userPermissions = $permissions[$role] ?? [];
 182 │         
 183 │         // Admin tem acesso total
 184 │         if (in_array('*', $userPermissions)) {
 185 │             return true;
 186 │         }
 187 │         
 188 │         // Verificar permissÃ£o especÃ­fica
 189 │         return in_array($action, $userPermissions);
 190 │     }
 191 │     
 192 │     /**
 193 │      * Cria novo usuÃ¡rio
 194 │      */
 195 │     public function createUser($data) {
 196 │         try {
 197 │             // Verificar permissÃ£o
 198 │             if (!$this->hasPermission('*')) {
 199 │                 throw new Exception("Sem permissÃ£o para criar usuÃ¡rios");
 200 │             }
 201 │             
 202 │             // Validar dados
 203 │             $this->validateUserData($data);
 204 │             
 205 │             // Verificar se username ou email jÃ¡ existem
 206 │             if ($this->userExists($data['username'], $data['email'])) {
 207 │                 throw new Exception("Nome de usuÃ¡rio ou email jÃ¡ estÃ£o em uso");
 208 │             }
 209 │             
 210 │             // Preparar dados
 211 │             $userData = [
 212 │                 'username' => Utils::sanitize($data['username']),
 213 │                 'email' => Utils::sanitize($data['email']),
 214 │                 'password' => Utils::hashPassword($data['password']),
 215 │                 'first_name' => Utils::sanitize($data['first_name']),
 216 │                 'last_name' => Utils::sanitize($data['last_name']),
 217 │                 'role' => Utils::sanitize($data['role'] ?? 'viewer'),
 218 │                 'status' => 'active'
 219 │             ];
 220 │             
 221 │             // Inserir usuÃ¡rio
 222 │             $sql = "INSERT INTO cms_users (username, email, password, first_name, last_name, role, status, created_at) 
 223 │                     VALUES (?, ?, ?, ?, ?, ?, ?, NOW())";
 224 │             
 225 │             $userId = $this->db->insert($sql, [
 226 │                 $userData['username'],
 227 │                 $userData['email'],
 228 │                 $userData['password'],
 229 │                 $userData['first_name'],
 230 │                 $userData['last_name'],
 231 │                 $userData['role'],
 232 │                 $userData['status']
 233 │             ]);
 234 │             
 235 │             // Log da atividade
 236 │             $currentUser = $this->getCurrentUser();
 237 │             $this->logger->logActivity(
 238 │                 $currentUser['id'], 
 239 │                 'create_user', 
 240 │                 'users', 
 241 │                 "UsuÃ¡rio {$userData['username']} criado"
 242 │             );
 243 │             
 244 │             return [
 245 │                 'success' => true,
 246 │                 'user_id' => $userId,
 247 │                 'message' => 'UsuÃ¡rio criado com sucesso'
 248 │             ];
 249 │             
 250 │         } catch (Exception $e) {
 251 │             return [
 252 │                 'success' => false,
 253 │                 'message' => $e->getMessage()
 254 │             ];
 255 │         }
 256 │     }
 257 │     
 258 │     /**
 259 │      * Atualiza dados do usuÃ¡rio
 260 │      */
 261 │     public function updateUser($userId, $data) {
 262 │         try {
 263 │             $currentUser = $this->getCurrentUser();
 264 │             
 265 │             // Verificar permissÃµes
 266 │             if (!$currentUser || 
 267 │                 ($currentUser['id'] != $userId && !$this->hasPermission('*'))) {
 268 │                 throw new Exception("Sem permissÃ£o para editar este usuÃ¡rio");
 269 │             }
 270 │             
 271 │             // Campos permitidos para atualizaÃ§Ã£o
 272 │             $allowedFields = ['first_name', 'last_name', 'email'];
 273 │             
 274 │             // Admin pode editar role e status
 275 │             if ($this->hasPermission('*')) {
 276 │                 $allowedFields = array_merge($allowedFields, ['role', 'status']);
 277 │             }
 278 │             
 279 │             $updateFields = [];
 280 │             $params = [];
 281 │             
 282 │             foreach ($allowedFields as $field) {
 283 │                 if (isset($data[$field])) {
 284 │                     $updateFields[] = "$field = ?";
 285 │                     $params[] = Utils::sanitize($data[$field]);
 286 │                 }
 287 │             }
 288 │             
 289 │             if (empty($updateFields)) {
 290 │                 throw new Exception("Nenhum campo vÃ¡lido para atualizar");
 291 │             }
 292 │             
 293 │             // Verificar se email nÃ£o estÃ¡ em uso por outro usuÃ¡rio
 294 │             if (isset($data['email'])) {
 295 │                 $sql = "SELECT id FROM cms_users WHERE email = ? AND id != ?";
 296 │                 if ($this->db->exists($sql, [$data['email'], $userId])) {
 297 │                     throw new Exception("Este email jÃ¡ estÃ¡ em uso por outro usuÃ¡rio");
 298 │                 }
 299 │             }
 300 │             
 301 │             $params[] = $userId;
 302 │             $sql = "UPDATE cms_users SET " . implode(', ', $updateFields) . ", updated_at = NOW() WHERE id = ?";
 303 │             
 304 │             $this->db->execute($sql, $params);
 305 │             
 306 │             // Log da atividade
 307 │             $this->logger->logActivity(
 308 │                 $currentUser['id'], 
 309 │                 'update_user', 
 310 │                 'users', 
 311 │                 "UsuÃ¡rio ID $userId atualizado"
 312 │             );
 313 │             
 314 │             return [
 315 │                 'success' => true,
 316 │                 'message' => 'UsuÃ¡rio atualizado com sucesso'
 317 │             ];
 318 │             
 319 │         } catch (Exception $e) {
 320 │             return [
 321 │                 'success' => false,
 322 │                 'message' => $e->getMessage()
 323 │             ];
 324 │         }
 325 │     }
 326 │     
 327 │     /**
 328 │      * Altera senha do usuÃ¡rio
 329 │      */
 330 │     public function changePassword($userId, $currentPassword, $newPassword) {
 331 │         try {
 332 │             $user = $this->getCurrentUser();
 333 │             
 334 │             // Verificar permissÃµes
 335 │             if (!$user || ($user['id'] != $userId && !$this->hasPermission('*'))) {
 336 │                 throw new Exception("Sem permissÃ£o para alterar senha");
 337 │             }
 338 │             
 339 │             // Validar nova senha
 340 │             if (strlen($newPassword) < 6) {
 341 │                 throw new Exception("Nova senha deve ter pelo menos 6 caracteres");
 342 │             }
 343 │             
 344 │             // Se nÃ£o for admin, verificar senha atual
 345 │             if (!$this->hasPermission('*') || $user['id'] == $userId) {
 346 │                 $sql = "SELECT password FROM cms_users WHERE id = ?";
 347 │                 $userData = $this->db->fetchOne($sql, [$userId]);
 348 │                 
 349 │                 if ($userData && !Utils::verifyPassword($currentPassword, $userData['password'])) {
 350 │                     throw new Exception("Senha atual incorreta");
 351 │                 }
 352 │             }
 353 │             
 354 │             // Atualizar senha
 355 │             $sql = "UPDATE cms_users SET password = ?, updated_at = NOW() WHERE id = ?";
 356 │             $this->db->execute($sql, [Utils::hashPassword($newPassword), $userId]);
 357 │             
 358 │             // Log da atividade
 359 │             $this->logger->logActivity(
 360 │                 $user['id'], 
 361 │                 'change_password', 
 362 │                 'users', 
 363 │                 "Senha alterada para usuÃ¡rio ID $userId"
 364 │             );
 365 │             
 366 │             return [
 367 │                 'success' => true,
 368 │                 'message' => 'Senha alterada com sucesso'
 369 │             ];
 370 │             
 371 │         } catch (Exception $e) {
 372 │             return [
 373 │                 'success' => false,
 374 │                 'message' => $e->getMessage()
 375 │             ];
 376 │         }
 377 │     }
 378 │     
 379 │     /**
 380 │      * Lista usuÃ¡rios com filtros
 381 │      */
 382 │     public function getUsers($filters = []) {
 383 │         try {
 384 │             // Verificar permissÃ£o
 385 │             if (!$this->hasPermission('*') && !$this->hasPermission('view')) {
 386 │                 throw new Exception("Sem permissÃ£o para listar usuÃ¡rios");
 387 │             }
 388 │             
 389 │             $sql = "SELECT id, username, email, first_name, last_name, role, status, last_login, created_at, updated_at 
 390 │                     FROM cms_users WHERE 1=1";
 391 │             $params = [];
 392 │             
 393 │             // Aplicar filtros
 394 │             if (isset($filters['role']) && !empty($filters['role'])) {
 395 │                 $sql .= " AND role = ?";
 396 │                 $params[] = $filters['role'];
 397 │             }
 398 │             
 399 │             if (isset($filters['status']) && !empty($filters['status'])) {
 400 │                 $sql .= " AND status = ?";
 401 │                 $params[] = $filters['status'];
 402 │             }
 403 │             
 404 │             if (isset($filters['search']) && !empty($filters['search'])) {
 405 │                 $searchTerm = '%' . $this->db->escapeLike($filters['search']) . '%';
 406 │                 $sql .= " AND (username LIKE ? OR email LIKE ? OR first_name LIKE ? OR last_name LIKE ?)";
 407 │                 $params = array_merge($params, [$searchTerm, $searchTerm, $searchTerm, $searchTerm]);
 408 │             }
 409 │             
 410 │             $sql .= " ORDER BY created_at DESC";
 411 │             
 412 │             if (isset($filters['limit']) && is_numeric($filters['limit'])) {
 413 │                 $sql .= " LIMIT ?";
 414 │                 $params[] = (int)$filters['limit'];
 415 │             }
 416 │             
 417 │             $users = $this->db->fetchAll($sql, $params);
 418 │             
 419 │             // Formatar dados dos usuÃ¡rios
 420 │             return array_map([$this, 'formatUserData'], $users);
 421 │             
 422 │         } catch (Exception $e) {
 423 │             throw new Exception("Erro ao listar usuÃ¡rios: " . $e->getMessage());
 424 │         }
 425 │     }
 426 │     
 427 │     /**
 428 │      * Desativa/ativa usuÃ¡rio
 429 │      */
 430 │     public function toggleUserStatus($userId) {
 431 │         try {
 432 │             // Verificar permissÃ£o
 433 │             if (!$this->hasPermission('*')) {
 434 │                 throw new Exception("Sem permissÃ£o para alterar status de usuÃ¡rios");
 435 │             }
 436 │             
 437 │             $currentUser = $this->getCurrentUser();
 438 │             
 439 │             // NÃ£o pode desativar a si mesmo
 440 │             if ($currentUser['id'] == $userId) {
 441 │                 throw new Exception("VocÃª nÃ£o pode desativar sua prÃ³pria conta");
 442 │             }
 443 │             
 444 │             // Buscar usuÃ¡rio atual
 445 │             $sql = "SELECT status FROM cms_users WHERE id = ?";
 446 │             $user = $this->db->fetchOne($sql, [$userId]);
 447 │             
 448 │             if (!$user) {
 449 │                 throw new Exception("UsuÃ¡rio nÃ£o encontrado");
 450 │             }
 451 │             
 452 │             // Alternar status
 453 │             $newStatus = $user['status'] === 'active' ? 'inactive' : 'active';
 454 │             
 455 │             $sql = "UPDATE cms_users SET status = ?, updated_at = NOW() WHERE id = ?";
 456 │             $this->db->execute($sql, [$newStatus, $userId]);
 457 │             
 458 │             // Log da atividade
 459 │             $this->logger->logActivity(
 460 │                 $currentUser['id'], 
 461 │                 'toggle_user_status', 
 462 │                 'users', 
 463 │                 "Status do usuÃ¡rio ID $userId alterado para $newStatus"
 464 │             );
 465 │             
 466 │             return [
 467 │                 'success' => true,
 468 │                 'new_status' => $newStatus,
 469 │                 'message' => "UsuÃ¡rio " . ($newStatus === 'active' ? 'ativado' : 'desativado') . " com sucesso"
 470 │             ];
 471 │             
 472 │         } catch (Exception $e) {
 473 │             return [
 474 │                 'success' => false,
 475 │                 'message' => $e->getMessage()
 476 │             ];
 477 │         }
 478 │     }
 479 │     
 480 │     // ===== MÃ‰TODOS PRIVADOS =====
 481 │     
 482 │     /**
 483 │      * Cria sessÃ£o para usuÃ¡rio
 484 │      */
 485 │     private function createSession($user, $rememberMe = false) {
 486 │         // Regenerar ID da sessÃ£o para seguranÃ§a
 487 │         session_regenerate_id(true);
 488 │         
 489 │         $_SESSION['user_id'] = $user['id'];
 490 │         $_SESSION['user_role'] = $user['role'];
 491 │         $_SESSION['login_time'] = time();
 492 │         $_SESSION['csrf_token'] = Utils::generateSecureToken();
 493 │         
 494 │         // Configurar timeout
 495 │         if ($rememberMe) {
 496 │             $this->sessionTimeout = REMEMBER_ME_LIFETIME;
 497 │             $_SESSION['remember_me'] = true;
 498 │         }
 499 │         
 500 │         $_SESSION['expires_at'] = time() + $this->sessionTimeout;
 501 │     }
 502 │     
 503 │     /**
 504 │      * Renova sessÃ£o
 505 │      */
 506 │     private function renewSession() {
 507 │         $_SESSION['login_time'] = time();
 508 │         
 509 │         $timeout = isset($_SESSION['remember_me']) ? REMEMBER_ME_LIFETIME : COOKIE_LIFETIME;
 510 │         $_SESSION['expires_at'] = time() + $timeout;
 511 │     }
 512 │     
 513 │     /**
 514 │      * Atualiza Ãºltimo login
 515 │      */
 516 │     private function updateLastLogin($userId) {
 517 │         $sql = "UPDATE cms_users SET last_login = NOW() WHERE id = ?";
 518 │         $this->db->execute($sql, [$userId]);
 519 │     }
 520 │     
 521 │     /**
 522 │      * Formata dados do usuÃ¡rio para retorno
 523 │      */
 524 │     private function formatUserData($user) {
 525 │         // Remover senha dos dados retornados
 526 │         unset($user['password']);
 527 │         
 528 │         return [
 529 │             'id' => (int)$user['id'],
 530 │             'username' => $user['username'],
 531 │             'email' => $user['email'],
 532 │             'first_name' => $user['first_name'],
 533 │             'last_name' => $user['last_name'],
 534 │             'full_name' => trim($user['first_name'] . ' ' . $user['last_name']),
 535 │             'role' => $user['role'],
 536 │             'status' => $user['status'],
 537 │             'avatar' => $user['avatar'] ?? null,
 538 │             'last_login' => $user['last_login'],
 539 │             'created_at' => $user['created_at'],
 540 │             'updated_at' => $user['updated_at'] ?? null
 541 │         ];
 542 │     }
 543 │     
 544 │     /**
 545 │      * Valida dados do usuÃ¡rio
 546 │      */
 547 │     private function validateUserData($data) {
 548 │         $required = ['username', 'email', 'password', 'first_name', 'last_name'];
 549 │         
 550 │         foreach ($required as $field) {
 551 │             if (empty($data[$field])) {
 552 │                 throw new Exception("Campo '$field' Ã© obrigatÃ³rio");
 553 │             }
 554 │         }
 555 │         
 556 │         if (!Utils::isValidEmail($data['email'])) {
 557 │             throw new Exception("Email invÃ¡lido");
 558 │         }
 559 │         
 560 │         if (strlen($data['password']) < 6) {
 561 │             throw new Exception("Senha deve ter pelo menos 6 caracteres");
 562 │         }
 563 │         
 564 │         if (strlen($data['username']) < 3) {
 565 │             throw new Exception("Nome de usuÃ¡rio deve ter pelo menos 3 caracteres");
 566 │         }
 567 │         
 568 │         if (!preg_match('/^[a-zA-Z0-9_]+$/', $data['username'])) {
 569 │             throw new Exception("Nome de usuÃ¡rio deve conter apenas letras, nÃºmeros e underscore");
 570 │         }
 571 │         
 572 │         $validRoles = ['admin', 'editor', 'viewer'];
 573 │         if (isset($data['role']) && !in_array($data['role'], $validRoles)) {
 574 │             throw new Exception("Papel de usuÃ¡rio invÃ¡lido");
 575 │         }
 576 │     }
 577 │     
 578 │     /**
 579 │      * Verifica se usuÃ¡rio jÃ¡ existe
 580 │      */
 581 │     private function userExists($username, $email) {
 582 │         $sql = "SELECT COUNT(*) FROM cms_users WHERE username = ? OR email = ?";
 583 │         return $this->db->count($sql, [$username, $email]) > 0;
 584 │     }
 585 │ }
 586 │ ?>

═══════════════════════════════════════════════════════════════
ARQUIVO: public\api\classes\ContentManager.php
Tamanho: 22.14KB
Modificado: 07/07/2025 12:00:43
═══════════════════════════════════════════════════════════════
   1 │ <?php
   2 │ /**
   3 │  * Gerenciador de ConteÃºdo - Gracie Barra CMS
   4 │  * Arquivo: public/api/classes/ContentManager.php
   5 │  */
   6 │ 
   7 │ require_once __DIR__ . '/../config/database.php';
   8 │ 
   9 │ class ContentManager {
  10 │     private $db;
  11 │     private $logger;
  12 │     
  13 │     public function __construct() {
  14 │         $this->db = Database::getInstance();
  15 │         $this->logger = new SecurityLogger();
  16 │     }
  17 │     
  18 │     /**
  19 │      * ObtÃ©m conteÃºdo de uma seÃ§Ã£o especÃ­fica
  20 │      */
  21 │     public function getSectionContent($section) {
  22 │         try {
  23 │             $section = Utils::sanitize($section);
  24 │             
  25 │             $sql = "SELECT field_name, field_value, field_type, updated_at 
  26 │                     FROM site_content 
  27 │                     WHERE section = ? 
  28 │                     ORDER BY field_name";
  29 │             
  30 │             $results = $this->db->fetchAll($sql, [$section]);
  31 │             
  32 │             $content = [];
  33 │             foreach ($results as $row) {
  34 │                 $value = $this->processFieldValue($row['field_value'], $row['field_type']);
  35 │                 $content[$row['field_name']] = $value;
  36 │             }
  37 │             
  38 │             return $content;
  39 │             
  40 │         } catch (Exception $e) {
  41 │             throw new Exception("Erro ao carregar conteÃºdo da seÃ§Ã£o: " . $e->getMessage());
  42 │         }
  43 │     }
  44 │     
  45 │     /**
  46 │      * ObtÃ©m todo o conteÃºdo do site
  47 │      */
  48 │     public function getAllContent() {
  49 │         try {
  50 │             $sql = "SELECT section, field_name, field_value, field_type, updated_at 
  51 │                     FROM site_content 
  52 │                     ORDER BY section, field_name";
  53 │             
  54 │             $results = $this->db->fetchAll($sql);
  55 │             
  56 │             $content = [];
  57 │             foreach ($results as $row) {
  58 │                 $value = $this->processFieldValue($row['field_value'], $row['field_type']);
  59 │                 
  60 │                 if (!isset($content[$row['section']])) {
  61 │                     $content[$row['section']] = [];
  62 │                 }
  63 │                 
  64 │                 $content[$row['section']][$row['field_name']] = $value;
  65 │             }
  66 │             
  67 │             return $content;
  68 │             
  69 │         } catch (Exception $e) {
  70 │             throw new Exception("Erro ao carregar todo o conteÃºdo: " . $e->getMessage());
  71 │         }
  72 │     }
  73 │     
  74 │     /**
  75 │      * Atualiza conteÃºdo de uma seÃ§Ã£o
  76 │      */
  77 │     public function updateSectionContent($section, $data, $userId) {
  78 │         try {
  79 │             $section = Utils::sanitize($section);
  80 │             
  81 │             if (empty($data) || !is_array($data)) {
  82 │                 throw new Exception("Dados invÃ¡lidos para atualizaÃ§Ã£o");
  83 │             }
  84 │             
  85 │             $this->db->beginTransaction();
  86 │             
  87 │             // Criar backup antes da atualizaÃ§Ã£o
  88 │             $this->createBackup($section, $userId);
  89 │             
  90 │             $updatedFields = 0;
  91 │             
  92 │             foreach ($data as $fieldName => $fieldValue) {
  93 │                 if ($this->updateField($section, $fieldName, $fieldValue, $userId)) {
  94 │                     $updatedFields++;
  95 │                 }
  96 │             }
  97 │             
  98 │             $this->db->commit();
  99 │             
 100 │             // Log da atividade
 101 │             $this->logger->logActivity(
 102 │                 $userId, 
 103 │                 'update_content', 
 104 │                 $section, 
 105 │                 "SeÃ§Ã£o '$section' atualizada - $updatedFields campos modificados"
 106 │             );
 107 │             
 108 │             return [
 109 │                 'success' => true,
 110 │                 'updated_fields' => $updatedFields,
 111 │                 'message' => 'ConteÃºdo atualizado com sucesso'
 112 │             ];
 113 │             
 114 │         } catch (Exception $e) {
 115 │             $this->db->rollback();
 116 │             return [
 117 │                 'success' => false,
 118 │                 'message' => 'Erro ao atualizar conteÃºdo: ' . $e->getMessage()
 119 │             ];
 120 │         }
 121 │     }
 122 │     
 123 │     /**
 124 │      * Atualiza um campo especÃ­fico
 125 │      */
 126 │     public function updateField($section, $fieldName, $fieldValue, $userId) {
 127 │         try {
 128 │             $section = Utils::sanitize($section);
 129 │             $fieldName = Utils::sanitize($fieldName);
 130 │             
 131 │             // Determinar tipo do campo
 132 │             $fieldType = $this->determineFieldType($fieldValue);
 133 │             
 134 │             // Processar valor baseado no tipo
 135 │             $processedValue = $this->prepareFieldValue($fieldValue, $fieldType);
 136 │             
 137 │             // Verificar se campo jÃ¡ existe
 138 │             $sql = "SELECT id, field_value FROM site_content WHERE section = ? AND field_name = ?";
 139 │             $existing = $this->db->fetchOne($sql, [$section, $fieldName]);
 140 │             
 141 │             if ($existing) {
 142 │                 // Verificar se realmente mudou
 143 │                 if ($existing['field_value'] === $processedValue) {
 144 │                     return false; // NÃ£o houve mudanÃ§a
 145 │                 }
 146 │                 
 147 │                 // Atualizar campo existente
 148 │                 $sql = "UPDATE site_content 
 149 │                         SET field_value = ?, field_type = ?, updated_by = ?, updated_at = NOW() 
 150 │                         WHERE section = ? AND field_name = ?";
 151 │                 $this->db->execute($sql, [$processedValue, $fieldType, $userId, $section, $fieldName]);
 152 │             } else {
 153 │                 // Criar novo campo
 154 │                 $sql = "INSERT INTO site_content (section, field_name, field_value, field_type, updated_by, created_at, updated_at) 
 155 │                         VALUES (?, ?, ?, ?, ?, NOW(), NOW())";
 156 │                 $this->db->execute($sql, [$section, $fieldName, $processedValue, $fieldType, $userId]);
 157 │             }
 158 │             
 159 │             return true;
 160 │             
 161 │         } catch (Exception $e) {
 162 │             throw new Exception("Erro ao atualizar campo '$fieldName': " . $e->getMessage());
 163 │         }
 164 │     }
 165 │     
 166 │     /**
 167 │      * Remove um campo
 168 │      */
 169 │     public function removeField($section, $fieldName, $userId) {
 170 │         try {
 171 │             $section = Utils::sanitize($section);
 172 │             $fieldName = Utils::sanitize($fieldName);
 173 │             
 174 │             $sql = "DELETE FROM site_content WHERE section = ? AND field_name = ?";
 175 │             $affected = $this->db->execute($sql, [$section, $fieldName]);
 176 │             
 177 │             if ($affected > 0) {
 178 │                 $this->logger->logActivity(
 179 │                     $userId, 
 180 │                     'remove_field', 
 181 │                     $section, 
 182 │                     "Campo '$fieldName' removido da seÃ§Ã£o '$section'"
 183 │                 );
 184 │                 
 185 │                 return [
 186 │                     'success' => true,
 187 │                     'message' => 'Campo removido com sucesso'
 188 │                 ];
 189 │             } else {
 190 │                 return [
 191 │                     'success' => false,
 192 │                     'message' => 'Campo nÃ£o encontrado'
 193 │                 ];
 194 │             }
 195 │             
 196 │         } catch (Exception $e) {
 197 │             return [
 198 │                 'success' => false,
 199 │                 'message' => 'Erro ao remover campo: ' . $e->getMessage()
 200 │             ];
 201 │         }
 202 │     }
 203 │     
 204 │     /**
 205 │      * ObtÃ©m configuraÃ§Ãµes do site
 206 │      */
 207 │     public function getSettings() {
 208 │         try {
 209 │             $sql = "SELECT setting_key, setting_value, setting_type, description 
 210 │                     FROM site_settings 
 211 │                     ORDER BY setting_key";
 212 │             
 213 │             $results = $this->db->fetchAll($sql);
 214 │             
 215 │             $settings = [];
 216 │             foreach ($results as $row) {
 217 │                 $value = $this->processFieldValue($row['setting_value'], $row['setting_type']);
 218 │                 $settings[$row['setting_key']] = [
 219 │                     'value' => $value,
 220 │                     'type' => $row['setting_type'],
 221 │                     'description' => $row['description']
 222 │                 ];
 223 │             }
 224 │             
 225 │             return $settings;
 226 │             
 227 │         } catch (Exception $e) {
 228 │             throw new Exception("Erro ao carregar configuraÃ§Ãµes: " . $e->getMessage());
 229 │         }
 230 │     }
 231 │     
 232 │     /**
 233 │      * Atualiza configuraÃ§Ãµes do site
 234 │      */
 235 │     public function updateSettings($settings, $userId) {
 236 │         try {
 237 │             if (empty($settings) || !is_array($settings)) {
 238 │                 throw new Exception("ConfiguraÃ§Ãµes invÃ¡lidas");
 239 │             }
 240 │             
 241 │             $this->db->beginTransaction();
 242 │             
 243 │             $updatedCount = 0;
 244 │             
 245 │             foreach ($settings as $key => $value) {
 246 │                 if ($this->updateSetting($key, $value, $userId)) {
 247 │                     $updatedCount++;
 248 │                 }
 249 │             }
 250 │             
 251 │             $this->db->commit();
 252 │             
 253 │             $this->logger->logActivity(
 254 │                 $userId, 
 255 │                 'update_settings', 
 256 │                 'settings', 
 257 │                 "$updatedCount configuraÃ§Ãµes atualizadas"
 258 │             );
 259 │             
 260 │             return [
 261 │                 'success' => true,
 262 │                 'updated_count' => $updatedCount,
 263 │                 'message' => 'ConfiguraÃ§Ãµes atualizadas com sucesso'
 264 │             ];
 265 │             
 266 │         } catch (Exception $e) {
 267 │             $this->db->rollback();
 268 │             return [
 269 │                 'success' => false,
 270 │                 'message' => 'Erro ao atualizar configuraÃ§Ãµes: ' . $e->getMessage()
 271 │             ];
 272 │         }
 273 │     }
 274 │     
 275 │     /**
 276 │      * Atualiza uma configuraÃ§Ã£o especÃ­fica
 277 │      */
 278 │     public function updateSetting($key, $value, $userId) {
 279 │         try {
 280 │             $key = Utils::sanitize($key);
 281 │             $settingType = $this->determineSettingType($value);
 282 │             $processedValue = $this->prepareFieldValue($value, $settingType);
 283 │             
 284 │             // Verificar se configuraÃ§Ã£o existe
 285 │             $sql = "SELECT id, setting_value FROM site_settings WHERE setting_key = ?";
 286 │             $existing = $this->db->fetchOne($sql, [$key]);
 287 │             
 288 │             if ($existing) {
 289 │                 // Verificar se mudou
 290 │                 if ($existing['setting_value'] === $processedValue) {
 291 │                     return false;
 292 │                 }
 293 │                 
 294 │                 // Atualizar existente
 295 │                 $sql = "UPDATE site_settings 
 296 │                         SET setting_value = ?, setting_type = ?, updated_by = ?, updated_at = NOW() 
 297 │                         WHERE setting_key = ?";
 298 │                 $this->db->execute($sql, [$processedValue, $settingType, $userId, $key]);
 299 │             } else {
 300 │                 // Criar nova
 301 │                 $sql = "INSERT INTO site_settings (setting_key, setting_value, setting_type, updated_by, created_at, updated_at) 
 302 │                         VALUES (?, ?, ?, ?, NOW(), NOW())";
 303 │                 $this->db->execute($sql, [$key, $processedValue, $settingType, $userId]);
 304 │             }
 305 │             
 306 │             return true;
 307 │             
 308 │         } catch (Exception $e) {
 309 │             throw new Exception("Erro ao atualizar configuraÃ§Ã£o '$key': " . $e->getMessage());
 310 │         }
 311 │     }
 312 │     
 313 │     /**
 314 │      * Cria backup do conteÃºdo
 315 │      */
 316 │     public function createBackup($section, $userId) {
 317 │         try {
 318 │             $content = $this->getSectionContent($section);
 319 │             
 320 │             if (!empty($content)) {
 321 │                 $backupData = json_encode($content, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);
 322 │                 
 323 │                 $sql = "INSERT INTO content_backups (section, backup_data, created_by, created_at) 
 324 │                         VALUES (?, ?, ?, NOW())";
 325 │                 $this->db->execute($sql, [$section, $backupData, $userId]);
 326 │                 
 327 │                 // Manter apenas os Ãºltimos 10 backups por seÃ§Ã£o
 328 │                 $this->cleanupOldBackups($section);
 329 │                 
 330 │                 return true;
 331 │             }
 332 │             
 333 │             return false;
 334 │             
 335 │         } catch (Exception $e) {
 336 │             // Log do erro mas nÃ£o falha o processo principal
 337 │             error_log("Erro ao criar backup da seÃ§Ã£o '$section': " . $e->getMessage());
 338 │             return false;
 339 │         }
 340 │     }
 341 │     
 342 │     /**
 343 │      * Restaura backup
 344 │      */
 345 │     public function restoreBackup($backupId, $userId) {
 346 │         try {
 347 │             $backupId = (int)$backupId;
 348 │             
 349 │             // Buscar backup
 350 │             $sql = "SELECT section, backup_data FROM content_backups WHERE id = ?";
 351 │             $backup = $this->db->fetchOne($sql, [$backupId]);
 352 │             
 353 │             if (!$backup) {
 354 │                 throw new Exception("Backup nÃ£o encontrado");
 355 │             }
 356 │             
 357 │             $section = $backup['section'];
 358 │             $backupData = json_decode($backup['backup_data'], true);
 359 │             
 360 │             if (json_last_error() !== JSON_ERROR_NONE) {
 361 │                 throw new Exception("Dados de backup corrompidos");
 362 │             }
 363 │             
 364 │             $this->db->beginTransaction();
 365 │             
 366 │             // Criar backup do estado atual antes de restaurar
 367 │             $this->createBackup($section . '_before_restore', $userId);
 368 │             
 369 │             // Remover conteÃºdo atual da seÃ§Ã£o
 370 │             $sql = "DELETE FROM site_content WHERE section = ?";
 371 │             $this->db->execute($sql, [$section]);
 372 │             
 373 │             // Restaurar dados do backup
 374 │             foreach ($backupData as $fieldName => $fieldValue) {
 375 │                 $this->updateField($section, $fieldName, $fieldValue, $userId);
 376 │             }
 377 │             
 378 │             $this->db->commit();
 379 │             
 380 │             $this->logger->logActivity(
 381 │                 $userId, 
 382 │                 'restore_backup', 
 383 │                 $section, 
 384 │                 "Backup ID $backupId restaurado para seÃ§Ã£o '$section'"
 385 │             );
 386 │             
 387 │             return [
 388 │                 'success' => true,
 389 │                 'message' => 'Backup restaurado com sucesso'
 390 │             ];
 391 │             
 392 │         } catch (Exception $e) {
 393 │             $this->db->rollback();
 394 │             return [
 395 │                 'success' => false,
 396 │                 'message' => 'Erro ao restaurar backup: ' . $e->getMessage()
 397 │             ];
 398 │         }
 399 │     }
 400 │     
 401 │     /**
 402 │      * Lista backups disponÃ­veis
 403 │      */
 404 │     public function getBackups($section = null, $limit = 50) {
 405 │         try {
 406 │             $sql = "SELECT cb.id, cb.section, cb.created_at, cb.backup_data,
 407 │                            u.username, u.first_name, u.last_name 
 408 │                     FROM content_backups cb 
 409 │                     LEFT JOIN cms_users u ON cb.created_by = u.id 
 410 │                     WHERE 1=1";
 411 │             $params = [];
 412 │             
 413 │             if ($section) {
 414 │                 $sql .= " AND cb.section = ?";
 415 │                 $params[] = Utils::sanitize($section);
 416 │             }
 417 │             
 418 │             $sql .= " ORDER BY cb.created_at DESC LIMIT ?";
 419 │             $params[] = (int)$limit;
 420 │             
 421 │             $backups = $this->db->fetchAll($sql, $params);
 422 │             
 423 │             // Adicionar informaÃ§Ãµes resumidas dos backups
 424 │             foreach ($backups as &$backup) {
 425 │                 $data = json_decode($backup['backup_data'], true);
 426 │                 $backup['fields_count'] = is_array($data) ? count($data) : 0;
 427 │                 $backup['size'] = strlen($backup['backup_data']);
 428 │                 $backup['creator_name'] = trim($backup['first_name'] . ' ' . $backup['last_name']) ?: $backup['username'];
 429 │                 
 430 │                 // NÃ£o enviar dados completos na listagem
 431 │                 unset($backup['backup_data']);
 432 │             }
 433 │             
 434 │             return $backups;
 435 │             
 436 │         } catch (Exception $e) {
 437 │             throw new Exception("Erro ao listar backups: " . $e->getMessage());
 438 │         }
 439 │     }
 440 │     
 441 │     /**
 442 │      * Busca no conteÃºdo
 443 │      */
 444 │     public function searchContent($term, $sections = null) {
 445 │         try {
 446 │             $term = Utils::sanitize($term);
 447 │             $searchTerm = '%' . $this->db->escapeLike($term) . '%';
 448 │             
 449 │             $sql = "SELECT section, field_name, field_value, field_type, updated_at 
 450 │                     FROM site_content 
 451 │                     WHERE field_value LIKE ?";
 452 │             $params = [$searchTerm];
 453 │             
 454 │             if ($sections && is_array($sections)) {
 455 │                 $placeholders = str_repeat('?,', count($sections) - 1) . '?';
 456 │                 $sql .= " AND section IN ($placeholders)";
 457 │                 $params = array_merge($params, $sections);
 458 │             }
 459 │             
 460 │             $sql .= " ORDER BY section, field_name";
 461 │             
 462 │             $results = $this->db->fetchAll($sql, $params);
 463 │             
 464 │             // Processar resultados
 465 │             foreach ($results as &$result) {
 466 │                 $result['field_value'] = $this->processFieldValue($result['field_value'], $result['field_type']);
 467 │                 
 468 │                 // Destacar termo encontrado (apenas para strings)
 469 │                 if ($result['field_type'] === 'text' || $result['field_type'] === 'textarea') {
 470 │                     $result['highlight'] = $this->highlightSearchTerm($result['field_value'], $term);
 471 │                 }
 472 │             }
 473 │             
 474 │             return $results;
 475 │             
 476 │         } catch (Exception $e) {
 477 │             throw new Exception("Erro na busca: " . $e->getMessage());
 478 │         }
 479 │     }
 480 │     
 481 │     /**
 482 │      * ObtÃ©m estatÃ­sticas do conteÃºdo
 483 │      */
 484 │     public function getContentStats() {
 485 │         try {
 486 │             $stats = [];
 487 │             
 488 │             // NÃºmero de seÃ§Ãµes
 489 │             $sql = "SELECT COUNT(DISTINCT section) as total_sections FROM site_content";
 490 │             $stats['total_sections'] = $this->db->fetchOne($sql)['total_sections'];
 491 │             
 492 │             // NÃºmero de campos
 493 │             $sql = "SELECT COUNT(*) as total_fields FROM site_content";
 494 │             $stats['total_fields'] = $this->db->fetchOne($sql)['total_fields'];
 495 │             
 496 │             // Ãšltima atualizaÃ§Ã£o
 497 │             $sql = "SELECT MAX(updated_at) as last_update FROM site_content";
 498 │             $stats['last_update'] = $this->db->fetchOne($sql)['last_update'];
 499 │             
 500 │             // SeÃ§Ãµes com mais campos
 501 │             $sql = "SELECT section, COUNT(*) as field_count 
 502 │                     FROM site_content 
 503 │                     GROUP BY section 
 504 │                     ORDER BY field_count DESC 
 505 │                     LIMIT 5";
 506 │             $stats['sections_by_fields'] = $this->db->fetchAll($sql);
 507 │             
 508 │             // Atividade recente
 509 │             $sql = "SELECT COUNT(*) as recent_updates 
 510 │                     FROM site_content 
 511 │                     WHERE updated_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)";
 512 │             $stats['recent_updates'] = $this->db->fetchOne($sql)['recent_updates'];
 513 │             
 514 │             // Total de backups
 515 │             $sql = "SELECT COUNT(*) as total_backups FROM content_backups";
 516 │             $stats['total_backups'] = $this->db->fetchOne($sql)['total_backups'];
 517 │             
 518 │             return $stats;
 519 │             
 520 │         } catch (Exception $e) {
 521 │             throw new Exception("Erro ao obter estatÃ­sticas: " . $e->getMessage());
 522 │         }
 523 │     }
 524 │     
 525 │     // ===== MÃ‰TODOS PRIVADOS =====
 526 │     
 527 │     /**
 528 │      * Determina o tipo de campo baseado no valor
 529 │      */
 530 │     private function determineFieldType($value) {
 531 │         if (is_array($value)) {
 532 │             return 'json';
 533 │         } elseif (is_bool($value)) {
 534 │             return 'boolean';
 535 │         } elseif (is_numeric($value)) {
 536 │             return 'number';
 537 │         } elseif (Utils::isValidURL($value)) {
 538 │             return 'url';
 539 │         } elseif (strlen($value) > 255) {
 540 │             return 'textarea';
 541 │         } elseif (strip_tags($value) !== $value) {
 542 │             return 'html';
 543 │         } else {
 544 │             return 'text';
 545 │         }
 546 │     }
 547 │     
 548 │     /**
 549 │      * Determina o tipo de configuraÃ§Ã£o
 550 │      */
 551 │     private function determineSettingType($value) {
 552 │         if (is_array($value)) {
 553 │             return 'json';
 554 │         } elseif (is_bool($value)) {
 555 │             return 'boolean';
 556 │         } elseif (is_numeric($value)) {
 557 │             return 'number';
 558 │         } else {
 559 │             return 'text';
 560 │         }
 561 │     }
 562 │     
 563 │     /**
 564 │      * Prepara valor para armazenamento
 565 │      */
 566 │     private function prepareFieldValue($value, $type) {
 567 │         switch ($type) {
 568 │             case 'json':
 569 │                 return json_encode($value, JSON_UNESCAPED_UNICODE);
 570 │             case 'boolean':
 571 │                 return $value ? '1' : '0';
 572 │             case 'number':
 573 │                 return (string)$value;
 574 │             case 'text':
 575 │             case 'textarea':
 576 │             case 'html':
 577 │                 return Utils::sanitize($value);
 578 │             default:
 579 │                 return (string)$value;
 580 │         }
 581 │     }
 582 │     
 583 │     /**
 584 │      * Processa valor do campo para retorno
 585 │      */
 586 │     private function processFieldValue($value, $type) {
 587 │         switch ($type) {
 588 │             case 'json':
 589 │                 $decoded = json_decode($value, true);
 590 │                 return json_last_error() === JSON_ERROR_NONE ? $decoded : $value;
 591 │             case 'boolean':
 592 │                 return (bool)$value;
 593 │             case 'number':
 594 │                 return is_numeric($value) ? (float)$value : $value;
 595 │             default:
 596 │                 return $value;
 597 │         }
 598 │     }
 599 │     
 600 │     /**
 601 │      * Destaca termo de busca no texto
 602 │      */
 603 │     private function highlightSearchTerm($text, $term) {
 604 │         return preg_replace(
 605 │             '/(' . preg_quote($term, '/') . ')/i',
 606 │             '<mark>$1</mark>',
 607 │             $text
 608 │         );
 609 │     }
 610 │     
 611 │     /**
 612 │      * Remove backups antigos
 613 │      */
 614 │     private function cleanupOldBackups($section, $keepCount = 10) {
 615 │         try {
 616 │             $sql = "SELECT id FROM content_backups 
 617 │                     WHERE section = ? 
 618 │                     ORDER BY created_at DESC 
 619 │                     LIMIT 999999 OFFSET ?";
 620 │             
 621 │             $oldBackups = $this->db->fetchAll($sql, [$section, $keepCount]);
 622 │             
 623 │             if (!empty($oldBackups)) {
 624 │                 $ids = array_column($oldBackups, 'id');
 625 │                 $placeholders = str_repeat('?,', count($ids) - 1) . '?';
 626 │                 
 627 │                 $sql = "DELETE FROM content_backups WHERE id IN ($placeholders)";
 628 │                 $this->db->execute($sql, $ids);
 629 │             }
 630 │             
 631 │         } catch (Exception $e) {
 632 │             error_log("Erro ao limpar backups antigos: " . $e->getMessage());
 633 │         }
 634 │     }
 635 │ }
 636 │ ?>

═══════════════════════════════════════════════════════════════
ARQUIVO: public\api\classes\FileManager.php
Tamanho: 27.02KB
Modificado: 07/07/2025 16:07:40
═══════════════════════════════════════════════════════════════
   1 │ <?php
   2 │ /**
   3 │  * Gerenciador de Arquivos - Gracie Barra CMS
   4 │  * Arquivo: public/api/classes/FileManager.php
   5 │  */
   6 │ 
   7 │ require_once __DIR__ . '/../config/database.php';
   8 │ 
   9 │ class FileManager {
  10 │     private $db;
  11 │     private $logger;
  12 │     private $uploadDir;
  13 │     private $allowedTypes;
  14 │     private $maxFileSize;
  15 │     
  16 │     public function __construct() {
  17 │         $this->db = Database::getInstance();
  18 │         $this->logger = new SecurityLogger();
  19 │         $this->uploadDir = UPLOAD_DIR;
  20 │         $this->allowedTypes = ALLOWED_MIME_TYPES;
  21 │         $this->maxFileSize = MAX_FILE_SIZE;
  22 │         
  23 │         // Criar diretÃ³rio de upload se nÃ£o existir
  24 │         $this->ensureUploadDirectory();
  25 │     }
  26 │     
  27 │     /**
  28 │      * Faz upload de um arquivo
  29 │      */
  30 │     public function uploadFile($file, $userId, $altText = '', $description = '') {
  31 │         try {
  32 │             // Validar arquivo
  33 │             $this->validateFile($file);
  34 │             
  35 │             // Gerar nome Ãºnico e seguro
  36 │             $filename = $this->generateUniqueFilename($file['name']);
  37 │             $filePath = $this->uploadDir . $filename;
  38 │             $fileUrl = $this->getFileUrl($filename);
  39 │             
  40 │             // Mover arquivo para destino
  41 │             if (!move_uploaded_file($file['tmp_name'], $filePath)) {
  42 │                 throw new Exception("Erro ao mover arquivo para o destino");
  43 │             }
  44 │             
  45 │             // Obter informaÃ§Ãµes do arquivo
  46 │             $fileInfo = $this->getFileInfo($filePath, $file);
  47 │             
  48 │             // Criar thumbnail se for imagem
  49 │             $this->createThumbnailIfImage($filePath, $fileInfo);
  50 │             
  51 │             // Salvar informaÃ§Ãµes no banco
  52 │             $fileId = $this->saveFileToDatabase($filename, $filePath, $fileUrl, $fileInfo, $altText, $description, $userId);
  53 │             
  54 │             // Log da atividade
  55 │             $this->logger->logActivity($userId, 'upload_file', 'media', 
  56 │                 "Arquivo '{$file['name']}' enviado com sucesso");
  57 │             
  58 │             return [
  59 │                 'success' => true,
  60 │                 'file_id' => $fileId,
  61 │                 'filename' => $filename,
  62 │                 'file_path' => $filePath,
  63 │                 'file_url' => $fileUrl,
  64 │                 'file_info' => $fileInfo,
  65 │                 'message' => 'Arquivo enviado com sucesso'
  66 │             ];
  67 │             
  68 │         } catch (Exception $e) {
  69 │             // Limpar arquivo se houve erro apÃ³s upload
  70 │             if (isset($filePath) && file_exists($filePath)) {
  71 │                 unlink($filePath);
  72 │             }
  73 │             
  74 │             return [
  75 │                 'success' => false,
  76 │                 'message' => $e->getMessage()
  77 │             ];
  78 │         }
  79 │     }
  80 │     
  81 │     /**
  82 │      * Upload de mÃºltiplos arquivos
  83 │      */
  84 │     public function uploadMultipleFiles($files, $userId) {
  85 │         $results = [];
  86 │         $successCount = 0;
  87 │         $totalFiles = count($files['name']);
  88 │         
  89 │         for ($i = 0; $i < $totalFiles; $i++) {
  90 │             $file = [
  91 │                 'name' => $files['name'][$i],
  92 │                 'type' => $files['type'][$i],
  93 │                 'tmp_name' => $files['tmp_name'][$i],
  94 │                 'error' => $files['error'][$i],
  95 │                 'size' => $files['size'][$i]
  96 │             ];
  97 │             
  98 │             $result = $this->uploadFile($file, $userId);
  99 │             $results[] = $result;
 100 │             
 101 │             if ($result['success']) {
 102 │                 $successCount++;
 103 │             }
 104 │         }
 105 │         
 106 │         return [
 107 │             'success' => $successCount > 0,
 108 │             'total' => $totalFiles,
 109 │             'success_count' => $successCount,
 110 │             'failed_count' => $totalFiles - $successCount,
 111 │             'results' => $results,
 112 │             'message' => "$successCount de $totalFiles arquivos enviados com sucesso"
 113 │         ];
 114 │     }
 115 │     
 116 │     /**
 117 │      * Lista arquivos com filtros
 118 │      */
 119 │     public function getFiles($filters = []) {
 120 │         try {
 121 │             $sql = "SELECT mf.*, u.username, u.first_name, u.last_name 
 122 │                     FROM media_files mf 
 123 │                     LEFT JOIN cms_users u ON mf.uploaded_by = u.id 
 124 │                     WHERE 1=1";
 125 │             $params = [];
 126 │             
 127 │             // Aplicar filtros
 128 │             if (isset($filters['type']) && !empty($filters['type'])) {
 129 │                 if ($filters['type'] === 'image') {
 130 │                     $sql .= " AND mf.mime_type LIKE 'image/%'";
 131 │                 } else {
 132 │                     $sql .= " AND mf.mime_type LIKE ?";
 133 │                     $params[] = $filters['type'] . '%';
 134 │                 }
 135 │             }
 136 │             
 137 │             if (isset($filters['user_id']) && is_numeric($filters['user_id'])) {
 138 │                 $sql .= " AND mf.uploaded_by = ?";
 139 │                 $params[] = (int)$filters['user_id'];
 140 │             }
 141 │             
 142 │             if (isset($filters['search']) && !empty($filters['search'])) {
 143 │                 $searchTerm = '%' . $this->db->escapeLike($filters['search']) . '%';
 144 │                 $sql .= " AND (mf.original_name LIKE ? OR mf.alt_text LIKE ? OR mf.description LIKE ?)";
 145 │                 $params[] = $searchTerm;
 146 │                 $params[] = $searchTerm;
 147 │                 $params[] = $searchTerm;
 148 │             }
 149 │             
 150 │             if (isset($filters['featured']) && $filters['featured']) {
 151 │                 $sql .= " AND mf.is_featured = 1";
 152 │             }
 153 │             
 154 │             $sql .= " ORDER BY mf.created_at DESC";
 155 │             
 156 │             if (isset($filters['limit']) && is_numeric($filters['limit'])) {
 157 │                 if (isset($filters['offset']) && is_numeric($filters['offset'])) {
 158 │                     $sql .= " LIMIT ?, ?";
 159 │                     $params[] = (int)$filters['offset'];
 160 │                     $params[] = (int)$filters['limit'];
 161 │                 } else {
 162 │                     $sql .= " LIMIT ?";
 163 │                     $params[] = (int)$filters['limit'];
 164 │                 }
 165 │             }
 166 │             
 167 │             $files = $this->db->fetchAll($sql, $params);
 168 │             
 169 │             // Processar dados dos arquivos
 170 │             foreach ($files as &$file) {
 171 │                 $file = $this->processFileData($file);
 172 │             }
 173 │             
 174 │             return $files;
 175 │             
 176 │         } catch (Exception $e) {
 177 │             throw new Exception("Erro ao listar arquivos: " . $e->getMessage());
 178 │         }
 179 │     }
 180 │     
 181 │     /**
 182 │      * ObtÃ©m informaÃ§Ãµes de um arquivo especÃ­fico
 183 │      */
 184 │     public function getFile($fileId) {
 185 │         try {
 186 │             $sql = "SELECT mf.*, u.username, u.first_name, u.last_name 
 187 │                     FROM media_files mf 
 188 │                     LEFT JOIN cms_users u ON mf.uploaded_by = u.id 
 189 │                     WHERE mf.id = ?";
 190 │             
 191 │             $file = $this->db->fetchOne($sql, [(int)$fileId]);
 192 │             
 193 │             if ($file) {
 194 │                 return $this->processFileData($file);
 195 │             }
 196 │             
 197 │             return null;
 198 │             
 199 │         } catch (Exception $e) {
 200 │             throw new Exception("Erro ao obter arquivo: " . $e->getMessage());
 201 │         }
 202 │     }
 203 │     
 204 │     /**
 205 │      * Atualiza informaÃ§Ãµes de um arquivo
 206 │      */
 207 │     public function updateFile($fileId, $data, $userId) {
 208 │         try {
 209 │             $fileId = (int)$fileId;
 210 │             
 211 │             // Verificar se arquivo existe
 212 │             $file = $this->getFile($fileId);
 213 │             if (!$file) {
 214 │                 throw new Exception("Arquivo nÃ£o encontrado");
 215 │             }
 216 │             
 217 │             // Verificar permissÃµes (admin pode editar qualquer arquivo, usuÃ¡rio sÃ³ seus prÃ³prios)
 218 │             $auth = new Auth();
 219 │             $currentUser = $auth->getCurrentUser();
 220 │             if ($currentUser['role'] !== 'admin' && $file['uploaded_by'] != $userId) {
 221 │                 throw new Exception("Sem permissÃ£o para editar este arquivo");
 222 │             }
 223 │             
 224 │             // Campos permitidos para atualizaÃ§Ã£o
 225 │             $allowedFields = ['alt_text', 'description', 'is_featured'];
 226 │             
 227 │             $updateFields = [];
 228 │             $params = [];
 229 │             
 230 │             foreach ($allowedFields as $field) {
 231 │                 if (isset($data[$field])) {
 232 │                     $updateFields[] = "$field = ?";
 233 │                     $value = Utils::sanitize($data[$field]);
 234 │                     
 235 │                     // Tratar boolean
 236 │                     if ($field === 'is_featured') {
 237 │                         $value = $value ? 1 : 0;
 238 │                     }
 239 │                     
 240 │                     $params[] = $value;
 241 │                 }
 242 │             }
 243 │             
 244 │             if (empty($updateFields)) {
 245 │                 throw new Exception("Nenhum campo vÃ¡lido para atualizar");
 246 │             }
 247 │             
 248 │             $params[] = $fileId;
 249 │             $sql = "UPDATE media_files SET " . implode(', ', $updateFields) . ", updated_at = NOW() WHERE id = ?";
 250 │             
 251 │             $this->db->execute($sql, $params);
 252 │             
 253 │             $this->logger->logActivity($userId, 'update_file', 'media', 
 254 │                 "Arquivo ID $fileId atualizado");
 255 │             
 256 │             return [
 257 │                 'success' => true,
 258 │                 'message' => 'Arquivo atualizado com sucesso'
 259 │             ];
 260 │             
 261 │         } catch (Exception $e) {
 262 │             return [
 263 │                 'success' => false,
 264 │                 'message' => $e->getMessage()
 265 │             ];
 266 │         }
 267 │     }
 268 │     
 269 │     /**
 270 │      * Remove um arquivo
 271 │      */
 272 │     public function deleteFile($fileId, $userId) {
 273 │         try {
 274 │             $fileId = (int)$fileId;
 275 │             
 276 │             // Buscar informaÃ§Ãµes do arquivo
 277 │             $file = $this->getFile($fileId);
 278 │             if (!$file) {
 279 │                 throw new Exception("Arquivo nÃ£o encontrado");
 280 │             }
 281 │             
 282 │             // Verificar permissÃµes
 283 │             $auth = new Auth();
 284 │             $currentUser = $auth->getCurrentUser();
 285 │             if ($currentUser['role'] !== 'admin' && $file['uploaded_by'] != $userId) {
 286 │                 throw new Exception("Sem permissÃ£o para deletar este arquivo");
 287 │             }
 288 │             
 289 │             $this->db->beginTransaction();
 290 │             
 291 │             // Remover arquivo fÃ­sico
 292 │             if (file_exists($file['file_path'])) {
 293 │                 if (!unlink($file['file_path'])) {
 294 │                     error_log("Erro ao remover arquivo fÃ­sico: " . $file['file_path']);
 295 │                 }
 296 │             }
 297 │             
 298 │             // Remover thumbnail se existir
 299 │             $thumbnailPath = $this->getThumbnailPath($file['file_path']);
 300 │             if (file_exists($thumbnailPath)) {
 301 │                 unlink($thumbnailPath);
 302 │             }
 303 │             
 304 │             // Remover do banco
 305 │             $sql = "DELETE FROM media_files WHERE id = ?";
 306 │             $this->db->execute($sql, [$fileId]);
 307 │             
 308 │             $this->db->commit();
 309 │             
 310 │             $this->logger->logActivity($userId, 'delete_file', 'media', 
 311 │                 "Arquivo '{$file['original_name']}' removido");
 312 │             
 313 │             return [
 314 │                 'success' => true,
 315 │                 'message' => 'Arquivo removido com sucesso'
 316 │             ];
 317 │             
 318 │         } catch (Exception $e) {
 319 │             $this->db->rollback();
 320 │             return [
 321 │                 'success' => false,
 322 │                 'message' => $e->getMessage()
 323 │             ];
 324 │         }
 325 │     }
 326 │     
 327 │     /**
 328 │      * Cria thumbnail de imagem
 329 │      */
 330 │     public function createThumbnail($sourceFile, $width = 300, $height = 300) {
 331 │         try {
 332 │             if (!extension_loaded('gd')) {
 333 │                 throw new Exception("ExtensÃ£o GD nÃ£o estÃ¡ disponÃ­vel");
 334 │             }
 335 │             
 336 │             $imageInfo = getimagesize($sourceFile);
 337 │             if (!$imageInfo) {
 338 │                 throw new Exception("Arquivo nÃ£o Ã© uma imagem vÃ¡lida");
 339 │             }
 340 │             
 341 │             $sourceWidth = $imageInfo[0];
 342 │             $sourceHeight = $imageInfo[1];
 343 │             $mimeType = $imageInfo['mime'];
 344 │             
 345 │             // Criar imagem fonte
 346 │             switch ($mimeType) {
 347 │                 case 'image/jpeg':
 348 │                     $sourceImage = imagecreatefromjpeg($sourceFile);
 349 │                     break;
 350 │                 case 'image/png':
 351 │                     $sourceImage = imagecreatefrompng($sourceFile);
 352 │                     break;
 353 │                 case 'image/gif':
 354 │                     $sourceImage = imagecreatefromgif($sourceFile);
 355 │                     break;
 356 │                 case 'image/webp':
 357 │                     $sourceImage = imagecreatefromwebp($sourceFile);
 358 │                     break;
 359 │                 default:
 360 │                     throw new Exception("Tipo de imagem nÃ£o suportado para thumbnail");
 361 │             }
 362 │             
 363 │             if (!$sourceImage) {
 364 │                 throw new Exception("Erro ao carregar imagem fonte");
 365 │             }
 366 │             
 367 │             // Calcular dimensÃµes mantendo proporÃ§Ã£o
 368 │             $ratio = min($width / $sourceWidth, $height / $sourceHeight);
 369 │             $newWidth = (int)($sourceWidth * $ratio);
 370 │             $newHeight = (int)($sourceHeight * $ratio);
 371 │             
 372 │             // Criar thumbnail
 373 │             $thumbnail = imagecreatetruecolor($newWidth, $newHeight);
 374 │             
 375 │             // Preservar transparÃªncia para PNG e GIF
 376 │             if ($mimeType === 'image/png' || $mimeType === 'image/gif') {
 377 │                 imagealphablending($thumbnail, false);
 378 │                 imagesavealpha($thumbnail, true);
 379 │                 
 380 │                 $transparent = imagecolorallocatealpha($thumbnail, 255, 255, 255, 127);
 381 │                 imagefilledrectangle($thumbnail, 0, 0, $newWidth, $newHeight, $transparent);
 382 │             }
 383 │             
 384 │             // Redimensionar
 385 │             imagecopyresampled($thumbnail, $sourceImage, 0, 0, 0, 0, 
 386 │                              $newWidth, $newHeight, $sourceWidth, $sourceHeight);
 387 │             
 388 │             // Salvar thumbnail
 389 │             $thumbnailPath = $this->getThumbnailPath($sourceFile);
 390 │             $saved = false;
 391 │             
 392 │             switch ($mimeType) {
 393 │                 case 'image/jpeg':
 394 │                     $saved = imagejpeg($thumbnail, $thumbnailPath, 85);
 395 │                     break;
 396 │                 case 'image/png':
 397 │                     $saved = imagepng($thumbnail, $thumbnailPath, 8);
 398 │                     break;
 399 │                 case 'image/gif':
 400 │                     $saved = imagegif($thumbnail, $thumbnailPath);
 401 │                     break;
 402 │                 case 'image/webp':
 403 │                     $saved = imagewebp($thumbnail, $thumbnailPath, 85);
 404 │                     break;
 405 │             }
 406 │             
 407 │             // Limpar memÃ³ria
 408 │             imagedestroy($sourceImage);
 409 │             imagedestroy($thumbnail);
 410 │             
 411 │             if (!$saved) {
 412 │                 throw new Exception("Erro ao salvar thumbnail");
 413 │             }
 414 │             
 415 │             return $thumbnailPath;
 416 │             
 417 │         } catch (Exception $e) {
 418 │             error_log("Erro ao criar thumbnail: " . $e->getMessage());
 419 │             return false;
 420 │         }
 421 │     }
 422 │     
 423 │     /**
 424 │      * ObtÃ©m estatÃ­sticas de arquivos
 425 │      */
 426 │     public function getStats() {
 427 │         try {
 428 │             $stats = [];
 429 │             
 430 │             // Total de arquivos
 431 │             $sql = "SELECT COUNT(*) as total_files FROM media_files";
 432 │             $stats['total_files'] = $this->db->fetchOne($sql)['total_files'];
 433 │             
 434 │             // Tamanho total
 435 │             $sql = "SELECT SUM(file_size) as total_size FROM media_files";
 436 │             $totalSize = $this->db->fetchOne($sql)['total_size'] ?? 0;
 437 │             $stats['total_size'] = $totalSize;
 438 │             $stats['total_size_formatted'] = Utils::formatBytes($totalSize);
 439 │             
 440 │             // Arquivos por tipo
 441 │             $sql = "SELECT 
 442 │                         CASE 
 443 │                             WHEN mime_type LIKE 'image/%' THEN 'Imagens'
 444 │                             WHEN mime_type LIKE 'video/%' THEN 'VÃ­deos'
 445 │                             WHEN mime_type LIKE 'audio/%' THEN 'Ãudios'
 446 │                             WHEN mime_type LIKE 'application/pdf' THEN 'PDFs'
 447 │                             ELSE 'Outros'
 448 │                         END as type_group,
 449 │                         COUNT(*) as count,
 450 │                         SUM(file_size) as size
 451 │                     FROM media_files 
 452 │                     GROUP BY type_group
 453 │                     ORDER BY count DESC";
 454 │             $stats['files_by_type'] = $this->db->fetchAll($sql);
 455 │             
 456 │             // Formatar tamanhos
 457 │             foreach ($stats['files_by_type'] as &$type) {
 458 │                 $type['size_formatted'] = Utils::formatBytes($type['size']);
 459 │             }
 460 │             
 461 │             // Uploads recentes (Ãºltimos 7 dias)
 462 │             $sql = "SELECT COUNT(*) as recent_uploads 
 463 │                     FROM media_files 
 464 │                     WHERE created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)";
 465 │             $stats['recent_uploads'] = $this->db->fetchOne($sql)['recent_uploads'];
 466 │             
 467 │             // Arquivo mais recente
 468 │             $sql = "SELECT original_name, created_at 
 469 │                     FROM media_files 
 470 │                     ORDER BY created_at DESC 
 471 │                     LIMIT 1";
 472 │             $stats['latest_file'] = $this->db->fetchOne($sql);
 473 │             
 474 │             // Top uploaders
 475 │             $sql = "SELECT u.first_name, u.last_name, u.username, COUNT(*) as upload_count
 476 │                     FROM media_files mf
 477 │                     JOIN cms_users u ON mf.uploaded_by = u.id
 478 │                     GROUP BY mf.uploaded_by
 479 │                     ORDER BY upload_count DESC
 480 │                     LIMIT 5";
 481 │             $stats['top_uploaders'] = $this->db->fetchAll($sql);
 482 │             
 483 │             return $stats;
 484 │             
 485 │         } catch (Exception $e) {
 486 │             throw new Exception("Erro ao obter estatÃ­sticas: " . $e->getMessage());
 487 │         }
 488 │     }
 489 │     
 490 │     /**
 491 │      * Limpa arquivos Ã³rfÃ£os (nÃ£o referenciados no banco)
 492 │      */
 493 │     public function cleanupOrphanFiles($userId) {
 494 │         try {
 495 │             $orphanCount = 0;
 496 │             $cleanedSize = 0;
 497 │             
 498 │             // Buscar todos os arquivos do diretÃ³rio
 499 │             $files = glob($this->uploadDir . '*');
 500 │             
 501 │             foreach ($files as $filePath) {
 502 │                 $filename = basename($filePath);
 503 │                 
 504 │                 // Ignorar diretÃ³rios e arquivos de sistema
 505 │                 if (is_dir($filePath) || strpos($filename, '.') === 0) {
 506 │                     continue;
 507 │                 }
 508 │                 
 509 │                 // Verificar se arquivo estÃ¡ no banco
 510 │                 $sql = "SELECT id FROM media_files WHERE filename = ?";
 511 │                 $exists = $this->db->fetchOne($sql, [$filename]);
 512 │                 
 513 │                 if (!$exists) {
 514 │                     // Arquivo Ã³rfÃ£o, obter tamanho antes de remover
 515 │                     $fileSize = filesize($filePath);
 516 │                     
 517 │                     // Remover arquivo
 518 │                     if (unlink($filePath)) {
 519 │                         $orphanCount++;
 520 │                         $cleanedSize += $fileSize;
 521 │                     }
 522 │                 }
 523 │             }
 524 │             
 525 │             $this->logger->logActivity($userId, 'cleanup_orphan_files', 'media', 
 526 │                 "$orphanCount arquivos Ã³rfÃ£os removidos (" . Utils::formatBytes($cleanedSize) . ")");
 527 │             
 528 │             return [
 529 │                 'success' => true,
 530 │                 'orphan_count' => $orphanCount,
 531 │                 'cleaned_size' => $cleanedSize,
 532 │                 'cleaned_size_formatted' => Utils::formatBytes($cleanedSize),
 533 │                 'message' => "$orphanCount arquivos Ã³rfÃ£os removidos"
 534 │             ];
 535 │             
 536 │         } catch (Exception $e) {
 537 │             return [
 538 │                 'success' => false,
 539 │                 'message' => 'Erro na limpeza: ' . $e->getMessage()
 540 │             ];
 541 │         }
 542 │     }
 543 │     
 544 │     // ===== MÃ‰TODOS PRIVADOS =====
 545 │     
 546 │     /**
 547 │      * Garante que o diretÃ³rio de upload existe
 548 │      */
 549 │     private function ensureUploadDirectory() {
 550 │         if (!is_dir($this->uploadDir)) {
 551 │             if (!mkdir($this->uploadDir, 0755, true)) {
 552 │                 throw new Exception("NÃ£o foi possÃ­vel criar diretÃ³rio de upload");
 553 │             }
 554 │         }
 555 │         
 556 │         if (!is_writable($this->uploadDir)) {
 557 │             throw new Exception("DiretÃ³rio de upload nÃ£o tem permissÃ£o de escrita");
 558 │         }
 559 │     }
 560 │     
 561 │     /**
 562 │      * Valida arquivo para upload
 563 │      */
 564 │     private function validateFile($file) {
 565 │         // Verificar erros de upload
 566 │         if ($file['error'] !== UPLOAD_ERR_OK) {
 567 │             throw new Exception("Erro no upload: " . $this->getUploadErrorMessage($file['error']));
 568 │         }
 569 │         
 570 │         // Verificar tamanho
 571 │         if ($file['size'] > $this->maxFileSize) {
 572 │             throw new Exception("Arquivo muito grande. Tamanho mÃ¡ximo: " . Utils::formatBytes($this->maxFileSize));
 573 │         }
 574 │         
 575 │         if ($file['size'] <= 0) {
 576 │             throw new Exception("Arquivo vazio");
 577 │         }
 578 │         
 579 │         // Verificar extensÃ£o
 580 │         if (!Utils::isValidFileExtension($file['name'])) {
 581 │             throw new Exception("Tipo de arquivo nÃ£o permitido. ExtensÃµes permitidas: " . implode(', ', ALLOWED_EXTENSIONS));
 582 │         }
 583 │         
 584 │         // Verificar MIME type
 585 │         if (!Utils::isValidMimeType($file['type'])) {
 586 │             throw new Exception("Tipo MIME nÃ£o permitido");
 587 │         }
 588 │         
 589 │         // VerificaÃ§Ã£o adicional para imagens
 590 │         if (strpos($file['type'], 'image/') === 0) {
 591 │             $imageInfo = getimagesize($file['tmp_name']);
 592 │             if (!$imageInfo) {
 593 │                 throw new Exception("Arquivo nÃ£o Ã© uma imagem vÃ¡lida");
 594 │             }
 595 │             
 596 │             // Verificar dimensÃµes mÃ¡ximas (opcional)
 597 │             $maxWidth = 4000;
 598 │             $maxHeight = 4000;
 599 │             if ($imageInfo[0] > $maxWidth || $imageInfo[1] > $maxHeight) {
 600 │                 throw new Exception("Imagem muito grande. DimensÃµes mÃ¡ximas: {$maxWidth}x{$maxHeight}px");
 601 │             }
 602 │         }
 603 │         
 604 │         // Verificar se Ã© um arquivo executÃ¡vel (seguranÃ§a)
 605 │         $dangerousExtensions = ['php', 'js', 'html', 'htm', 'exe', 'bat', 'cmd', 'sh'];
 606 │         $extension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));
 607 │         if (in_array($extension, $dangerousExtensions)) {
 608 │             throw new Exception("Tipo de arquivo perigoso nÃ£o permitido");
 609 │         }
 610 │     }
 611 │     
 612 │     /**
 613 │      * Gera nome Ãºnico e seguro para o arquivo
 614 │      */
 615 │     private function generateUniqueFilename($originalName) {
 616 │         $extension = strtolower(pathinfo($originalName, PATHINFO_EXTENSION));
 617 │         $baseName = pathinfo($originalName, PATHINFO_FILENAME);
 618 │         
 619 │         // Limpar nome base
 620 │         $baseName = preg_replace('/[^a-zA-Z0-9-_]/', '_', $baseName);
 621 │         $baseName = substr($baseName, 0, 50); // Limitar tamanho
 622 │         
 623 │         // Gerar nome Ãºnico
 624 │         do {
 625 │             $uniqueId = uniqid() . '_' . mt_rand(1000, 9999);
 626 │             $filename = $baseName . '_' . $uniqueId . '.' . $extension;
 627 │         } while (file_exists($this->uploadDir . $filename));
 628 │         
 629 │         return $filename;
 630 │     }
 631 │     
 632 │     /**
 633 │      * ObtÃ©m informaÃ§Ãµes do arquivo
 634 │      */
 635 │     private function getFileInfo($filePath, $originalFile) {
 636 │         $info = [
 637 │             'file_size' => filesize($filePath),
 638 │             'mime_type' => $originalFile['type'],
 639 │             'file_extension' => strtolower(pathinfo($filePath, PATHINFO_EXTENSION)),
 640 │             'width' => null,
 641 │             'height' => null
 642 │         ];
 643 │         
 644 │         // Obter dimensÃµes se for imagem
 645 │         if (strpos($info['mime_type'], 'image/') === 0) {
 646 │             $imageInfo = getimagesize($filePath);
 647 │             if ($imageInfo) {
 648 │                 $info['width'] = $imageInfo[0];
 649 │                 $info['height'] = $imageInfo[1];
 650 │             }
 651 │         }
 652 │         
 653 │         return $info;
 654 │     }
 655 │     
 656 │     /**
 657 │      * Cria thumbnail se for imagem
 658 │      */
 659 │     private function createThumbnailIfImage($filePath, $fileInfo) {
 660 │         if (strpos($fileInfo['mime_type'], 'image/') === 0) {
 661 │             $this->createThumbnail($filePath);
 662 │         }
 663 │     }
 664 │     
 665 │     /**
 666 │      * Salva informaÃ§Ãµes do arquivo no banco
 667 │      */
 668 │     private function saveFileToDatabase($filename, $filePath, $fileUrl, $fileInfo, $altText, $description, $userId) {
 669 │         $sql = "INSERT INTO media_files 
 670 │                 (filename, original_name, file_path, file_url, file_size, mime_type, file_extension, 
 671 │                  width, height, alt_text, description, uploaded_by, created_at, updated_at) 
 672 │                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())";
 673 │         
 674 │         $params = [
 675 │             $filename,
 676 │             basename($filePath), // original_name serÃ¡ derivado do filename
 677 │             $filePath,
 678 │             $fileUrl,
 679 │             $fileInfo['file_size'],
 680 │             $fileInfo['mime_type'],
 681 │             $fileInfo['file_extension'],
 682 │             $fileInfo['width'],
 683 │             $fileInfo['height'],
 684 │             Utils::sanitize($altText),
 685 │             Utils::sanitize($description),
 686 │             $userId
 687 │         ];
 688 │         
 689 │         return $this->db->insert($sql, $params);
 690 │     }
 691 │     
 692 │     /**
 693 │      * Processa dados do arquivo para retorno
 694 │      */
 695 │     private function processFileData($file) {
 696 │         $file['file_size_formatted'] = Utils::formatBytes($file['file_size']);
 697 │         $file['is_image'] = strpos($file['mime_type'], 'image/') === 0;
 698 │         $file['uploader_name'] = trim($file['first_name'] . ' ' . $file['last_name']) ?: $file['username'];
 699 │         
 700 │         // Adicionar URL do thumbnail se existir
 701 │         if ($file['is_image']) {
 702 │             $thumbnailPath = $this->getThumbnailPath($file['file_path']);
 703 │             if (file_exists($thumbnailPath)) {
 704 │                 $file['thumbnail_url'] = $this->getFileUrl('thumb_' . $file['filename']);
 705 │             }
 706 │         }
 707 │         
 708 │         // Limpar dados sensÃ­veis
 709 │         unset($file['first_name'], $file['last_name']);
 710 │         
 711 │         return $file;
 712 │     }
 713 │     
 714 │     /**
 715 │      * ObtÃ©m URL do arquivo
 716 │      */
 717 │     private function getFileUrl($filename) {
 718 │         return SITE_URL . '/' . $this->uploadDir . $filename;
 719 │     }
 720 │     
 721 │     /**
 722 │      * ObtÃ©m caminho do thumbnail
 723 │      */
 724 │     private function getThumbnailPath($originalPath) {
 725 │         $pathInfo = pathinfo($originalPath);
 726 │         return $pathInfo['dirname'] . '/thumb_' . $pathInfo['basename'];
 727 │     }
 728 │     
 729 │     /**
 730 │      * ObtÃ©m mensagem de erro de upload
 731 │      */
 732 │     private function getUploadErrorMessage($errorCode) {
 733 │         $errors = [
 734 │             UPLOAD_ERR_INI_SIZE => 'Arquivo muito grande (limite do servidor)',
 735 │             UPLOAD_ERR_FORM_SIZE => 'Arquivo muito grande (limite do formulÃ¡rio)',
 736 │             UPLOAD_ERR_PARTIAL => 'Upload parcial - arquivo incompleto',
 737 │             UPLOAD_ERR_NO_FILE => 'Nenhum arquivo foi enviado',
 738 │             UPLOAD_ERR_NO_TMP_DIR => 'DiretÃ³rio temporÃ¡rio ausente',
 739 │             UPLOAD_ERR_CANT_WRITE => 'Erro de escrita no disco',
 740 │             UPLOAD_ERR_EXTENSION => 'Upload interrompido por extensÃ£o PHP'
 741 │         ];
 742 │         
 743 │         return $errors[$errorCode] ?? 'Erro desconhecido no upload';
 744 │     }
 745 │ }
 746 │ ?>

═══════════════════════════════════════════════════════════════
ARQUIVO: public\api\config\database.php
Tamanho: 15.43KB
Modificado: 07/07/2025 11:59:56
═══════════════════════════════════════════════════════════════
   1 │ <?php
   2 │ /**
   3 │  * ConfiguraÃ§Ã£o do Banco de Dados - Gracie Barra CMS
   4 │  * Arquivo: public/api/config/database.php
   5 │  */
   6 │ 
   7 │ // ConfiguraÃ§Ãµes do banco de dados
   8 │ define('DB_HOST', 'localhost');
   9 │ define('DB_NAME', 'u674882802_gb');
  10 │ define('DB_USER', 'u674882802_jonasgb');
  11 │ define('DB_PASS', 'MinhaSenhaSegura123!'); // âš ï¸ ALTERE PARA A SENHA REAL
  12 │ define('DB_CHARSET', 'utf8mb4');
  13 │ 
  14 │ // ConfiguraÃ§Ãµes de seguranÃ§a
  15 │ define('JWT_SECRET', 'gb_cms_secret_key_muito_segura_' . hash('sha256', 'gracie_barra_cidade_nova_2024'));
  16 │ define('SESSION_NAME', 'GB_CMS_SESSION');
  17 │ define('COOKIE_LIFETIME', 7200); // 2 horas
  18 │ define('REMEMBER_ME_LIFETIME', 2592000); // 30 dias
  19 │ 
  20 │ // ConfiguraÃ§Ãµes de upload
  21 │ define('UPLOAD_DIR', '../uploads/');
  22 │ define('MAX_FILE_SIZE', 5 * 1024 * 1024); // 5MB
  23 │ define('ALLOWED_EXTENSIONS', ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg']);
  24 │ define('ALLOWED_MIME_TYPES', [
  25 │     'image/jpeg',
  26 │     'image/png', 
  27 │     'image/gif',
  28 │     'image/webp',
  29 │     'image/svg+xml'
  30 │ ]);
  31 │ 
  32 │ // ConfiguraÃ§Ãµes do site
  33 │ define('SITE_URL', 'http://localhost'); // âš ï¸ ALTERE PARA A URL REAL DO SEU SITE
  34 │ define('ADMIN_EMAIL', 'admin@graciebarracidadenova.com');
  35 │ define('SITE_NAME', 'Gracie Barra Cidade Nova');
  36 │ 
  37 │ // ConfiguraÃ§Ãµes de ambiente
  38 │ define('ENVIRONMENT', 'development'); // development | production
  39 │ define('DEBUG_MODE', ENVIRONMENT === 'development');
  40 │ 
  41 │ // Configurar timezone
  42 │ date_default_timezone_set('America/Manaus');
  43 │ 
  44 │ // Configurar relatÃ³rio de erros baseado no ambiente
  45 │ if (DEBUG_MODE) {
  46 │     error_reporting(E_ALL);
  47 │     ini_set('display_errors', 1);
  48 │     ini_set('log_errors', 1);
  49 │ } else {
  50 │     error_reporting(E_ERROR | E_WARNING | E_PARSE);
  51 │     ini_set('display_errors', 0);
  52 │     ini_set('log_errors', 1);
  53 │ }
  54 │ 
  55 │ // Configurar logs
  56 │ ini_set('error_log', __DIR__ . '/../../../logs/error.log');
  57 │ 
  58 │ /**
  59 │  * Classe principal do banco de dados usando padrÃ£o Singleton
  60 │  */
  61 │ class Database {
  62 │     private static $instance = null;
  63 │     private $connection;
  64 │     private $transactionLevel = 0;
  65 │     
  66 │     private function __construct() {
  67 │         try {
  68 │             $dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=" . DB_CHARSET;
  69 │             $options = [
  70 │                 PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
  71 │                 PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
  72 │                 PDO::ATTR_EMULATE_PREPARES => false,
  73 │                 PDO::ATTR_PERSISTENT => false,
  74 │                 PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES " . DB_CHARSET . " COLLATE utf8mb4_unicode_ci",
  75 │                 PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => true
  76 │             ];
  77 │             
  78 │             $this->connection = new PDO($dsn, DB_USER, DB_PASS, $options);
  79 │             
  80 │             // Configurar SQL mode para mÃ¡xima compatibilidade
  81 │             $this->connection->exec("SET sql_mode = 'STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO'");
  82 │             
  83 │         } catch (PDOException $e) {
  84 │             $this->logError("Erro de conexÃ£o com o banco: " . $e->getMessage());
  85 │             
  86 │             if (DEBUG_MODE) {
  87 │                 die("Erro de conexÃ£o com o banco de dados: " . $e->getMessage());
  88 │             } else {
  89 │                 die("Erro de conexÃ£o com o banco de dados. Tente novamente mais tarde.");
  90 │             }
  91 │         }
  92 │     }
  93 │     
  94 │     /**
  95 │      * ObtÃ©m a instÃ¢ncia Ãºnica da classe (Singleton)
  96 │      */
  97 │     public static function getInstance() {
  98 │         if (self::$instance === null) {
  99 │             self::$instance = new self();
 100 │         }
 101 │         return self::$instance;
 102 │     }
 103 │     
 104 │     /**
 105 │      * Retorna a conexÃ£o PDO
 106 │      */
 107 │     public function getConnection() {
 108 │         return $this->connection;
 109 │     }
 110 │     
 111 │     /**
 112 │      * Executa uma query preparada
 113 │      */
 114 │     public function query($sql, $params = []) {
 115 │         try {
 116 │             $stmt = $this->connection->prepare($sql);
 117 │             $stmt->execute($params);
 118 │             return $stmt;
 119 │         } catch (PDOException $e) {
 120 │             $this->logError("Erro na consulta SQL: " . $e->getMessage() . " | SQL: " . $sql . " | Params: " . json_encode($params));
 121 │             throw new Exception("Erro na operaÃ§Ã£o do banco de dados: " . ($DEBUG_MODE ? $e->getMessage() : 'OperaÃ§Ã£o falhou'));
 122 │         }
 123 │     }
 124 │     
 125 │     /**
 126 │      * Executa INSERT e retorna o ID inserido
 127 │      */
 128 │     public function insert($sql, $params = []) {
 129 │         $this->query($sql, $params);
 130 │         return $this->connection->lastInsertId();
 131 │     }
 132 │     
 133 │     /**
 134 │      * Executa UPDATE/DELETE e retorna nÃºmero de linhas afetadas
 135 │      */
 136 │     public function execute($sql, $params = []) {
 137 │         $stmt = $this->query($sql, $params);
 138 │         return $stmt->rowCount();
 139 │     }
 140 │     
 141 │     /**
 142 │      * Busca um Ãºnico registro
 143 │      */
 144 │     public function fetchOne($sql, $params = []) {
 145 │         $stmt = $this->query($sql, $params);
 146 │         return $stmt->fetch();
 147 │     }
 148 │     
 149 │     /**
 150 │      * Busca mÃºltiplos registros
 151 │      */
 152 │     public function fetchAll($sql, $params = []) {
 153 │         $stmt = $this->query($sql, $params);
 154 │         return $stmt->fetchAll();
 155 │     }
 156 │     
 157 │     /**
 158 │      * Conta registros
 159 │      */
 160 │     public function count($sql, $params = []) {
 161 │         $stmt = $this->query($sql, $params);
 162 │         return (int)$stmt->fetchColumn();
 163 │     }
 164 │     
 165 │     /**
 166 │      * Verifica se existe pelo menos um registro
 167 │      */
 168 │     public function exists($sql, $params = []) {
 169 │         return $this->count($sql, $params) > 0;
 170 │     }
 171 │     
 172 │     /**
 173 │      * Inicia transaÃ§Ã£o com suporte a transaÃ§Ãµes aninhadas
 174 │      */
 175 │     public function beginTransaction() {
 176 │         if ($this->transactionLevel === 0) {
 177 │             $result = $this->connection->beginTransaction();
 178 │         } else {
 179 │             $this->connection->exec("SAVEPOINT sp_level_{$this->transactionLevel}");
 180 │             $result = true;
 181 │         }
 182 │         
 183 │         $this->transactionLevel++;
 184 │         return $result;
 185 │     }
 186 │     
 187 │     /**
 188 │      * Confirma transaÃ§Ã£o
 189 │      */
 190 │     public function commit() {
 191 │         $this->transactionLevel--;
 192 │         
 193 │         if ($this->transactionLevel === 0) {
 194 │             return $this->connection->commit();
 195 │         } else {
 196 │             $this->connection->exec("RELEASE SAVEPOINT sp_level_{$this->transactionLevel}");
 197 │             return true;
 198 │         }
 199 │     }
 200 │     
 201 │     /**
 202 │      * Desfaz transaÃ§Ã£o
 203 │      */
 204 │     public function rollback() {
 205 │         $this->transactionLevel--;
 206 │         
 207 │         if ($this->transactionLevel === 0) {
 208 │             return $this->connection->rollback();
 209 │         } else {
 210 │             $this->connection->exec("ROLLBACK TO SAVEPOINT sp_level_{$this->transactionLevel}");
 211 │             return true;
 212 │         }
 213 │     }
 214 │     
 215 │     /**
 216 │      * Escapa string para uso em LIKE
 217 │      */
 218 │     public function escapeLike($string) {
 219 │         return str_replace(['%', '_'], ['\%', '\_'], $string);
 220 │     }
 221 │     
 222 │     /**
 223 │      * Log de erros
 224 │      */
 225 │     private function logError($message) {
 226 │         $logMessage = "[" . date('Y-m-d H:i:s') . "] DATABASE ERROR: " . $message . PHP_EOL;
 227 │         file_put_contents(__DIR__ . '/../../../logs/database.log', $logMessage, FILE_APPEND | LOCK_EX);
 228 │     }
 229 │     
 230 │     /**
 231 │      * Impede clonagem
 232 │      */
 233 │     private function __clone() {}
 234 │     
 235 │     /**
 236 │      * Impede deserializaÃ§Ã£o
 237 │      */
 238 │     public function __wakeup() {
 239 │         throw new Exception("Cannot unserialize singleton");
 240 │     }
 241 │ }
 242 │ 
 243 │ /**
 244 │  * Classe para logging de atividades e seguranÃ§a
 245 │  */
 246 │ class SecurityLogger {
 247 │     private $db;
 248 │     
 249 │     public function __construct() {
 250 │         $this->db = Database::getInstance();
 251 │     }
 252 │     
 253 │     /**
 254 │      * Registra atividade do usuÃ¡rio
 255 │      */
 256 │     public function logActivity($userId, $action, $section = null, $details = null) {
 257 │         $sql = "INSERT INTO activity_logs (user_id, action, section, details, ip_address, user_agent, created_at) 
 258 │                 VALUES (?, ?, ?, ?, ?, ?, NOW())";
 259 │         
 260 │         $params = [
 261 │             $userId,
 262 │             $action,
 263 │             $section,
 264 │             $details,
 265 │             $this->getClientIP(),
 266 │             $this->getUserAgent()
 267 │         ];
 268 │         
 269 │         try {
 270 │             $this->db->query($sql, $params);
 271 │         } catch (Exception $e) {
 272 │             $this->logError("Erro ao registrar atividade: " . $e->getMessage());
 273 │         }
 274 │     }
 275 │     
 276 │     /**
 277 │      * ObtÃ©m atividades recentes
 278 │      */
 279 │     public function getRecentActivity($limit = 50, $userId = null) {
 280 │         $sql = "SELECT al.*, u.username, u.first_name, u.last_name 
 281 │                 FROM activity_logs al 
 282 │                 LEFT JOIN cms_users u ON al.user_id = u.id 
 283 │                 WHERE 1=1";
 284 │         $params = [];
 285 │         
 286 │         if ($userId) {
 287 │             $sql .= " AND al.user_id = ?";
 288 │             $params[] = $userId;
 289 │         }
 290 │         
 291 │         $sql .= " ORDER BY al.created_at DESC LIMIT ?";
 292 │         $params[] = (int)$limit;
 293 │         
 294 │         return $this->db->fetchAll($sql, $params);
 295 │     }
 296 │     
 297 │     /**
 298 │      * Registra tentativa de login falhada
 299 │      */
 300 │     public function logFailedLogin($username) {
 301 │         $this->logActivity(0, 'failed_login', 'auth', "Tentativa de login falhada para: $username");
 302 │     }
 303 │     
 304 │     /**
 305 │      * Verifica se IP estÃ¡ sendo bloqueado por muitas tentativas
 306 │      */
 307 │     public function isIPBlocked($maxAttempts = 5, $timeWindow = 900) { // 15 minutos
 308 │         $ip = $this->getClientIP();
 309 │         
 310 │         $sql = "SELECT COUNT(*) FROM activity_logs 
 311 │                 WHERE action = 'failed_login' 
 312 │                 AND ip_address = ? 
 313 │                 AND created_at > DATE_SUB(NOW(), INTERVAL ? SECOND)";
 314 │         
 315 │         $attempts = $this->db->count($sql, [$ip, $timeWindow]);
 316 │         return $attempts >= $maxAttempts;
 317 │     }
 318 │     
 319 │     /**
 320 │      * ObtÃ©m IP real do cliente
 321 │      */
 322 │     private function getClientIP() {
 323 │         $ipKeys = ['HTTP_X_FORWARDED_FOR', 'HTTP_X_REAL_IP', 'HTTP_CLIENT_IP', 'REMOTE_ADDR'];
 324 │         
 325 │         foreach ($ipKeys as $key) {
 326 │             if (!empty($_SERVER[$key])) {
 327 │                 $ip = $_SERVER[$key];
 328 │                 
 329 │                 // Para X-Forwarded-For, pegar o primeiro IP
 330 │                 if (strpos($ip, ',') !== false) {
 331 │                     $ip = trim(explode(',', $ip)[0]);
 332 │                 }
 333 │                 
 334 │                 // Validar IP
 335 │                 if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) {
 336 │                     return $ip;
 337 │                 }
 338 │             }
 339 │         }
 340 │         
 341 │         return $_SERVER['REMOTE_ADDR'] ?? '0.0.0.0';
 342 │     }
 343 │     
 344 │     /**
 345 │      * ObtÃ©m User Agent do cliente
 346 │      */
 347 │     private function getUserAgent() {
 348 │         return substr($_SERVER['HTTP_USER_AGENT'] ?? 'Unknown', 0, 500);
 349 │     }
 350 │     
 351 │     private function logError($message) {
 352 │         error_log("[SecurityLogger] " . $message);
 353 │     }
 354 │ }
 355 │ 
 356 │ /**
 357 │  * Classe utilitÃ¡ria para operaÃ§Ãµes comuns
 358 │  */
 359 │ class Utils {
 360 │     /**
 361 │      * Sanitiza dados de entrada
 362 │      */
 363 │     public static function sanitize($data) {
 364 │         if (is_array($data)) {
 365 │             return array_map([self::class, 'sanitize'], $data);
 366 │         }
 367 │         
 368 │         if (is_string($data)) {
 369 │             $data = trim($data);
 370 │             $data = htmlspecialchars($data, ENT_QUOTES, 'UTF-8');
 371 │             return $data;
 372 │         }
 373 │         
 374 │         return $data;
 375 │     }
 376 │     
 377 │     /**
 378 │      * Valida email
 379 │      */
 380 │     public static function isValidEmail($email) {
 381 │         return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;
 382 │     }
 383 │     
 384 │     /**
 385 │      * Valida URL
 386 │      */
 387 │     public static function isValidURL($url) {
 388 │         return filter_var($url, FILTER_VALIDATE_URL) !== false;
 389 │     }
 390 │     
 391 │     /**
 392 │      * Gera hash seguro de senha
 393 │      */
 394 │     public static function hashPassword($password) {
 395 │         return password_hash($password, PASSWORD_ARGON2ID, [
 396 │             'memory_cost' => 65536, // 64 MB
 397 │             'time_cost' => 4,       // 4 iterations
 398 │             'threads' => 3          // 3 threads
 399 │         ]);
 400 │     }
 401 │     
 402 │     /**
 403 │      * Verifica senha
 404 │      */
 405 │     public static function verifyPassword($password, $hash) {
 406 │         return password_verify($password, $hash);
 407 │     }
 408 │     
 409 │     /**
 410 │      * Gera token seguro
 411 │      */
 412 │     public static function generateSecureToken($length = 32) {
 413 │         return bin2hex(random_bytes($length));
 414 │     }
 415 │     
 416 │     /**
 417 │      * Valida extensÃ£o de arquivo
 418 │      */
 419 │     public static function isValidFileExtension($filename) {
 420 │         $extension = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
 421 │         return in_array($extension, ALLOWED_EXTENSIONS);
 422 │     }
 423 │     
 424 │     /**
 425 │      * Valida MIME type
 426 │      */
 427 │     public static function isValidMimeType($mimeType) {
 428 │         return in_array($mimeType, ALLOWED_MIME_TYPES);
 429 │     }
 430 │     
 431 │     /**
 432 │      * Formata bytes para exibiÃ§Ã£o
 433 │      */
 434 │     public static function formatBytes($size, $precision = 2) {
 435 │         $units = ['B', 'KB', 'MB', 'GB', 'TB'];
 436 │         
 437 │         for ($i = 0; $size > 1024 && $i < count($units) - 1; $i++) {
 438 │             $size /= 1024;
 439 │         }
 440 │         
 441 │         return round($size, $precision) . ' ' . $units[$i];
 442 │     }
 443 │     
 444 │     /**
 445 │      * Gera slug a partir de string
 446 │      */
 447 │     public static function generateSlug($string) {
 448 │         $string = strtolower($string);
 449 │         $string = preg_replace('/[^a-z0-9-]/', '-', $string);
 450 │         $string = preg_replace('/-+/', '-', $string);
 451 │         $string = trim($string, '-');
 452 │         return $string;
 453 │     }
 454 │     
 455 │     /**
 456 │      * Valida CSRF token
 457 │      */
 458 │     public static function validateCSRFToken($token) {
 459 │         return isset($_SESSION['csrf_token']) && hash_equals($_SESSION['csrf_token'], $token);
 460 │     }
 461 │     
 462 │     /**
 463 │      * Gera CSRF token
 464 │      */
 465 │     public static function generateCSRFToken() {
 466 │         if (!isset($_SESSION['csrf_token'])) {
 467 │             $_SESSION['csrf_token'] = self::generateSecureToken();
 468 │         }
 469 │         return $_SESSION['csrf_token'];
 470 │     }
 471 │ }
 472 │ 
 473 │ // Configurar headers de seguranÃ§a
 474 │ if (!DEBUG_MODE) {
 475 │     header('X-Content-Type-Options: nosniff');
 476 │     header('X-Frame-Options: DENY');
 477 │     header('X-XSS-Protection: 1; mode=block');
 478 │     header('Referrer-Policy: strict-origin-when-cross-origin');
 479 │     
 480 │     if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on') {
 481 │         header('Strict-Transport-Security: max-age=31536000; includeSubDomains');
 482 │     }
 483 │ }
 484 │ 
 485 │ // Configurar sessÃ£o segura
 486 │ ini_set('session.cookie_httponly', 1);
 487 │ ini_set('session.cookie_secure', isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 1 : 0);
 488 │ ini_set('session.use_strict_mode', 1);
 489 │ ini_set('session.cookie_samesite', 'Strict');
 490 │ session_name(SESSION_NAME);
 491 │ 
 492 │ // Verificar se diretÃ³rios necessÃ¡rios existem
 493 │ $requiredDirs = [
 494 │     __DIR__ . '/../../../logs/',
 495 │     __DIR__ . '/../uploads/'
 496 │ ];
 497 │ 
 498 │ foreach ($requiredDirs as $dir) {
 499 │     if (!is_dir($dir)) {
 500 │         mkdir($dir, 0755, true);
 501 │     }
 502 │ }
 503 │ 
 504 │ // Criar arquivo .htaccess para logs se nÃ£o existir
 505 │ $logHtaccess = __DIR__ . '/../../../logs/.htaccess';
 506 │ if (!file_exists($logHtaccess)) {
 507 │     file_put_contents($logHtaccess, "Deny from all\n");
 508 │ }
 509 │ 
 510 │ // Criar arquivo .htaccess para uploads se nÃ£o existir
 511 │ $uploadHtaccess = __DIR__ . '/../uploads/.htaccess';
 512 │ if (!file_exists($uploadHtaccess)) {
 513 │     $htaccessContent = "Options -Indexes\nOptions -ExecCGI\n\n<Files *.php>\n    Deny from all\n</Files>\n\n<FilesMatch \"\.(jpg|jpeg|png|gif|webp|svg)$\">\n    Allow from all\n</FilesMatch>\n";
 514 │     file_put_contents($uploadHtaccess, $htaccessContent);
 515 │ }
 516 │ 
 517 │ // Log de inicializaÃ§Ã£o
 518 │ if (DEBUG_MODE) {
 519 │     error_log("[" . date('Y-m-d H:i:s') . "] CMS Database initialized successfully");
 520 │ }
 521 │ ?>

═══════════════════════════════════════════════════════════════
ARQUIVO: public\assets\images\carlos_gracie.png
Tamanho: 208.67KB
Modificado: 06/20/2025 00:22:19
═══════════════════════════════════════════════════════════════
[ARQUIVO BINÁRIO OU MUITO GRANDE - CONTEÚDO NÃO EXIBIDO]

═══════════════════════════════════════════════════════════════
ARQUIVO: public\assets\images\contact_gb.png
Tamanho: 7.85KB
Modificado: 06/19/2025 23:21:41
═══════════════════════════════════════════════════════════════
[ARQUIVO BINÁRIO OU MUITO GRANDE - CONTEÚDO NÃO EXIBIDO]

═══════════════════════════════════════════════════════════════
ARQUIVO: public\assets\images\gb1.jpg
Tamanho: 735.02KB
Modificado: 06/20/2025 14:36:57
═══════════════════════════════════════════════════════════════
[ARQUIVO BINÁRIO OU MUITO GRANDE - CONTEÚDO NÃO EXIBIDO]

═══════════════════════════════════════════════════════════════
ARQUIVO: public\assets\images\gb10.jpg
Tamanho: 770.44KB
Modificado: 06/20/2025 14:36:56
═══════════════════════════════════════════════════════════════
[ARQUIVO BINÁRIO OU MUITO GRANDE - CONTEÚDO NÃO EXIBIDO]

═══════════════════════════════════════════════════════════════
ARQUIVO: public\assets\images\gb3.png
Tamanho: 409.27KB
Modificado: 06/20/2025 00:24:59
═══════════════════════════════════════════════════════════════
[ARQUIVO BINÁRIO OU MUITO GRANDE - CONTEÚDO NÃO EXIBIDO]

═══════════════════════════════════════════════════════════════
ARQUIVO: public\assets\images\gb4.png
Tamanho: 903.75KB
Modificado: 06/19/2025 14:30:40
═══════════════════════════════════════════════════════════════
[ARQUIVO BINÁRIO OU MUITO GRANDE - CONTEÚDO NÃO EXIBIDO]

═══════════════════════════════════════════════════════════════
ARQUIVO: public\assets\images\gb6.jpg
Tamanho: 622.34KB
Modificado: 06/25/2025 22:46:18
═══════════════════════════════════════════════════════════════
[ARQUIVO BINÁRIO OU MUITO GRANDE - CONTEÚDO NÃO EXIBIDO]

═══════════════════════════════════════════════════════════════
ARQUIVO: public\assets\images\gb8.jpg
Tamanho: 182.52KB
Modificado: 06/20/2025 14:41:07
═══════════════════════════════════════════════════════════════
[ARQUIVO BINÁRIO OU MUITO GRANDE - CONTEÚDO NÃO EXIBIDO]

═══════════════════════════════════════════════════════════════
ARQUIVO: public\assets\images\gb9.jpg
Tamanho: 861.7KB
Modificado: 06/20/2025 14:36:57
═══════════════════════════════════════════════════════════════
[ARQUIVO BINÁRIO OU MUITO GRANDE - CONTEÚDO NÃO EXIBIDO]

═══════════════════════════════════════════════════════════════
ARQUIVO: public\assets\images\gb_logo.png
Tamanho: 222.49KB
Modificado: 06/26/2025 00:10:42
═══════════════════════════════════════════════════════════════
[ARQUIVO BINÁRIO OU MUITO GRANDE - CONTEÚDO NÃO EXIBIDO]

═══════════════════════════════════════════════════════════════
ARQUIVO: public\assets\images\professor_ricardo.png
Tamanho: 187.6KB
Modificado: 07/07/2025 09:45:40
═══════════════════════════════════════════════════════════════
[ARQUIVO BINÁRIO OU MUITO GRANDE - CONTEÚDO NÃO EXIBIDO]

═══════════════════════════════════════════════════════════════
ARQUIVO: public\assets\images\professor_victor.jpg
Tamanho: 95.36KB
Modificado: 07/07/2025 08:35:50
═══════════════════════════════════════════════════════════════
[ARQUIVO BINÁRIO OU MUITO GRANDE - CONTEÚDO NÃO EXIBIDO]

═══════════════════════════════════════════════════════════════
ARQUIVO: public\assets\images\victor.jpg
Tamanho: 892.64KB
Modificado: 07/09/2025 20:36:00
═══════════════════════════════════════════════════════════════
[ARQUIVO BINÁRIO OU MUITO GRANDE - CONTEÚDO NÃO EXIBIDO]

═══════════════════════════════════════════════════════════════
ARQUIVO: src\index.html
Tamanho: 62.02KB
Modificado: 06/26/2025 00:07:18
═══════════════════════════════════════════════════════════════
   1 │ <!DOCTYPE html>
   2 │ <html lang="pt-BR">
   3 │ <head>
   4 │     <meta charset="UTF-8">
   5 │     <meta name="viewport" content="width=device-width, initial-scale=1.0">
   6 │     <title>Gracie Barra Cidade Nova - Jiu-Jitsu para Todos</title>
   7 │     <style>
   8 │         :root {
   9 │             --primary-red: #dc143c;
  10 │             --primary-blue: #2c5aa0;
  11 │             --dark-red: #b91c3c;
  12 │             
  13 │             /* Light Mode Colors */
  14 │             --text-primary: #1a1a1a;
  15 │             --text-secondary: #4a4a4a;
  16 │             --text-light: #666;
  17 │             --background-primary: #ffffff;
  18 │             --background-secondary: #f8f9fa;
  19 │             --background-tertiary: #e9ecef;
  20 │             --card-background: #ffffff;
  21 │             --border-color: rgba(0,0,0,0.1);
  22 │             --shadow-light: 0 4px 15px rgba(0,0,0,0.08);
  23 │             --shadow-medium: 0 8px 25px rgba(0,0,0,0.15);
  24 │             --shadow-strong: 0 12px 30px rgba(0,0,0,0.2);
  25 │             
  26 │             --border-radius: 12px;
  27 │             --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  28 │         }
  29 │ 
  30 │         /* Dark Mode Colors */
  31 │         [data-theme="dark"] {
  32 │             --text-primary: #e0e0e0;
  33 │             --text-secondary: #b0b0b0;
  34 │             --text-light: #888;
  35 │             --background-primary: #1a1a1a;
  36 │             --background-secondary: #2d2d2d;
  37 │             --background-tertiary: #404040;
  38 │             --card-background: #2d2d2d;
  39 │             --border-color: rgba(255,255,255,0.1);
  40 │             --shadow-light: 0 4px 15px rgba(0,0,0,0.3);
  41 │             --shadow-medium: 0 8px 25px rgba(0,0,0,0.4);
  42 │             --shadow-strong: 0 12px 30px rgba(0,0,0,0.5);
  43 │         }
  44 │ 
  45 │         * {
  46 │             margin: 0;
  47 │             padding: 0;
  48 │             box-sizing: border-box;
  49 │         }
  50 │ 
  51 │         body {
  52 │             font-family: 'Inter', 'Segoe UI', -apple-system, BlinkMacSystemFont, sans-serif;
  53 │             line-height: 1.6;
  54 │             color: var(--text-primary);
  55 │             background-color: var(--background-primary);
  56 │             overflow-x: hidden;
  57 │             transition: var(--transition);
  58 │         }
  59 │ 
  60 │         /* Textos justificados */
  61 │         p {
  62 │             text-align: justify;
  63 │             color: var(--text-secondary);
  64 │             margin-bottom: 1rem;
  65 │             line-height: 1.7;
  66 │         }
  67 │ 
  68 │         /* Header - NÃƒO FIXO */
  69 │         .header {
  70 │             background: var(--background-primary);
  71 │             color: var(--text-primary);
  72 │             padding: 1rem 0;
  73 │             position: relative;
  74 │             width: 100%;
  75 │             z-index: 1000;
  76 │             box-shadow: var(--shadow-light);
  77 │             transition: var(--transition);
  78 │             border-bottom: 1px solid var(--border-color);
  79 │         }
  80 │ 
  81 │         .nav-container {
  82 │             max-width: 1400px;
  83 │             margin: 0 auto;
  84 │             display: flex;
  85 │             justify-content: space-between;
  86 │             align-items: center;
  87 │             padding: 0 clamp(1rem, 5vw, 3rem);
  88 │             flex-wrap: wrap;
  89 │             gap: 1rem;
  90 │         }
  91 │ 
  92 │         .logo {
  93 │             display: flex;
  94 │             align-items: center;
  95 │             font-size: clamp(1.2rem, 2.5vw, 1.8rem);
  96 │             font-weight: 700;
  97 │             transition: var(--transition);
  98 │         }
  99 │ 
 100 │         .logo-img {
 101 │             width: clamp(60px, 8vw, 80px);
 102 │             height: clamp(60px, 8vw, 80px);
 103 │             margin-right: clamp(0.8rem, 2vw, 1.5rem);
 104 │             background: url('assets/images/gb_logo.jpg') center/cover,
 105 │                         linear-gradient(135deg, var(--primary-red), var(--primary-blue));
 106 │             border-radius: 8px;
 107 │             border: 3px solid var(--background-primary);
 108 │             box-shadow: var(--shadow-light);
 109 │             transition: var(--transition);
 110 │             background-size: cover;
 111 │             background-position: center;
 112 │             background-repeat: no-repeat;
 113 │         }
 114 │ 
 115 │         .logo:hover .logo-img {
 116 │             transform: scale(1.05);
 117 │             box-shadow: var(--shadow-medium);
 118 │         }
 119 │ 
 120 │         .logo-text {
 121 │             display: flex;
 122 │             flex-direction: column;
 123 │         }
 124 │ 
 125 │         .logo-main {
 126 │             color: var(--primary-red);
 127 │             font-weight: 800;
 128 │             letter-spacing: -0.5px;
 129 │         }
 130 │ 
 131 │         .logo-sub {
 132 │             font-size: clamp(0.7rem, 1.8vw, 1rem);
 133 │             font-weight: 400;
 134 │             color: var(--text-light);
 135 │             margin-top: -2px;
 136 │         }
 137 │ 
 138 │         /* Container para navegaÃ§Ã£o e tema */
 139 │         .nav-wrapper {
 140 │             display: flex;
 141 │             align-items: center;
 142 │             gap: clamp(1rem, 2vw, 2rem);
 143 │         }
 144 │ 
 145 │         .nav-menu {
 146 │             display: flex;
 147 │             list-style: none;
 148 │             gap: clamp(1rem, 2vw, 2rem);
 149 │             align-items: center;
 150 │         }
 151 │ 
 152 │         .nav-menu a {
 153 │             color: var(--text-primary);
 154 │             text-decoration: none;
 155 │             transition: var(--transition);
 156 │             font-weight: 500;
 157 │             font-size: clamp(0.9rem, 1.5vw, 1rem);
 158 │             position: relative;
 159 │             padding: 0.5rem 0;
 160 │             white-space: nowrap;
 161 │         }
 162 │ 
 163 │         .nav-menu a::after {
 164 │             content: '';
 165 │             position: absolute;
 166 │             bottom: 0;
 167 │             left: 0;
 168 │             width: 0;
 169 │             height: 2px;
 170 │             background: linear-gradient(45deg, var(--primary-red), var(--primary-blue));
 171 │             transition: width 0.3s ease;
 172 │         }
 173 │ 
 174 │         .nav-menu a:hover::after,
 175 │         .nav-menu a.active::after {
 176 │             width: 100%;
 177 │         }
 178 │ 
 179 │         .nav-menu a:hover,
 180 │         .nav-menu a.active {
 181 │             color: var(--primary-red);
 182 │         }
 183 │ 
 184 │         /* Theme Toggle Button */
 185 │         .theme-toggle {
 186 │             background: var(--card-background);
 187 │             border: 2px solid var(--border-color);
 188 │             border-radius: 25px;
 189 │             padding: clamp(0.4rem, 1vw, 0.6rem) clamp(0.8rem, 2vw, 1.2rem);
 190 │             cursor: pointer;
 191 │             transition: var(--transition);
 192 │             font-size: clamp(0.85rem, 1.5vw, 1rem);
 193 │             color: var(--text-primary);
 194 │             display: flex;
 195 │             align-items: center;
 196 │             gap: 0.5rem;
 197 │             white-space: nowrap;
 198 │             min-width: fit-content;
 199 │         }
 200 │ 
 201 │         .theme-toggle:hover {
 202 │             background: var(--background-secondary);
 203 │             border-color: var(--primary-red);
 204 │         }
 205 │ 
 206 │         /* Mobile Menu */
 207 │         .mobile-menu {
 208 │             display: none;
 209 │             background: none;
 210 │             border: none;
 211 │             font-size: 2.2rem;
 212 │             cursor: pointer;
 213 │             color: var(--primary-red);
 214 │             transition: var(--transition);
 215 │             z-index: 1201;
 216 │             position: fixed;
 217 │             top: 1.2rem;
 218 │             right: 1.2rem;
 219 │         }
 220 │ 
 221 │         .mobile-menu:hover {
 222 │             color: var(--primary-red);
 223 │             transform: scale(1.1);
 224 │         }
 225 │ 
 226 │         .mobile-nav {
 227 │             display: none;
 228 │             position: fixed;
 229 │             top: 0;
 230 │             left: 0;
 231 │             width: 100vw;
 232 │             height: 100vh;
 233 │             background: var(--background-primary);
 234 │             box-shadow: 0 10px 40px rgba(0,0,0,0.3);
 235 │             z-index: 1200;
 236 │             padding: 5rem 2rem 2rem 2rem;
 237 │             transition: var(--transition);
 238 │             flex-direction: column;
 239 │             justify-content: flex-start;
 240 │             align-items: center;
 241 │             overflow-y: auto;
 242 │         }
 243 │ 
 244 │         .mobile-nav.active {
 245 │             display: flex;
 246 │         }
 247 │ 
 248 │         .mobile-nav ul {
 249 │             list-style: none;
 250 │             display: flex;
 251 │             flex-direction: column;
 252 │             gap: 2rem;
 253 │             width: 100%;
 254 │             align-items: center;
 255 │             margin-bottom: 2rem;
 256 │             padding: 0;
 257 │         }
 258 │ 
 259 │         .mobile-nav a {
 260 │             color: var(--primary-red);
 261 │             text-decoration: none;
 262 │             font-size: 1.3rem;
 263 │             font-weight: 600;
 264 │             padding: 0.7rem 0;
 265 │             border-radius: 8px;
 266 │             transition: var(--transition);
 267 │             display: block;
 268 │             width: 100%;
 269 │             text-align: center;
 270 │         }
 271 │ 
 272 │         .mobile-nav a:hover, .mobile-nav a.active {
 273 │             background: var(--background-secondary);
 274 │             color: var(--primary-blue);
 275 │         }
 276 │ 
 277 │         .mobile-nav .theme-toggle {
 278 │             display: flex !important;
 279 │             width: 100%;
 280 │             justify-content: center;
 281 │             margin-top: 1rem;
 282 │             padding: 1rem;
 283 │             background: var(--background-secondary);
 284 │             border: 2px solid var(--border-color);
 285 │             border-radius: 12px;
 286 │             color: var(--text-primary);
 287 │             font-size: 1.1rem;
 288 │             cursor: pointer;
 289 │         }
 290 │ 
 291 │         /* Hero Section com imagem de fundo */
 292 │         .hero {
 293 │             background: 
 294 │                 linear-gradient(135deg, rgba(220, 20, 60, 0.8), rgba(44, 90, 160, 0.6)), 
 295 │                 url('assets/images/gb6.jpg'),
 296 │                 linear-gradient(45deg, #1a1a1a, #333);
 297 │             background-size: cover;
 298 │             background-position: center;
 299 │             background-repeat: no-repeat;
 300 │             min-height: 100vh;
 301 │             display: flex;
 302 │             align-items: center;
 303 │             justify-content: center;
 304 │             text-align: center;
 305 │             color: white;
 306 │             position: relative;
 307 │             overflow: hidden;
 308 │         }
 309 │ 
 310 │         .hero::before {
 311 │             content: '';
 312 │             position: absolute;
 313 │             top: 0;
 314 │             left: 0;
 315 │             right: 0;
 316 │             bottom: 0;
 317 │             background: linear-gradient(45deg, rgba(220, 20, 60, 0.1), rgba(44, 90, 160, 0.1));
 318 │             z-index: 1;
 319 │         }
 320 │ 
 321 │         .hero-content {
 322 │             position: relative;
 323 │             z-index: 2;
 324 │             text-shadow: 2px 2px 8px rgba(0,0,0,0.5);
 325 │             max-width: 900px;
 326 │             padding: 0 1rem;
 327 │         }
 328 │ 
 329 │         .hero-content h1 {
 330 │             font-size: clamp(2.5rem, 8vw, 5rem);
 331 │             margin-bottom: 1rem;
 332 │             font-weight: 800;
 333 │             letter-spacing: -1px;
 334 │             color: #ffffff;
 335 │         }
 336 │ 
 337 │         .hero-content .subtitle {
 338 │             font-size: clamp(1.2rem, 4vw, 2rem);
 339 │             margin-bottom: 2rem;
 340 │             font-weight: 300;
 341 │             opacity: 0.95;
 342 │             color: #ffffff;
 343 │         }
 344 │ 
 345 │         .cta-button {
 346 │             background: linear-gradient(135deg, var(--primary-red), var(--dark-red));
 347 │             color: white;
 348 │             padding: clamp(12px, 3vw, 18px) clamp(24px, 6vw, 40px);
 349 │             border: none;
 350 │             border-radius: var(--border-radius);
 351 │             font-size: clamp(1rem, 2.5vw, 1.2rem);
 352 │             font-weight: 600;
 353 │             cursor: pointer;
 354 │             transition: var(--transition);
 355 │             text-decoration: none;
 356 │             display: inline-block;
 357 │             text-transform: uppercase;
 358 │             letter-spacing: 1px;
 359 │             box-shadow: 0 8px 30px rgba(220, 20, 60, 0.4);
 360 │             position: relative;
 361 │             overflow: hidden;
 362 │         }
 363 │ 
 364 │         .cta-button::before {
 365 │             content: '';
 366 │             position: absolute;
 367 │             top: 0;
 368 │             left: -100%;
 369 │             width: 100%;
 370 │             height: 100%;
 371 │             background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
 372 │             transition: left 0.5s ease;
 373 │         }
 374 │ 
 375 │         .cta-button:hover::before {
 376 │             left: 100%;
 377 │         }
 378 │ 
 379 │         .cta-button:hover {
 380 │             transform: translateY(-3px);
 381 │             box-shadow: 0 15px 40px rgba(220, 20, 60, 0.5);
 382 │         }
 383 │ 
 384 │         /* Content Sections */
 385 │         .section {
 386 │             padding: clamp(3rem, 8vw, 6rem) clamp(1rem, 5vw, 3rem);
 387 │             max-width: 1400px;
 388 │             margin: 0 auto;
 389 │         }
 390 │ 
 391 │         .section-title {
 392 │             text-align: center;
 393 │             font-size: clamp(2rem, 6vw, 3.5rem);
 394 │             color: var(--text-primary);
 395 │             margin-bottom: 1rem;
 396 │             font-weight: 700;
 397 │             letter-spacing: -1px;
 398 │         }
 399 │ 
 400 │         .section-subtitle {
 401 │             text-align: center;
 402 │             font-size: clamp(1rem, 2.5vw, 1.3rem);
 403 │             color: var(--text-secondary);
 404 │             margin-bottom: 3rem;
 405 │             max-width: 700px;
 406 │             margin-left: auto;
 407 │             margin-right: auto;
 408 │         }
 409 │ 
 410 │         .two-column {
 411 │             display: grid;
 412 │             grid-template-columns: repeat(auto-fit, minmax(min(100%, 400px), 1fr));
 413 │             gap: clamp(2rem, 6vw, 4rem);
 414 │             align-items: center;
 415 │             margin-top: 3rem;
 416 │         }
 417 │ 
 418 │         .content-block h3 {
 419 │             color: var(--primary-red);
 420 │             font-size: clamp(1.3rem, 3vw, 1.8rem);
 421 │             margin-bottom: 1rem;
 422 │             font-weight: 600;
 423 │         }
 424 │ 
 425 │         .content-block p {
 426 │             margin-bottom: 1rem;
 427 │             line-height: 1.8;
 428 │             font-size: clamp(0.95rem, 2vw, 1.1rem);
 429 │             color: var(--text-secondary);
 430 │             text-align: justify;
 431 │         }
 432 │ 
 433 │         .image-placeholder {
 434 │             width: 100%;
 435 │             height: clamp(250px, 40vw, 350px);
 436 │             background-size: cover;
 437 │             background-position: center;
 438 │             background-repeat: no-repeat;
 439 │             border-radius: var(--border-radius);
 440 │             box-shadow: var(--shadow-medium);
 441 │             transition: var(--transition);
 442 │         }
 443 │ 
 444 │         .image-placeholder:hover {
 445 │             transform: scale(1.02);
 446 │             box-shadow: var(--shadow-strong);
 447 │         }
 448 │ 
 449 │         /* Imagens especÃ­ficas com URLs locais */
 450 │         .academia-img {
 451 │             background: url('assets/images/gb2.png') center/cover;
 452 │         }
 453 │ 
 454 │         .metodo-img {
 455 │             background: url('assets/images/gb3.png') center/cover;
 456 │         }
 457 │ 
 458 │         .comunidade-img {
 459 │             background: url('assets/images/gb4.png') center/cover;
 460 │         }
 461 │ 
 462 │         /* Programs Grid */
 463 │         .programs-grid {
 464 │             display: grid;
 465 │             grid-template-columns: repeat(auto-fit, minmax(min(100%, 300px), 1fr));
 466 │             gap: clamp(1.5rem, 4vw, 2.5rem);
 467 │             margin-top: 3rem;
 468 │         }
 469 │ 
 470 │         .program-card {
 471 │             background: var(--card-background);
 472 │             border: 1px solid var(--border-color);
 473 │             border-radius: var(--border-radius);
 474 │             padding: clamp(1.5rem, 4vw, 2.5rem);
 475 │             text-align: center;
 476 │             transition: var(--transition);
 477 │             position: relative;
 478 │             overflow: hidden;
 479 │         }
 480 │ 
 481 │         .program-card::before {
 482 │             content: '';
 483 │             position: absolute;
 484 │             top: 0;
 485 │             left: 0;
 486 │             right: 0;
 487 │             height: 4px;
 488 │             background: linear-gradient(45deg, var(--primary-red), var(--primary-blue));
 489 │         }
 490 │ 
 491 │         .program-card:hover {
 492 │             box-shadow: var(--shadow-strong);
 493 │             transform: translateY(-8px);
 494 │         }
 495 │ 
 496 │         .program-card h3 {
 497 │             color: var(--primary-red);
 498 │             font-size: clamp(1.1rem, 2.5vw, 1.4rem);
 499 │             margin-bottom: 1rem;
 500 │             font-weight: 600;
 501 │         }
 502 │ 
 503 │         .program-card p {
 504 │             color: var(--text-secondary);
 505 │             text-align: justify;
 506 │         }
 507 │ 
 508 │         .program-icon {
 509 │             width: clamp(50px, 10vw, 70px);
 510 │             height: clamp(50px, 10vw, 70px);
 511 │             background: linear-gradient(135deg, var(--primary-red), var(--dark-red));
 512 │             border-radius: 50%;
 513 │             margin: 0 auto 1rem;
 514 │             display: flex;
 515 │             align-items: center;
 516 │             justify-content: center;
 517 │             color: white;
 518 │             font-size: clamp(1.2rem, 3vw, 1.8rem);
 519 │             font-weight: bold;
 520 │             box-shadow: var(--shadow-light);
 521 │         }
 522 │ 
 523 │         /* Benefits Section */
 524 │         .benefits-section {
 525 │             background: var(--background-secondary);
 526 │         }
 527 │ 
 528 │         .benefits-grid {
 529 │             display: grid;
 530 │             grid-template-columns: repeat(auto-fit, minmax(min(100%, 280px), 1fr));
 531 │             gap: clamp(1.5rem, 4vw, 2.5rem);
 532 │             margin-top: 3rem;
 533 │         }
 534 │ 
 535 │         .benefit-item {
 536 │             text-align: center;
 537 │             padding: clamp(1.5rem, 4vw, 2.5rem);
 538 │             background: var(--card-background);
 539 │             border-radius: var(--border-radius);
 540 │             box-shadow: var(--shadow-light);
 541 │             transition: var(--transition);
 542 │         }
 543 │ 
 544 │         .benefit-item:hover {
 545 │             transform: translateY(-8px);
 546 │             box-shadow: var(--shadow-medium);
 547 │         }
 548 │ 
 549 │         .benefit-icon {
 550 │             width: clamp(60px, 12vw, 90px);
 551 │             height: clamp(60px, 12vw, 90px);
 552 │             background: linear-gradient(135deg, var(--primary-red), var(--primary-blue));
 553 │             border-radius: 50%;
 554 │             margin: 0 auto 1rem;
 555 │             display: flex;
 556 │             align-items: center;
 557 │             justify-content: center;
 558 │             color: white;
 559 │             font-size: clamp(1.5rem, 4vw, 2.5rem);
 560 │         }
 561 │ 
 562 │         .benefit-item h3 {
 563 │             color: var(--text-primary);
 564 │             margin-bottom: 0.5rem;
 565 │             font-weight: 600;
 566 │             font-size: clamp(1rem, 2.5vw, 1.3rem);
 567 │         }
 568 │ 
 569 │         .benefit-item p {
 570 │             color: var(--text-secondary);
 571 │             text-align: justify;
 572 │         }
 573 │ 
 574 │         /* Quote Section */
 575 │         .quote-section {
 576 │             background: 
 577 │                 linear-gradient(135deg, rgba(44, 90, 160, 0.9), rgba(44, 90, 160, 0.7)),
 578 │                 url('assets/images/carlos_gracie.png');
 579 │             background-size: cover;
 580 │             background-position: center;
 581 │             background-repeat: no-repeat;
 582 │             color: white;
 583 │             text-align: center;
 584 │             padding: clamp(3rem, 8vw, 6rem) clamp(1rem, 5vw, 3rem);
 585 │             position: relative;
 586 │         }
 587 │ 
 588 │         .quote {
 589 │             font-size: clamp(1.2rem, 3vw, 1.8rem);
 590 │             font-style: italic;
 591 │             margin-bottom: 1rem;
 592 │             max-width: 900px;
 593 │             margin-left: auto;
 594 │             margin-right: auto;
 595 │             font-weight: 300;
 596 │             text-shadow: 1px 1px 3px rgba(0,0,0,0.5);
 597 │             line-height: 1.6;
 598 │             color: #ffffff;
 599 │             text-align: center;
 600 │         }
 601 │ 
 602 │         .quote-author {
 603 │             font-size: clamp(1rem, 2.5vw, 1.3rem);
 604 │             font-weight: 500;
 605 │             color: #ffffff;
 606 │         }
 607 │ 
 608 │         /* Values Section */
 609 │         .values-grid {
 610 │             display: grid;
 611 │             grid-template-columns: repeat(auto-fit, minmax(min(100%, 350px), 1fr));
 612 │             gap: clamp(1.5rem, 4vw, 2.5rem);
 613 │             margin-top: 3rem;
 614 │         }
 615 │ 
 616 │         .value-card {
 617 │             background: var(--card-background);
 618 │             border-left: 4px solid var(--primary-red);
 619 │             padding: clamp(1.5rem, 4vw, 2.5rem);
 620 │             box-shadow: var(--shadow-light);
 621 │             border-radius: 0 var(--border-radius) var(--border-radius) 0;
 622 │             transition: var(--transition);
 623 │             border: 1px solid var(--border-color);
 624 │             border-left: 4px solid var(--primary-red);
 625 │         }
 626 │ 
 627 │         .value-card p {
 628 │             color: var(--text-secondary);
 629 │             line-height: 1.7;
 630 │             text-align: justify;
 631 │         }
 632 │ 
 633 │         .value-card:hover {
 634 │             border-left-width: 8px;
 635 │             transform: translateX(10px);
 636 │             box-shadow: var(--shadow-medium);
 637 │         }
 638 │ 
 639 │         .value-card h3 {
 640 │             color: var(--primary-blue);
 641 │             font-size: clamp(1.2rem, 3vw, 1.6rem);
 642 │             margin-bottom: 1rem;
 643 │             font-weight: 600;
 644 │         }
 645 │ 
 646 │         /* Instructors Section */
 647 │         .instructors-grid {
 648 │             display: grid;
 649 │             grid-template-columns: repeat(auto-fit, minmax(min(100%, 320px), 1fr));
 650 │             gap: clamp(1.5rem, 4vw, 2.5rem);
 651 │             margin-top: 3rem;
 652 │         }
 653 │ 
 654 │         .instructor-card {
 655 │             background: var(--card-background);
 656 │             border-radius: var(--border-radius);
 657 │             overflow: hidden;
 658 │             box-shadow: var(--shadow-light);
 659 │             transition: var(--transition);
 660 │             border: 1px solid var(--border-color);
 661 │         }
 662 │ 
 663 │         .instructor-info p {
 664 │             color: var(--text-secondary);
 665 │             line-height: 1.6;
 666 │             text-align: justify;
 667 │         }
 668 │ 
 669 │         .instructor-card:hover {
 670 │             transform: translateY(-10px);
 671 │             box-shadow: var(--shadow-strong);
 672 │         }
 673 │ 
 674 │         .instructor-img {
 675 │             width: 100%;
 676 │             height: clamp(200px, 30vw, 280px);
 677 │             background-size: cover;
 678 │             background-position: center;
 679 │             background-repeat: no-repeat;
 680 │             position: relative;
 681 │         }
 682 │ 
 683 │         /* Imagens especÃ­ficas dos instrutores */
 684 │         .instructor-1 {
 685 │             background: url('assets/images/instructor1.png') center/cover;
 686 │         }
 687 │ 
 688 │         .instructor-2 {
 689 │             background: url('assets/images/instructor2.png') center/cover;
 690 │         }
 691 │ 
 692 │         .instructor-3 {
 693 │             background: url('assets/images/instructor3.png') center/cover;
 694 │         }
 695 │ 
 696 │         .instructor-img::before {
 697 │             content: '';
 698 │             position: absolute;
 699 │             top: 0;
 700 │             left: 0;
 701 │             right: 0;
 702 │             bottom: 0;
 703 │             background: linear-gradient(to bottom, transparent 60%, rgba(0,0,0,0.7));
 704 │         }
 705 │ 
 706 │         .instructor-info {
 707 │             padding: clamp(1rem, 3vw, 2rem);
 708 │         }
 709 │ 
 710 │         .instructor-info h3 {
 711 │             color: var(--primary-red);
 712 │             margin-bottom: 0.5rem;
 713 │             font-weight: 600;
 714 │             font-size: clamp(1.1rem, 2.5vw, 1.3rem);
 715 │         }
 716 │ 
 717 │         .instructor-info .rank {
 718 │             color: var(--primary-blue);
 719 │             font-weight: 500;
 720 │             margin-bottom: 0.5rem;
 721 │         }
 722 │ 
 723 │         /* News Section */
 724 │         .news-grid {
 725 │             display: grid;
 726 │             grid-template-columns: repeat(auto-fit, minmax(min(100%, 350px), 1fr));
 727 │             gap: clamp(1.5rem, 4vw, 2.5rem);
 728 │             margin-top: 3rem;
 729 │         }
 730 │ 
 731 │         .news-card {
 732 │             background: var(--card-background);
 733 │             border-radius: var(--border-radius);
 734 │             overflow: hidden;
 735 │             box-shadow: var(--shadow-light);
 736 │             transition: var(--transition);
 737 │             border: 1px solid var(--border-color);
 738 │         }
 739 │ 
 740 │         .news-card:hover {
 741 │             transform: translateY(-8px);
 742 │             box-shadow: var(--shadow-medium);
 743 │         }
 744 │ 
 745 │         .news-img {
 746 │             width: 100%;
 747 │             height: clamp(150px, 25vw, 220px);
 748 │             background-size: cover;
 749 │             background-position: center;
 750 │             background-repeat: no-repeat;
 751 │         }
 752 │ 
 753 │         /* Imagens especÃ­ficas das notÃ­cias */
 754 │         .news-1 {
 755 │             background: url('assets/images/news1.jpg') center/cover;
 756 │         }
 757 │ 
 758 │         .news-2 {
 759 │             background: url('assets/images/news2.jpg') center/cover;
 760 │         }
 761 │ 
 762 │         .news-3 {
 763 │             background: url('assets/images/news3.jpg') center/cover;
 764 │         }
 765 │ 
 766 │         .news-content {
 767 │             padding: clamp(1rem, 3vw, 2rem);
 768 │         }
 769 │ 
 770 │         .news-date {
 771 │             color: var(--text-light);
 772 │             font-size: clamp(0.8rem, 2vw, 0.95rem);
 773 │             margin-bottom: 0.5rem;
 774 │         }
 775 │ 
 776 │         .news-title {
 777 │             color: var(--text-primary);
 778 │             font-size: clamp(1rem, 2.5vw, 1.2rem);
 779 │             font-weight: 600;
 780 │             margin-bottom: 1rem;
 781 │         }
 782 │ 
 783 │         .news-content p {
 784 │             color: var(--text-secondary);
 785 │             text-align: justify;
 786 │         }
 787 │ 
 788 │         /* Contact Section - OCUPAÃ‡ÃƒO TOTAL E RESPONSIVA */
 789 │         .contact-section {
 790 │             background: 
 791 │                 linear-gradient(135deg, rgba(51, 51, 51, 0.9), rgba(51, 51, 51, 0.7)),
 792 │                 url('assets/images/gb6.jpg');
 793 │             background-size: cover;
 794 │             background-position: center;
 795 │             background-repeat: no-repeat;
 796 │             color: white;
 797 │             position: relative;
 798 │             width: 100vw;
 799 │             margin-left: calc(-50vw + 50%);
 800 │             padding: clamp(3rem, 8vw, 6rem) 0;
 801 │         }
 802 │ 
 803 │         .contact-section .section-title {
 804 │             color: #ffffff;
 805 │         }
 806 │ 
 807 │         .contact-section .section-subtitle {
 808 │             color: #ffffff;
 809 │         }
 810 │ 
 811 │         .contact-content {
 812 │             max-width: 1400px;
 813 │             margin: 0 auto;
 814 │             padding: 0 clamp(1rem, 5vw, 3rem);
 815 │         }
 816 │ 
 817 │         .contact-grid {
 818 │             display: grid;
 819 │             grid-template-columns: repeat(auto-fit, minmax(min(100%, 350px), 1fr));
 820 │             gap: clamp(2rem, 6vw, 4rem);
 821 │             margin-top: 3rem;
 822 │         }
 823 │ 
 824 │         .contact-info h3 {
 825 │             margin-bottom: 1rem;
 826 │             color: var(--primary-red);
 827 │             font-size: clamp(1.2rem, 3vw, 1.5rem);
 828 │         }
 829 │ 
 830 │         .contact-info p {
 831 │             margin-bottom: 0.5rem;
 832 │             font-size: clamp(0.95rem, 2vw, 1.1rem);
 833 │             color: #ffffff;
 834 │             text-align: left;
 835 │         }
 836 │ 
 837 │         .social-links {
 838 │             display: flex;
 839 │             gap: 1rem;
 840 │             margin-top: 1rem;
 841 │         }
 842 │ 
 843 │         .social-links a {
 844 │             color: white;
 845 │             font-size: clamp(1.3rem, 3vw, 1.8rem);
 846 │             transition: var(--transition);
 847 │             padding: 0.5rem;
 848 │             border-radius: 8px;
 849 │             text-decoration: none;
 850 │         }
 851 │ 
 852 │         .social-links a:hover {
 853 │             color: var(--primary-red);
 854 │             background: rgba(220, 20, 60, 0.1);
 855 │             transform: scale(1.1);
 856 │         }
 857 │ 
 858 │         /* Footer */
 859 │         .footer {
 860 │             background: #1a1a1a;
 861 │             color: white;
 862 │             text-align: center;
 863 │             padding: clamp(2rem, 4vw, 3rem);
 864 │         }
 865 │ 
 866 │         .footer p {
 867 │             margin-bottom: 0.5rem;
 868 │             font-size: clamp(0.9rem, 2vw, 1rem);
 869 │             color: #ffffff;
 870 │             text-align: center;
 871 │         }
 872 │ 
 873 │         /* Scroll to top button */
 874 │         .scroll-to-top {
 875 │             position: fixed;
 876 │             bottom: clamp(20px, 4vw, 30px);
 877 │             right: clamp(20px, 4vw, 30px);
 878 │             background: linear-gradient(135deg, var(--primary-red), var(--dark-red));
 879 │             color: white;
 880 │             border: none;
 881 │             border-radius: 50%;
 882 │             width: clamp(45px, 8vw, 60px);
 883 │             height: clamp(45px, 8vw, 60px);
 884 │             cursor: pointer;
 885 │             display: none;
 886 │             transition: var(--transition);
 887 │             font-size: clamp(1rem, 2.5vw, 1.5rem);
 888 │             box-shadow: var(--shadow-medium);
 889 │             z-index: 999;
 890 │         }
 891 │ 
 892 │         .scroll-to-top:hover {
 893 │             background: linear-gradient(135deg, var(--dark-red), var(--primary-red));
 894 │             transform: scale(1.1);
 895 │             box-shadow: var(--shadow-strong);
 896 │         }
 897 │ 
 898 │         /* Responsive Design */
 899 │         @media (max-width: 1024px) {
 900 │             .nav-container {
 901 │                 flex-wrap: wrap;
 902 │             }
 903 │             
 904 │             .nav-wrapper {
 905 │                 width: 100%;
 906 │                 justify-content: space-between;
 907 │                 margin-top: 1rem;
 908 │             }
 909 │             
 910 │             .nav-menu {
 911 │                 gap: 1rem;
 912 │             }
 913 │         }
 914 │ 
 915 │         @media (max-width: 768px) {
 916 │             .nav-menu {
 917 │                 display: none;
 918 │             }
 919 │             
 920 │             .theme-toggle {
 921 │                 display: none;
 922 │             }
 923 │             
 924 │             .mobile-menu {
 925 │                 display: block;
 926 │             }
 927 │ 
 928 │             .nav-wrapper {
 929 │                 width: auto;
 930 │                 margin-top: 0;
 931 │             }
 932 │ 
 933 │             .hero {
 934 │                 min-height: 80vh;
 935 │             }
 936 │ 
 937 │             .two-column {
 938 │                 grid-template-columns: 1fr;
 939 │             }
 940 │ 
 941 │             .programs-grid,
 942 │             .benefits-grid,
 943 │             .instructors-grid,
 944 │             .news-grid,
 945 │             .contact-grid,
 946 │             .values-grid {
 947 │                 grid-template-columns: 1fr;
 948 │             }
 949 │ 
 950 │             .mobile-nav .theme-toggle {
 951 │                 display: flex;
 952 │                 width: 100%;
 953 │                 justify-content: center;
 954 │                 margin-top: 1rem;
 955 │                 padding: 1rem;
 956 │                 background: var(--background-secondary);
 957 │                 border: 2px solid var(--border-color);
 958 │                 border-radius: 12px;
 959 │                 color: var(--text-primary);
 960 │                 font-size: 1rem;
 961 │                 cursor: pointer;
 962 │             }
 963 │ 
 964 │             .contact-section {
 965 │                 padding: clamp(3rem, 8vw, 6rem) 0;
 966 │                 margin-left: calc(-50vw + 50%);
 967 │             }
 968 │         }
 969 │ 
 970 │         @media (max-width: 480px) {
 971 │             .section {
 972 │                 padding: 3rem 1rem;
 973 │             }
 974 │ 
 975 │             .nav-container {
 976 │                 padding: 0 1rem;
 977 │             }
 978 │ 
 979 │             .logo-img {
 980 │                 width: 50px;
 981 │                 height: 50px;
 982 │                 font-size: 1.2rem;
 983 │             }
 984 │ 
 985 │             .hero-content h1 {
 986 │                 font-size: 2rem;
 987 │             }
 988 │ 
 989 │             .hero-content .subtitle {
 990 │                 font-size: 1rem;
 991 │             }
 992 │ 
 993 │             .contact-content {
 994 │                 padding: 0 1rem;
 995 │             }
 996 │ 
 997 │             .contact-grid {
 998 │                 gap: clamp(1.5rem, 4vw, 2rem);
 999 │             }
1000 │         }
1001 │ 
1002 │         /* AnimaÃ§Ãµes */
1003 │         @keyframes fadeIn {
1004 │             from {
1005 │                 opacity: 0;
1006 │                 transform: translateY(30px);
1007 │             }
1008 │             to {
1009 │                 opacity: 1;
1010 │                 transform: translateY(0);
1011 │             }
1012 │         }
1013 │ 
1014 │         @keyframes slideIn {
1015 │             from {
1016 │                 opacity: 0;
1017 │                 transform: translateX(-30px);
1018 │             }
1019 │             to {
1020 │                 opacity: 1;
1021 │                 transform: translateX(0);
1022 │             }
1023 │         }
1024 │ 
1025 │         @keyframes ripple {
1026 │             to {
1027 │                 transform: scale(2);
1028 │                 opacity: 0;
1029 │             }
1030 │         }
1031 │ 
1032 │         .fade-in {
1033 │             animation: fadeIn 0.8s ease forwards;
1034 │         }
1035 │ 
1036 │         .slide-in {
1037 │             animation: slideIn 0.8s ease forwards;
1038 │         }
1039 │ 
1040 │         /* Scroll reveal animations */
1041 │         .reveal {
1042 │             opacity: 0;
1043 │             transform: translateY(50px);
1044 │             transition: all 0.8s ease;
1045 │         }
1046 │ 
1047 │         .reveal.active {
1048 │             opacity: 1;
1049 │             transform: translateY(0);
1050 │         }
1051 │ 
1052 │         /* Loading spinner for images */
1053 │         .loading {
1054 │             background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
1055 │             background-size: 200% 100%;
1056 │             animation: loading 1.5s infinite;
1057 │         }
1058 │ 
1059 │         @keyframes loading {
1060 │             0% {
1061 │                 background-position: 200% 0;
1062 │             }
1063 │             100% {
1064 │                 background-position: -200% 0;
1065 │             }
1066 │         }
1067 │     </style>
1068 │ </head>
1069 │ <body>
1070 │     <header class="header" id="header">
1071 │         <div class="nav-container">
1072 │             <div class="logo">
1073 │                 <div class="logo-img"></div>
1074 │                 <div class="logo-text">
1075 │                     <div class="logo-main">Gracie Barra</div>
1076 │                     <div class="logo-sub">Cidade Nova</div>
1077 │                 </div>
1078 │             </div>
1079 │             
1080 │             <div class="nav-wrapper">
1081 │                 <nav>
1082 │                     <ul class="nav-menu">
1083 │                         <li><a href="#inicio">InÃ­cio</a></li>
1084 │                         <li><a href="#sobre">Sobre</a></li>
1085 │                         <li><a href="#programas">Programas</a></li>
1086 │                         <li><a href="#beneficios">BenefÃ­cios</a></li>
1087 │                         <li><a href="#filosofia">Filosofia</a></li>
1088 │                         <li><a href="#professores">Professores</a></li>
1089 │                         <li><a href="#contato">Contato</a></li>
1090 │                     </ul>
1091 │                 </nav>
1092 │                 
1093 │                 <button class="theme-toggle" id="themeToggle">
1094 │                     <span id="themeIcon">ðŸŒ™</span>
1095 │                     <span id="themeText">Escuro</span>
1096 │                 </button>
1097 │             </div>
1098 │             
1099 │             <button class="mobile-menu" id="mobileMenuBtn" aria-label="Abrir menu">â˜°</button>
1100 │         </div>
1101 │         
1102 │         <nav class="mobile-nav" id="mobileNav" aria-label="Menu Mobile">
1103 │             <ul>
1104 │                 <li><a href="#inicio">InÃ­cio</a></li>
1105 │                 <li><a href="#sobre">Sobre</a></li>
1106 │                 <li><a href="#programas">Programas</a></li>
1107 │                 <li><a href="#beneficios">BenefÃ­cios</a></li>
1108 │                 <li><a href="#filosofia">Filosofia</a></li>
1109 │                 <li><a href="#professores">Professores</a></li>
1110 │                 <li><a href="#contato">Contato</a></li>
1111 │             </ul>
1112 │             <button class="theme-toggle" id="mobileThemeToggle">
1113 │                 <span id="mobileThemeIcon">ðŸŒ™</span>
1114 │                 <span id="mobileThemeText">Escuro</span>
1115 │             </button>
1116 │         </nav>
1117 │     </header>
1118 │ 
1119 │     <section id="inicio" class="hero">
1120 │         <div class="hero-content reveal">
1121 │             <h1>Gracie Barra Cidade Nova</h1>
1122 │             <div class="subtitle">Jiu-Jitsu para Todos</div>
1123 │             <a href="#contato" class="cta-button">ComeÃ§ar a Treinar</a>
1124 │         </div>
1125 │     </section>
1126 │ 
1127 │     <section id="sobre" class="section">
1128 │         <h2 class="section-title reveal">Sobre a Gracie Barra</h2>
1129 │         <p class="section-subtitle reveal">Gracie Barra Ã© uma comunidade mundial de instrutores, estudantes e atletas do Jiu-Jitsu. Nossa organizaÃ§Ã£o Ã© constituÃ­da por mais de 700 escolas em seis continentes.</p>
1130 │         
1131 │         <div class="two-column">
1132 │             <div class="content-block reveal">
1133 │                 <h3>Nossa Unidade</h3>
1134 │                 <p>A Gracie Barra Cidade Nova representa a excelÃªncia do ensino de Jiu-Jitsu em Manaus. Seguimos os padrÃµes globais da Gracie Barra, oferecendo um ambiente estruturado e acolhedor para todos os nÃ­veis de experiÃªncia.</p>
1135 │                 <p>Localizada estrategicamente na Cidade Nova, nossa academia conta com infraestrutura moderna e professores qualificados, proporcionando a melhor experiÃªncia de aprendizado do Jiu-Jitsu brasileiro em toda a regiÃ£o amazÃ´nica.</p>
1136 │             </div>
1137 │             <div class="image-placeholder academia-img reveal"></div>
1138 │         </div>
1139 │     </section>
1140 │ 
1141 │     <section class="section">
1142 │         <div class="two-column">
1143 │             <div class="image-placeholder metodo-img reveal"></div>
1144 │             <div class="content-block reveal">
1145 │                 <h3>Nosso MÃ©todo</h3>
1146 │                 <p>A partir da ideia de que o Jiu-Jitsu deve ser adotado como uma jornada por toda a vida, Mestre Carlos Gracie Jr. criou um plano estruturado que permite aos alunos progredirem sistematicamente da faixa-branca Ã  faixa-preta.</p>
1147 │                 <p>A estrutura das aulas Ã© a marca registrada de todas as escolas Gracie Barra mundialmente. As aulas comeÃ§am na hora marcada e seguem uma estrutura curricular padronizada, garantindo qualidade e consistÃªncia no ensino.</p>
1148 │             </div>
1149 │         </div>
1150 │     </section>
1151 │ 
1152 │     <section class="section">
1153 │         <div class="two-column">
1154 │             <div class="content-block reveal">
1155 │                 <h3>Por que Gracie Barra</h3>
1156 │                 <p>Os membros da GB fazem as escolas ser o que sÃ£o, e vocÃª logo serÃ¡ parte tambÃ©m desta grande famÃ­lia. VocÃª ficarÃ¡ impressionado com o comprometimento de cada membro da equipe com o seu desenvolvimento pessoal e tÃ©cnico.</p>
1157 │                 <p>Nossa comunidade em Cidade Nova reflete fielmente os valores fundamentais da Gracie Barra: Irmandade, ExpansÃ£o e Integridade, criando um ambiente Ãºnico e transformador para seu crescimento como pessoa e atleta.</p>
1158 │             </div>
1159 │             <div class="image-placeholder comunidade-img reveal"></div>
1160 │         </div>
1161 │     </section>
1162 │ 
1163 │     <section id="programas" class="section">
1164 │         <h2 class="section-title reveal">Programa Gracie Barra</h2>
1165 │         <p class="section-subtitle reveal">Programas estruturados para todas as idades e nÃ­veis de experiÃªncia, seguindo o mÃ©todo oficial Gracie Barra</p>
1166 │         
1167 │         <div class="programs-grid">
1168 │             <div class="program-card reveal">
1169 │                 <div class="program-icon">GB1</div>
1170 │                 <h3>GB1 - Fundamentals</h3>
1171 │                 <p>Programa para iniciantes com foco nos fundamentos bÃ¡sicos do Jiu-Jitsu e defesa pessoal. Ideal para quem estÃ¡ comeÃ§ando sua jornada no mundo das artes marciais e busca aprender as tÃ©cnicas essenciais.</p>
1172 │             </div>
1173 │             <div class="program-card reveal">
1174 │                 <div class="program-icon">GB2</div>
1175 │                 <h3>GB2 - Advanced</h3>
1176 │                 <p>Para alunos com experiÃªncia intermediÃ¡ria, desenvolvendo tÃ©cnicas avanÃ§adas e sparring controlado. Aprofundamento das habilidades tÃ©cnicas e introduÃ§Ã£o a conceitos mais complexos do Jiu-Jitsu.</p>
1177 │             </div>
1178 │             <div class="program-card reveal">
1179 │                 <div class="program-icon">GB3</div>
1180 │                 <h3>GB3 - Black Belt</h3>
1181 │                 <p>Programa avanÃ§ado para faixas marrons e pretas, com foco em competiÃ§Ã£o e refinamento tÃ©cnico. Desenvolvimento de alta performance e preparaÃ§Ã£o para competiÃ§Ãµes de elite.</p>
1182 │             </div>
1183 │             <div class="program-card reveal">
1184 │                 <div class="program-icon">ðŸ§’</div>
1185 │                 <h3>Little Champions</h3>
1186 │                 <p>Jiu-Jitsu para crianÃ§as de 4 a 6 anos, desenvolvendo coordenaÃ§Ã£o motora, disciplina e valores sociais fundamentais. IntroduÃ§Ã£o lÃºdica Ã s artes marciais com foco no desenvolvimento integral da crianÃ§a.</p>
1187 │             </div>
1188 │             <div class="program-card reveal">
1189 │                 <div class="program-icon">ðŸ‘¦</div>
1190 │                 <h3>Junior Champions</h3>
1191 │                 <p>Para jovens de 7 a 15 anos, combinando tÃ©cnicas de Jiu-Jitsu com desenvolvimento do carÃ¡ter. FormaÃ§Ã£o de jovens atletas com base sÃ³lida em valores e tÃ©cnicas marciais.</p>
1192 │             </div>
1193 │             <div class="program-card reveal">
1194 │                 <div class="program-icon">ðŸ‘©</div>
1195 │                 <h3>Women's Program</h3>
1196 │                 <p>Programa especial para mulheres, focando em defesa pessoal e empoderamento feminino. Ambiente seguro e acolhedor para o desenvolvimento da autoconfianÃ§a e habilidades de autodefesa.</p>
1197 │             </div>
1198 │         </div>
1199 │     </section>
1200 │ 
1201 │     <section id="beneficios" class="benefits-section section">
1202 │         <h2 class="section-title reveal">BenefÃ­cios do Jiu-Jitsu</h2>
1203 │         <p class="section-subtitle reveal">Transforme sua vida atravÃ©s da prÃ¡tica regular do Jiu-Jitsu e descubra todos os benefÃ­cios desta arte marcial</p>
1204 │         
1205 │         <div class="benefits-grid">
1206 │             <div class="benefit-item reveal">
1207 │                 <div class="benefit-icon">ðŸ’ª</div>
1208 │                 <h3>Condicionamento FÃ­sico</h3>
1209 │                 <p>Melhora significativa da forÃ§a, flexibilidade, resistÃªncia cardiovascular e coordenaÃ§Ã£o motora. O Jiu-Jitsu proporciona um treino completo que trabalha todo o corpo de forma harmoniosa.</p>
1210 │             </div>
1211 │             <div class="benefit-item reveal">
1212 │                 <div class="benefit-icon">ðŸ§ </div>
1213 │                 <h3>Desenvolvimento Mental</h3>
1214 │                 <p>Aumenta o foco, disciplina, autocontrole e capacidade de resoluÃ§Ã£o de problemas. A prÃ¡tica regular desenvolve a mente estratÃ©gica e a capacidade de tomar decisÃµes sob pressÃ£o.</p>
1215 │             </div>
1216 │             <div class="benefit-item reveal">
1217 │                 <div class="benefit-icon">ðŸ›¡ï¸</div>
1218 │                 <h3>Defesa Pessoal</h3>
1219 │                 <p>Aprenda tÃ©cnicas eficazes de autodefesa e desenvolva confianÃ§a para se proteger. O Jiu-Jitsu ensina como neutralizar agressores maiores e mais fortes usando tÃ©cnica e alavancagem.</p>
1220 │             </div>
1221 │             <div class="benefit-item reveal">
1222 │                 <div class="benefit-icon">ðŸ¤</div>
1223 │                 <h3>SocializaÃ§Ã£o</h3>
1224 │                 <p>FaÃ§a parte de uma comunidade unida e desenvolva amizades duradouras. O ambiente da Gracie Barra promove o respeito mÃºtuo e a formaÃ§Ã£o de laÃ§os verdadeiros entre os praticantes.</p>
1225 │             </div>
1226 │             <div class="benefit-item reveal">
1227 │                 <div class="benefit-icon">âš–ï¸</div>
1228 │                 <h3>EquilÃ­brio Emocional</h3>
1229 │                 <p>Reduza o estresse, ansiedade e desenvolva maior estabilidade emocional. A prÃ¡tica do Jiu-Jitsu serve como uma vÃ¡lvula de escape saudÃ¡vel para as pressÃµes do dia a dia.</p>
1230 │             </div>
1231 │             <div class="benefit-item reveal">
1232 │                 <div class="benefit-icon">ðŸ†</div>
1233 │                 <h3>Conquistas Pessoais</h3>
1234 │                 <p>EstabeleÃ§a e alcance metas progressivas, celebrando cada evoluÃ§Ã£o em sua jornada. O sistema de graduaÃ§Ã£o motiva o crescimento contÃ­nuo e o desenvolvimento pessoal.</p>
1235 │             </div>
1236 │         </div>
1237 │     </section>
1238 │ 
1239 │     <section class="quote-section">
1240 │         <div class="quote reveal">
1241 │             "Minha vida Ã© dedicada ao Jiu-Jitsu. Meu objetivo sempre foi construir uma irmandade para liderar a expansÃ£o do Jiu-Jitsu, respeitando sempre a essÃªncia da nossa arte. Meus alunos sÃ£o uma extensÃ£o da minha famÃ­lia."
1242 │         </div>
1243 │         <div class="quote-author reveal">- Carlos Gracie Jr.</div>
1244 │     </section>
1245 │ 
1246 │     <section id="filosofia" class="section">
1247 │         <h2 class="section-title reveal">Nossos Valores</h2>
1248 │         <p class="section-subtitle reveal">Os pilares fundamentais que sustentam a Gracie Barra em todo o mundo e orientam nossa missÃ£o</p>
1249 │         
1250 │         <div class="values-grid">
1251 │             <div class="value-card reveal">
1252 │                 <h3>Irmandade</h3>
1253 │                 <p>ConstruÃ­mos uma comunidade forte baseada no respeito mÃºtuo, apoio incondicional e crescimento conjunto, onde cada membro Ã© valorizado, respeitado e considerado parte de uma grande famÃ­lia marcial que transcende diferenÃ§as sociais, culturais e econÃ´micas.</p>
1254 │             </div>
1255 │             <div class="value-card reveal">
1256 │                 <h3>ExpansÃ£o</h3>
1257 │                 <p>Compartilhamos o Jiu-Jitsu como ferramenta de transformaÃ§Ã£o social e pessoal, levando seus benefÃ­cios para toda a comunidade de Manaus e regiÃ£o amazÃ´nica, democratizando o acesso a esta arte marcial e seus valores transformadores.</p>
1258 │             </div>
1259 │             <div class="value-card reveal">
1260 │                 <h3>Integridade</h3>
1261 │                 <p>Mantemos os mais altos padrÃµes Ã©ticos e morais em todas nossas aÃ§Ãµes, preservando fielmente a tradiÃ§Ã£o e os valores autÃªnticos do Jiu-Jitsu Brasileiro, honrando o legado deixado pela famÃ­lia Gracie e transmitindo-o com responsabilidade.</p>
1262 │             </div>
1263 │         </div>
1264 │     </section>
1265 │ 
1266 │     <section id="professores" class="section">
1267 │         <h2 class="section-title reveal">Nossos Professores</h2>
1268 │         <p class="section-subtitle reveal">Instrutores qualificados e certificados pela Gracie Barra, dedicados ao seu desenvolvimento</p>
1269 │         
1270 │         <div class="instructors-grid">
1271 │             <div class="instructor-card reveal">
1272 │                 <div class="instructor-img instructor-1"></div>
1273 │                 <div class="instructor-info">
1274 │                     <h3>Professor Principal</h3>
1275 │                     <div class="rank">Faixa Preta 2Âº Grau</div>
1276 │                     <p>Em manutenÃ§Ã£o</p>
1277 │                 </div>
1278 │             </div>
1279 │             <div class="instructor-card reveal">
1280 │                 <div class="instructor-img instructor-2"></div>
1281 │                 <div class="instructor-info">
1282 │                     <h3>Professor Assistente</h3>
1283 │                     <div class="rank">Faixa Marrom</div>
1284 │                     <p>Em manutenÃ§Ã£o</p>
1285 │                 </div>
1286 │             </div>
1287 │             <div class="instructor-card reveal">
1288 │                 <div class="instructor-img instructor-3"></div>
1289 │                 <div class="instructor-info">
1290 │                     <h3>Professora Feminino</h3>
1291 │                     <div class="rank">Faixa Preta</div>
1292 │                     <p>Em manutenÃ§Ã£o</p>
1293 │                 </div>
1294 │             </div>
1295 │         </div>
1296 │     </section>
1297 │ 
1298 │     <section class="section">
1299 │         <h2 class="section-title reveal">Ãšltimas NotÃ­cias</h2>
1300 │         <p class="section-subtitle reveal">Fique por dentro das novidades da GB Cidade Nova e nossa comunidade</p>
1301 │         
1302 │         <div class="news-grid">
1303 │             <div class="news-card reveal">
1304 │                 <div class="news-img news-1"></div>
1305 │                 <div class="news-content">
1306 │                     <div class="news-date">15 de Junho, 2024</div>
1307 │                     <div class="news-title">InauguraÃ§Ã£o da Nova Ãrea de Treinamento</div>
1308 │                     <p>Expandimos nossas instalaÃ§Ãµes para oferecer ainda mais espaÃ§o e conforto para nossos alunos. A nova Ã¡rea inclui tatames de Ãºltima geraÃ§Ã£o e equipamentos modernos para um treinamento ainda mais eficiente e seguro.</p>
1309 │                 </div>
1310 │             </div>
1311 │             <div class="news-card reveal">
1312 │                 <div class="news-img news-2"></div>
1313 │                 <div class="news-content">
1314 │                     <div class="news-date">10 de Junho, 2024</div>
1315 │                     <div class="news-title">CompetiÃ§Ã£o Regional de Jiu-Jitsu</div>
1316 │                     <p>Nossos atletas se destacaram na competiÃ§Ã£o regional, conquistando diversas medalhas de ouro, prata e bronze. Resultado do trabalho dedicado de nossos professores e do comprometimento exemplar de nossos competidores.</p>
1317 │                 </div>
1318 │             </div>
1319 │             <div class="news-card reveal">
1320 │                 <div class="news-img news-3"></div>
1321 │                 <div class="news-content">
1322 │                     <div class="news-date">5 de Junho, 2024</div>
1323 │                     <div class="news-title">SeminÃ¡rio com Faixa Preta Visitante</div>
1324 │                     <p>Recebemos um faixa preta internacional para um seminÃ¡rio exclusivo sobre tÃ©cnicas de guarda. Uma oportunidade Ãºnica de aprendizado com um dos maiores especialistas mundiais na modalidade.</p>
1325 │                 </div>
1326 │             </div>
1327 │         </div>
1328 │     </section>
1329 │ 
1330 │     <section id="contato" class="contact-section">
1331 │         <div class="contact-content">
1332 │             <h2 class="section-title reveal">Entre em Contato</h2>
1333 │             <p class="section-subtitle reveal">Comece sua jornada no Jiu-Jitsu hoje mesmo e transforme sua vida</p>
1334 │             
1335 │             <div class="contact-grid">
1336 │                 <div class="contact-info reveal">
1337 │                     <h3>InformaÃ§Ãµes de Contato</h3>
1338 │                     <p>ðŸ“ <strong>EndereÃ§o:</strong> Av. Atroaris, quadra 20, n. 129, Conj. Renato Souza, R. Cap. Braule Pinto - Cidade Nova, Manaus - AM</p>
1339 │                     <p>ðŸ“ž <strong>Telefone:</strong> (92) 8113-6742</p>
1340 │                     <p>ðŸ“§ <strong>Email:</strong> email@graciebarra.com.br</p>
1341 │                     <div class="social-links">
1342 │                         <a href="https://www.instagram.com/gb_cidadenova/" target="_blank" title="Instagram">ðŸ“·</a>
1343 │                         <a href="#" title="Facebook">ðŸ“˜</a>
1344 │                         <a href="#" title="WhatsApp">ðŸ’¬</a>
1345 │                     </div>
1346 │                 </div>
1347 │                 <div class="contact-info reveal">
1348 │                     <h3>HorÃ¡rios de Funcionamento</h3>
1349 │                     <p><strong>Segunda a Sexta:</strong> 06:00 - 22:00</p>
1350 │                     <p><strong>SÃ¡bado:</strong> 08:00 - 16:00</p>
1351 │                     <p><strong>Domingo:</strong> Fechado</p>
1352 │                     <br>
1353 │                     <a href="#contato" class="cta-button">Agendar Aula Experimental</a>
1354 │                 </div>  
1355 │             </div>
1356 │         </div>
1357 │     </section>
1358 │ 
1359 │     <footer class="footer">
1360 │         <p>&copy; 2024 Gracie Barra Cidade Nova. Todos os direitos reservados.</p>
1361 │         <p>Parte da rede mundial Gracie Barra - Jiu-Jitsu para Todos</p>
1362 │         <p style="margin-top:1rem;font-size:0.95em;">
1363 │             Desenvolvido por <a href="https://i9script.com.br" target="_blank" rel="noopener" style="color:#fff;text-decoration:underline;">i9Script</a>
1364 │         </p>
1365 │     </footer>
1366 │ 
1367 │     <button class="scroll-to-top" id="scrollToTop">â†‘</button>
1368 │ 
1369 │     <script>
1370 │         // Variables
1371 │         const header = document.getElementById('header');
1372 │         const mobileMenuBtn = document.getElementById('mobileMenuBtn');
1373 │         const mobileNav = document.getElementById('mobileNav');
1374 │         const scrollToTopBtn = document.getElementById('scrollToTop');
1375 │         const themeToggle = document.getElementById('themeToggle');
1376 │ 
1377 │         // Theme Management
1378 │         function toggleTheme() {
1379 │             const currentTheme = document.documentElement.getAttribute('data-theme');
1380 │             const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
1381 │             
1382 │             document.documentElement.setAttribute('data-theme', newTheme);
1383 │             localStorage.setItem('theme', newTheme);
1384 │             
1385 │             updateThemeToggle(newTheme);
1386 │         }
1387 │ 
1388 │         function updateThemeToggle(theme) {
1389 │             const themeIcon = document.getElementById('themeIcon');
1390 │             const themeText = document.getElementById('themeText');
1391 │             const mobileThemeIcon = document.getElementById('mobileThemeIcon');
1392 │             
1393 │             if (theme === 'dark') {
1394 │                 if (themeIcon) themeIcon.textContent = 'â˜€ï¸';
1395 │                 if (themeText) themeText.textContent = 'Claro';
1396 │                 if (mobileThemeIcon) mobileThemeIcon.textContent = 'â˜€ï¸';
1397 │             } else {
1398 │                 if (themeIcon) themeIcon.textContent = 'ðŸŒ™';
1399 │                 if (themeText) themeText.textContent = 'Escuro';
1400 │                 if (mobileThemeIcon) mobileThemeIcon.textContent = 'ðŸŒ™';
1401 │             }
1402 │         }
1403 │ 
1404 │         // Initialize theme
1405 │         function initTheme() {
1406 │             const savedTheme = localStorage.getItem('theme');
1407 │             const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
1408 │             const initialTheme = savedTheme || (systemPrefersDark ? 'dark' : 'light');
1409 │             
1410 │             document.documentElement.setAttribute('data-theme', initialTheme);
1411 │             updateThemeToggle(initialTheme);
1412 │         }
1413 │ 
1414 │         // Theme toggle event listener
1415 │         if (themeToggle) {
1416 │             themeToggle.addEventListener('click', toggleTheme);
1417 │         }
1418 │ 
1419 │         // Initialize theme on page load
1420 │         initTheme();
1421 │ 
1422 │         // Scroll to top button visibility
1423 │         window.addEventListener('scroll', () => {
1424 │             if (scrollToTopBtn) {
1425 │                 if (window.scrollY > 300) {
1426 │                     scrollToTopBtn.style.display = 'block';
1427 │                 } else {
1428 │                     scrollToTopBtn.style.display = 'none';
1429 │                 }
1430 │             }
1431 │         });
1432 │ 
1433 │         // Mobile menu toggle
1434 │         if (mobileMenuBtn && mobileNav) {
1435 │             mobileMenuBtn.addEventListener('click', () => {
1436 │                 mobileNav.classList.toggle('active');
1437 │                 const isActive = mobileNav.classList.contains('active');
1438 │                 mobileMenuBtn.textContent = isActive ? 'âœ•' : 'â˜°';
1439 │                 mobileMenuBtn.style.transform = isActive ? 'rotate(180deg)' : 'rotate(0deg)';
1440 │             });
1441 │         }
1442 │ 
1443 │         // Close mobile menu when clicking on a link
1444 │         if (mobileNav) {
1445 │             mobileNav.addEventListener('click', (e) => {
1446 │                 if (e.target.tagName === 'A') {
1447 │                     mobileNav.classList.remove('active');
1448 │                     if (mobileMenuBtn) {
1449 │                         mobileMenuBtn.textContent = 'â˜°';
1450 │                         mobileMenuBtn.style.transform = 'rotate(0deg)';
1451 │                     }
1452 │                 }
1453 │             });
1454 │         }
1455 │ 
1456 │         // Close mobile menu when clicking outside
1457 │         document.addEventListener('click', (e) => {
1458 │             if (mobileNav && mobileMenuBtn && !mobileNav.contains(e.target) && !mobileMenuBtn.contains(e.target)) {
1459 │                 mobileNav.classList.remove('active');
1460 │                 mobileMenuBtn.textContent = 'â˜°';
1461 │                 mobileMenuBtn.style.transform = 'rotate(0deg)';
1462 │             }
1463 │         });
1464 │ 
1465 │         // Smooth scroll for anchor links
1466 │         document.querySelectorAll('a[href^="#"]').forEach(anchor => {
1467 │             anchor.addEventListener('click', function (e) {
1468 │                 e.preventDefault();
1469 │                 const target = document.querySelector(this.getAttribute('href'));
1470 │                 if (target) {
1471 │                     const targetPosition = target.offsetTop - 80; // Offset para header nÃ£o fixo
1472 │                     
1473 │                     window.scrollTo({
1474 │                         top: targetPosition,
1475 │                         behavior: 'smooth'
1476 │                     });
1477 │                 }
1478 │             });
1479 │         });
1480 │ 
1481 │         // Scroll to top function
1482 │         if (scrollToTopBtn) {
1483 │             scrollToTopBtn.addEventListener('click', () => {
1484 │                 window.scrollTo({
1485 │                     top: 0,
1486 │                     behavior: 'smooth'
1487 │                 });
1488 │             });
1489 │         }
1490 │ 
1491 │         // Scroll reveal animation
1492 │         const revealElements = document.querySelectorAll('.reveal');
1493 │         const revealObserver = new IntersectionObserver((entries) => {
1494 │             entries.forEach(entry => {
1495 │                 if (entry.isIntersecting) {
1496 │                     entry.target.classList.add('active');
1497 │                     revealObserver.unobserve(entry.target);
1498 │                 }
1499 │             });
1500 │         }, {
1501 │             threshold: 0.1,
1502 │             rootMargin: '0px 0px -50px 0px'
1503 │         });
1504 │ 
1505 │         revealElements.forEach(element => {
1506 │             revealObserver.observe(element);
1507 │         });
1508 │ 
1509 │         // Enhanced CTA button interaction
1510 │         document.querySelectorAll('.cta-button').forEach(button => {
1511 │             if (button) {
1512 │                 button.addEventListener('click', function(e) {
1513 │                     // Create ripple effect
1514 │                     const ripple = document.createElement('span');
1515 │                     const rect = this.getBoundingClientRect();
1516 │                     const size = Math.max(rect.width, rect.height);
1517 │                     const x = e.clientX - rect.left - size / 2;
1518 │                     const y = e.clientY - rect.top - size / 2;
1519 │                     
1520 │                     ripple.style.cssText = `
1521 │                         position: absolute;
1522 │                         width: ${size}px;
1523 │                         height: ${size}px;
1524 │                         left: ${x}px;
1525 │                         top: ${y}px;
1526 │                         background: rgba(255,255,255,0.3);
1527 │                         border-radius: 50%;
1528 │                         transform: scale(0);
1529 │                         animation: ripple 0.6s ease-out;
1530 │                         pointer-events: none;
1531 │                     `;
1532 │                     
1533 │                     this.appendChild(ripple);
1534 │                     
1535 │                     setTimeout(() => {
1536 │                         ripple.remove();
1537 │                     }, 600);
1538 │                 });
1539 │             }
1540 │         });
1541 │ 
1542 │         // Initialize animations
1543 │         document.addEventListener('DOMContentLoaded', () => {
1544 │             // Add fade-in class to hero content after page load
1545 │             setTimeout(() => {
1546 │                 const heroContent = document.querySelector('.hero-content');
1547 │                 if (heroContent) {
1548 │                     heroContent.classList.add('fade-in');
1549 │                 }
1550 │             }, 300);
1551 │         });
1552 │ 
1553 │         // Intersection Observer for section navigation highlighting
1554 │         const sections = document.querySelectorAll('section[id]');
1555 │         const navLinks = document.querySelectorAll('.nav-menu a[href^="#"]');
1556 │         
1557 │         if (sections.length > 0 && navLinks.length > 0) {
1558 │             const sectionObserver = new IntersectionObserver((entries) => {
1559 │                 entries.forEach(entry => {
1560 │                     if (entry.isIntersecting) {
1561 │                         const currentSection = entry.target.getAttribute('id');
1562 │                         navLinks.forEach(link => {
1563 │                             link.classList.remove('active');
1564 │                             if (link.getAttribute('href') === `#${currentSection}`) {
1565 │                                 link.classList.add('active');
1566 │                             }
1567 │                         });
1568 │                     }
1569 │                 });
1570 │             }, {
1571 │                 threshold: 0.3,
1572 │                 rootMargin: '-100px 0px -100px 0px'
1573 │             });
1574 │ 
1575 │             sections.forEach(section => {
1576 │                 sectionObserver.observe(section);
1577 │             });
1578 │         }
1579 │ 
1580 │         // Accessibility improvements
1581 │         document.addEventListener('keydown', (e) => {
1582 │             if (e.key === 'Escape' && mobileNav && mobileNav.classList.contains('active')) {
1583 │                 mobileNav.classList.remove('active');
1584 │                 if (mobileMenuBtn) {
1585 │                     mobileMenuBtn.textContent = 'â˜°';
1586 │                     mobileMenuBtn.style.transform = 'rotate(0deg)';
1587 │                 }
1588 │             }
1589 │         });
1590 │ 
1591 │         // Focus management for mobile menu
1592 │         if (mobileMenuBtn && mobileNav) {
1593 │             mobileMenuBtn.addEventListener('click', () => {
1594 │                 const isActive = mobileNav.classList.contains('active');
1595 │                 if (isActive) {
1596 │                     const firstLink = mobileNav.querySelector('a');
1597 │                     if (firstLink) firstLink.focus();
1598 │                 }
1599 │             });
1600 │         }
1601 │ 
1602 │         // Performance optimization
1603 │         let ticking = false;
1604 │         function requestTick() {
1605 │             if (!ticking) {
1606 │                 requestAnimationFrame(() => {
1607 │                     ticking = false;
1608 │                 });
1609 │                 ticking = true;
1610 │             }
1611 │         }
1612 │ 
1613 │         window.addEventListener('scroll', requestTick);
1614 │ 
1615 │         // Error handling
1616 │         window.addEventListener('error', (e) => {
1617 │             console.warn('Erro detectado:', e.message);
1618 │         });
1619 │ 
1620 │         // Page load optimization
1621 │         window.addEventListener('load', () => {
1622 │             const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
1623 │             console.log('Tempo de carregamento:', loadTime + 'ms');
1624 │         });
1625 │ 
1626 │         // Lazy loading for background images
1627 │         const imageElements = document.querySelectorAll('.image-placeholder, .instructor-img, .news-img');
1628 │         
1629 │         const imageObserver = new IntersectionObserver((entries) => {
1630 │             entries.forEach(entry => {
1631 │                 if (entry.isIntersecting) {
1632 │                     entry.target.style.opacity = '1';
1633 │                     imageObserver.unobserve(entry.target);
1634 │                 }
1635 │             });
1636 │         });
1637 │ 
1638 │         imageElements.forEach(img => {
1639 │             img.style.opacity = '0.8';
1640 │             img.style.transition = 'opacity 0.5s ease';
1641 │             imageObserver.observe(img);
1642 │         });
1643 │ 
1644 │         // Add smooth transitions to all interactive elements
1645 │         document.querySelectorAll('.program-card, .benefit-item, .instructor-card, .news-card, .value-card').forEach(card => {
1646 │             card.addEventListener('mouseenter', function() {
1647 │                 this.style.transform = this.classList.contains('program-card') ? 'translateY(-12px) scale(1.02)' : 
1648 │                                      this.classList.contains('instructor-card') ? 'translateY(-15px)' :
1649 │                                      'translateY(-8px)';
1650 │             });
1651 │             
1652 │             card.addEventListener('mouseleave', function() {
1653 │                 this.style.transform = this.classList.contains('value-card') ? 'translateX(0)' : 'translateY(0) scale(1)';
1654 │             });
1655 │         });
1656 │ 
1657 │         // Responsive navigation adjustments
1658 │         function handleResize() {
1659 │             const navContainer = document.querySelector('.nav-container');
1660 │             const navWrapper = document.querySelector('.nav-wrapper');
1661 │             
1662 │             if (window.innerWidth <= 1024) {
1663 │                 navContainer.style.flexWrap = 'wrap';
1664 │                 if (navWrapper) {
1665 │                     navWrapper.style.width = '100%';
1666 │                     navWrapper.style.justifyContent = 'space-between';
1667 │                     navWrapper.style.marginTop = '1rem';
1668 │                 }
1669 │             } else {
1670 │                 navContainer.style.flexWrap = 'nowrap';
1671 │                 if (navWrapper) {
1672 │                     navWrapper.style.width = 'auto';
1673 │                     navWrapper.style.marginTop = '0';
1674 │                 }
1675 │             }
1676 │         }
1677 │ 
1678 │         window.addEventListener('resize', handleResize);
1679 │         handleResize(); // Call on load
1680 │ 
1681 │         // Enhanced theme toggle functionality
1682 │         function enhancedThemeToggle() {
1683 │             const currentTheme = document.documentElement.getAttribute('data-theme');
1684 │             const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
1685 │             
1686 │             // Add transition class
1687 │             document.body.classList.add('theme-transitioning');
1688 │             
1689 │             document.documentElement.setAttribute('data-theme', newTheme);
1690 │             localStorage.setItem('theme', newTheme);
1691 │             updateThemeToggle(newTheme);
1692 │             
1693 │             // Remove transition class after animation
1694 │             setTimeout(() => {
1695 │                 document.body.classList.remove('theme-transitioning');
1696 │             }, 300);
1697 │         }
1698 │ 
1699 │         // Replace the existing toggle function
1700 │         if (themeToggle) {
1701 │             themeToggle.removeEventListener('click', toggleTheme);
1702 │             themeToggle.addEventListener('click', enhancedThemeToggle);
1703 │         }
1704 │ 
1705 │         // Add CSS for theme transition
1706 │         const themeTransitionStyle = document.createElement('style');
1707 │         themeTransitionStyle.textContent = `
1708 │             .theme-transitioning * {
1709 │                 transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease !important;
1710 │             }
1711 │         `;
1712 │         document.head.appendChild(themeTransitionStyle);
1713 │ 
1714 │         // Theme toggle for mobile
1715 │         const mobileThemeToggle = document.getElementById('mobileThemeToggle');
1716 │         if (mobileThemeToggle) {
1717 │             mobileThemeToggle.addEventListener('click', toggleTheme);
1718 │         }
1719 │     </script>
1720 │ </body>
1721 │ </html>

═══════════════════════════════════════════════════════════════
ARQUIVO: src\package.json
Tamanho: 0KB
Modificado: 07/09/2025 10:47:02
═══════════════════════════════════════════════════════════════

ESTATÍSTICAS DO PROJETO
==========================
Total de arquivos: 38
Tamanho total: 6.38MB

Arquivos por extensão:
   .jpg : 7 arquivo(s)
   .png : 6 arquivo(s)
   .php : 5 arquivo(s)
   .js : 4 arquivo(s)
   .html : 4 arquivo(s)
   .json : 3 arquivo(s)
   (sem extensão) : 2 arquivo(s)
   .dockerignore : 1 arquivo(s)
   .css : 1 arquivo(s)
   .conf : 1 arquivo(s)
   .yml : 1 arquivo(s)
   .txt : 1 arquivo(s)
   .sql : 1 arquivo(s)
   .md : 1 arquivo(s)

Extração concluída com sucesso!
Arquivo salvo como: projeto_analise_2025-07-14_15-03-15.txt
